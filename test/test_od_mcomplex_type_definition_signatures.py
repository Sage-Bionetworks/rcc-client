# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import rcc
from rcc.models.od_mcomplex_type_definition_signatures import ODMcomplexTypeDefinitionSignatures  # noqa: E501
from rcc.rest import ApiException

class TestODMcomplexTypeDefinitionSignatures(unittest.TestCase):
    """ODMcomplexTypeDefinitionSignatures unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ODMcomplexTypeDefinitionSignatures
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = rcc.models.od_mcomplex_type_definition_signatures.ODMcomplexTypeDefinitionSignatures()  # noqa: E501
        if include_optional :
            return ODMcomplexTypeDefinitionSignatures(
                signature = [
                    rcc.models.od_mcomplex_type_definition_signature.ODMcomplexTypeDefinitionSignature(
                        user_ref = rcc.models.od_mcomplex_type_definition_user_ref.ODMcomplexTypeDefinitionUserRef(
                            user_oid = '0', ), 
                        location_ref = rcc.models.od_mcomplex_type_definition_location_ref.ODMcomplexTypeDefinitionLocationRef(
                            location_oid = '0', ), 
                        signature_ref = rcc.models.od_mcomplex_type_definition_signature_ref.ODMcomplexTypeDefinitionSignatureRef(
                            signature_oid = '0', ), 
                        date_time_stamp = rcc.models.od_mcomplex_type_definition_date_time_stamp.ODMcomplexTypeDefinitionDateTimeStamp(
                            value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                        crypto_binding_manifest = rcc.models.od_mcomplex_type_definition_crypto_binding_manifest.ODMcomplexTypeDefinitionCryptoBindingManifest(
                            value = '0', ), 
                        id = '0', )
                    ]
            )
        else :
            return ODMcomplexTypeDefinitionSignatures(
        )

    def testODMcomplexTypeDefinitionSignatures(self):
        """Test ODMcomplexTypeDefinitionSignatures"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
