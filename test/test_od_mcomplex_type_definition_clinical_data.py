# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import rcc
from rcc.models.od_mcomplex_type_definition_clinical_data import ODMcomplexTypeDefinitionClinicalData  # noqa: E501
from rcc.rest import ApiException

class TestODMcomplexTypeDefinitionClinicalData(unittest.TestCase):
    """ODMcomplexTypeDefinitionClinicalData unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ODMcomplexTypeDefinitionClinicalData
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = rcc.models.od_mcomplex_type_definition_clinical_data.ODMcomplexTypeDefinitionClinicalData()  # noqa: E501
        if include_optional :
            return ODMcomplexTypeDefinitionClinicalData(
                subject_data = [
                    rcc.models.od_mcomplex_type_definition_subject_data.ODMcomplexTypeDefinitionSubjectData(
                        audit_record = rcc.models.od_mcomplex_type_definition_audit_record.ODMcomplexTypeDefinitionAuditRecord(
                            user_ref = rcc.models.od_mcomplex_type_definition_user_ref.ODMcomplexTypeDefinitionUserRef(
                                user_oid = '0', ), 
                            location_ref = rcc.models.od_mcomplex_type_definition_location_ref.ODMcomplexTypeDefinitionLocationRef(
                                location_oid = '0', ), 
                            date_time_stamp = rcc.models.od_mcomplex_type_definition_date_time_stamp.ODMcomplexTypeDefinitionDateTimeStamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            reason_for_change = rcc.models.od_mcomplex_type_definition_reason_for_change.ODMcomplexTypeDefinitionReasonForChange(
                                value = '0', ), 
                            source_id = rcc.models.od_mcomplex_type_definition_source_id.ODMcomplexTypeDefinitionSourceID(
                                value = '0', ), 
                            edit_point = 'MONITORING', 
                            used_imputation_method = 'YES', 
                            id = '0', ), 
                        signature = rcc.models.od_mcomplex_type_definition_signature.ODMcomplexTypeDefinitionSignature(
                            user_ref = rcc.models.od_mcomplex_type_definition_user_ref.ODMcomplexTypeDefinitionUserRef(
                                user_oid = '0', ), 
                            location_ref = rcc.models.od_mcomplex_type_definition_location_ref.ODMcomplexTypeDefinitionLocationRef(
                                location_oid = '0', ), 
                            signature_ref = rcc.models.od_mcomplex_type_definition_signature_ref.ODMcomplexTypeDefinitionSignatureRef(
                                signature_oid = '0', ), 
                            date_time_stamp = rcc.models.od_mcomplex_type_definition_date_time_stamp.ODMcomplexTypeDefinitionDateTimeStamp(
                                value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                            crypto_binding_manifest = rcc.models.od_mcomplex_type_definition_crypto_binding_manifest.ODMcomplexTypeDefinitionCryptoBindingManifest(
                                value = '0', ), 
                            id = '0', ), 
                        investigator_ref = rcc.models.od_mcomplex_type_definition_investigator_ref.ODMcomplexTypeDefinitionInvestigatorRef(
                            user_oid = '0', ), 
                        site_ref = rcc.models.od_mcomplex_type_definition_site_ref.ODMcomplexTypeDefinitionSiteRef(
                            location_oid = '0', ), 
                        annotation = [
                            rcc.models.od_mcomplex_type_definition_annotation.ODMcomplexTypeDefinitionAnnotation(
                                comment = rcc.models.od_mcomplex_type_definition_comment.ODMcomplexTypeDefinitionComment(
                                    value = '0', 
                                    sponsor_or_site = 'SPONSOR', ), 
                                flag = [
                                    rcc.models.od_mcomplex_type_definition_flag.ODMcomplexTypeDefinitionFlag(
                                        flag_value = rcc.models.od_mcomplex_type_definition_flag_value.ODMcomplexTypeDefinitionFlagValue(
                                            value = '0', 
                                            code_list_oid = '0', ), 
                                        flag_type = rcc.models.od_mcomplex_type_definition_flag_type.ODMcomplexTypeDefinitionFlagType(
                                            value = '0', 
                                            code_list_oid = '0', ), )
                                    ], 
                                seq_num = 56, 
                                transaction_type = 'INSERT', 
                                id = '0', )
                            ], 
                        study_event_data = [
                            rcc.models.od_mcomplex_type_definition_study_event_data.ODMcomplexTypeDefinitionStudyEventData(
                                form_data = [
                                    rcc.models.od_mcomplex_type_definition_form_data.ODMcomplexTypeDefinitionFormData(
                                        archive_layout_ref = rcc.models.od_mcomplex_type_definition_archive_layout_ref.ODMcomplexTypeDefinitionArchiveLayoutRef(
                                            archive_layout_oid = '0', ), 
                                        item_group_data = [
                                            rcc.models.od_mcomplex_type_definition_item_group_data.ODMcomplexTypeDefinitionItemGroupData(
                                                item_data_group = [
                                                    rcc.models.od_mcomplex_type_definition_item_data.ODMcomplexTypeDefinitionItemData(
                                                        measurement_unit_ref = rcc.models.od_mcomplex_type_definition_measurement_unit_ref.ODMcomplexTypeDefinitionMeasurementUnitRef(
                                                            measurement_unit_oid = '0', ), 
                                                        item_oid = '0', 
                                                        transaction_type = 'INSERT', 
                                                        is_null = 'YES', 
                                                        value = '0', 
                                                        updated_by = '0', 
                                                        updated_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                                        sdv = True, 
                                                        mrv = True, 
                                                        drv = True, 
                                                        sdvby = '0', 
                                                        sdvdate = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                                        mrvby = '0', 
                                                        mrvdate = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                                        drvby = '0', 
                                                        drvdate = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                                    ], 
                                                item_data_star_group = [
                                                    None
                                                    ], 
                                                item_group_oid = '0', 
                                                item_group_repeat_key = '0', 
                                                transaction_type = 'INSERT', )
                                            ], 
                                        updated_by = '0', 
                                        updated_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        sdv = True, 
                                        mrv = True, 
                                        drv = True, 
                                        status = '0', 
                                        states_history = '0', 
                                        form_oid = '0', 
                                        form_repeat_key = '0', 
                                        transaction_type = 'INSERT', 
                                        sdvby = '0', 
                                        sdvdate = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        mrvby = '0', 
                                        mrvdate = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        drvby = '0', 
                                        drvdate = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        desby = '0', 
                                        desdate = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        decby = '0', 
                                        decdate = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                                    ], 
                                unique_event_name = '0', 
                                status = '0', 
                                states_history = '0', 
                                event_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                study_event_oid = '0', 
                                study_event_repeat_key = '0', 
                                transaction_type = 'INSERT', )
                            ], 
                        subject_key = '0', 
                        transaction_type = 'INSERT', 
                        study_subject_id = '0', 
                        subject_screening_number = '0', 
                        subject_creation_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        subject_screening_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        study_group_name = '0', 
                        study_subject_initials = '0', 
                        study_subject_date_of_birth = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        study_subject_email = '0', 
                        screening_failure_notes = '0', 
                        enrollment_failure_notes = '0', 
                        enrollment_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        latest_reassignment_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        status = '0', 
                        states_history = '0', 
                        dynamic_group_class = '0', 
                        patient_identifier = '0', 
                        engage_uuid = '0', 
                        form_name = '0', 
                        custom_enroll_crf = True, 
                        screening_crf_passed = '0', 
                        enrollment_confirmed = '0', 
                        study_events = rcc.models.study_events.StudyEvents(
                            study_event = [
                                rcc.models.study_event.StudyEvent(
                                    study_event_crf = [
                                        rcc.models.study_event_crf.StudyEventCrf(
                                            crf_version_oid = '0', 
                                            date_interviewed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            interviewer_name = '0', 
                                            status_code = '0', 
                                            annotations = '0', 
                                            validator_annotations = '0', 
                                            validate_string = '0', 
                                            owner = '0', 
                                            date_created = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            date_updated = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            electronic_signature_status = True, 
                                            lock_status = True, 
                                            date_completed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            date_dde_started = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            date_dde_completed = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            date_sdv = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            medical_reviwed_by_id = '0', 
                                            medical_reviwed_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            medical_reviwed_status = True, 
                                            medical_review_comment = '0', 
                                            study_reviwed_by_id = '0', 
                                            study_reviwed_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            study_reviwed_status = True, 
                                            study_review_comment = '0', 
                                            disable_trigger = True, 
                                            signature_history = True, 
                                            signature_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            signature_owner = '0', 
                                            states = '0', 
                                            date_de_started = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                            migration_locked = True, 
                                            sdvcomment = '0', 
                                            ddecompleted_by_id = '0', 
                                            destarted_by_id = '0', )
                                        ], 
                                    subject_oid = '0', 
                                    event_definition_oid = '0', 
                                    location = '0', 
                                    occurence = 56, 
                                    date_start = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    date_end = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    status = '0', 
                                    start_time_flag = True, 
                                    end_time_flag = True, 
                                    reference_visit_oid = '0', 
                                    signature_date = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                    signature_owner = '0', 
                                    signature_history = True, 
                                    states = '0', 
                                    study_event_oid = '0', 
                                    repeating_form_parent_oid = '0', 
                                    migration_locked = True, )
                                ], ), 
                        econsent_status = '0', 
                        crfversion = '0', 
                        econsent_screening_crf_passed = '0', )
                    ], 
                audit_records = [
                    rcc.models.od_mcomplex_type_definition_audit_records.ODMcomplexTypeDefinitionAuditRecords(
                        audit_record = [
                            rcc.models.od_mcomplex_type_definition_audit_record.ODMcomplexTypeDefinitionAuditRecord(
                                user_ref = rcc.models.od_mcomplex_type_definition_user_ref.ODMcomplexTypeDefinitionUserRef(
                                    user_oid = '0', ), 
                                location_ref = rcc.models.od_mcomplex_type_definition_location_ref.ODMcomplexTypeDefinitionLocationRef(
                                    location_oid = '0', ), 
                                date_time_stamp = rcc.models.od_mcomplex_type_definition_date_time_stamp.ODMcomplexTypeDefinitionDateTimeStamp(
                                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                reason_for_change = rcc.models.od_mcomplex_type_definition_reason_for_change.ODMcomplexTypeDefinitionReasonForChange(
                                    value = '0', ), 
                                source_id = rcc.models.od_mcomplex_type_definition_source_id.ODMcomplexTypeDefinitionSourceID(
                                    value = '0', ), 
                                edit_point = 'MONITORING', 
                                used_imputation_method = 'YES', 
                                id = '0', )
                            ], )
                    ], 
                signatures = [
                    rcc.models.od_mcomplex_type_definition_signatures.ODMcomplexTypeDefinitionSignatures(
                        signature = [
                            rcc.models.od_mcomplex_type_definition_signature.ODMcomplexTypeDefinitionSignature(
                                user_ref = rcc.models.od_mcomplex_type_definition_user_ref.ODMcomplexTypeDefinitionUserRef(
                                    user_oid = '0', ), 
                                location_ref = rcc.models.od_mcomplex_type_definition_location_ref.ODMcomplexTypeDefinitionLocationRef(
                                    location_oid = '0', ), 
                                signature_ref = rcc.models.od_mcomplex_type_definition_signature_ref.ODMcomplexTypeDefinitionSignatureRef(
                                    signature_oid = '0', ), 
                                date_time_stamp = rcc.models.od_mcomplex_type_definition_date_time_stamp.ODMcomplexTypeDefinitionDateTimeStamp(
                                    value = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), ), 
                                crypto_binding_manifest = rcc.models.od_mcomplex_type_definition_crypto_binding_manifest.ODMcomplexTypeDefinitionCryptoBindingManifest(
                                    value = '0', ), 
                                id = '0', )
                            ], )
                    ], 
                annotations = [
                    rcc.models.od_mcomplex_type_definition_annotations.ODMcomplexTypeDefinitionAnnotations(
                        annotation = [
                            rcc.models.od_mcomplex_type_definition_annotation.ODMcomplexTypeDefinitionAnnotation(
                                comment = rcc.models.od_mcomplex_type_definition_comment.ODMcomplexTypeDefinitionComment(
                                    value = '0', 
                                    sponsor_or_site = 'SPONSOR', ), 
                                flag = [
                                    rcc.models.od_mcomplex_type_definition_flag.ODMcomplexTypeDefinitionFlag(
                                        flag_value = rcc.models.od_mcomplex_type_definition_flag_value.ODMcomplexTypeDefinitionFlagValue(
                                            value = '0', 
                                            code_list_oid = '0', ), 
                                        flag_type = rcc.models.od_mcomplex_type_definition_flag_type.ODMcomplexTypeDefinitionFlagType(
                                            value = '0', 
                                            code_list_oid = '0', ), )
                                    ], 
                                seq_num = 56, 
                                transaction_type = 'INSERT', 
                                id = '0', )
                            ], )
                    ], 
                study_oid = '0', 
                meta_data_version_oid = '0'
            )
        else :
            return ODMcomplexTypeDefinitionClinicalData(
        )

    def testODMcomplexTypeDefinitionClinicalData(self):
        """Test ODMcomplexTypeDefinitionClinicalData"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
