# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import rcc
from rcc.models.od_mcomplex_type_definition_study_event_def import ODMcomplexTypeDefinitionStudyEventDef  # noqa: E501
from rcc.rest import ApiException

class TestODMcomplexTypeDefinitionStudyEventDef(unittest.TestCase):
    """ODMcomplexTypeDefinitionStudyEventDef unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ODMcomplexTypeDefinitionStudyEventDef
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = rcc.models.od_mcomplex_type_definition_study_event_def.ODMcomplexTypeDefinitionStudyEventDef()  # noqa: E501
        if include_optional :
            return ODMcomplexTypeDefinitionStudyEventDef(
                description = rcc.models.od_mcomplex_type_definition_description.ODMcomplexTypeDefinitionDescription(
                    translated_text = [
                        rcc.models.od_mcomplex_type_definition_translated_text.ODMcomplexTypeDefinitionTranslatedText(
                            value = '0', 
                            lang = '0', )
                        ], ), 
                form_ref = [
                    rcc.models.od_mcomplex_type_definition_form_ref.ODMcomplexTypeDefinitionFormRef(
                        default_version = '0', 
                        source_data_verification = '0', 
                        double_data_entry = True, 
                        display_sequence = 56, 
                        required_crf = True, 
                        hide_crf = True, 
                        accept_new_crf_versions = True, 
                        dynamic_form = True, 
                        source_data_verification_code = 56, 
                        repeating = 'YES', 
                        use_in_progress = True, 
                        form_oid = '0', 
                        order_number = 56, 
                        mandatory = 'YES', 
                        collection_exception_condition_oid = '0', 
                        monitoring = [
                            rcc.models.monitoring.Monitoring(
                                partial_item = [
                                    rcc.models.partial_item.PartialItem(
                                        item_name = '0', 
                                        item_oid = '0', 
                                        comment_required = True, 
                                        required = True, )
                                    ], 
                                type = '0', 
                                crf_type = '0', 
                                display_sequence = 56, 
                                comment_required = True, 
                                optional = True, )
                            ], 
                        partial_sdv = [
                            rcc.models.partial_sdv.PartialSDV(
                                item_name = '0', 
                                item_oid = '0', )
                            ], )
                    ], 
                alias = [
                    rcc.models.od_mcomplex_type_definition_alias.ODMcomplexTypeDefinitionAlias(
                        context = '0', 
                        name = '0', )
                    ], 
                unique_event_name = '0', 
                study_event_definition_type = '0', 
                display_sequence = 56, 
                day_schedule = 56, 
                day_min = 56, 
                day_max = 56, 
                grace_hour_min = 56, 
                grace_hour_max = 56, 
                grace_minute_min = 56, 
                grace_minute_max = 56, 
                can_edit_before = True, 
                can_edit_after = True, 
                weekdays_only = True, 
                dynamic_event = True, 
                repeat_frequency = 56, 
                repeat_for_how_many_days = 56, 
                created_by_rule = True, 
                oid = '0', 
                name = '0', 
                repeating = 'YES', 
                type = 'SCHEDULED', 
                category = '0', 
                econsent_event = True
            )
        else :
            return ODMcomplexTypeDefinitionStudyEventDef(
        )

    def testODMcomplexTypeDefinitionStudyEventDef(self):
        """Test ODMcomplexTypeDefinitionStudyEventDef"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
