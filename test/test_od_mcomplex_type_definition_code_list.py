# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import rcc
from rcc.models.od_mcomplex_type_definition_code_list import ODMcomplexTypeDefinitionCodeList  # noqa: E501
from rcc.rest import ApiException

class TestODMcomplexTypeDefinitionCodeList(unittest.TestCase):
    """ODMcomplexTypeDefinitionCodeList unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ODMcomplexTypeDefinitionCodeList
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = rcc.models.od_mcomplex_type_definition_code_list.ODMcomplexTypeDefinitionCodeList()  # noqa: E501
        if include_optional :
            return ODMcomplexTypeDefinitionCodeList(
                description = rcc.models.od_mcomplex_type_definition_description.ODMcomplexTypeDefinitionDescription(
                    translated_text = [
                        rcc.models.od_mcomplex_type_definition_translated_text.ODMcomplexTypeDefinitionTranslatedText(
                            value = '0', 
                            lang = '0', )
                        ], ), 
                code_list_item = [
                    rcc.models.od_mcomplex_type_definition_code_list_item.ODMcomplexTypeDefinitionCodeListItem(
                        decode = rcc.models.od_mcomplex_type_definition_decode.ODMcomplexTypeDefinitionDecode(
                            translated_text = [
                                rcc.models.od_mcomplex_type_definition_translated_text.ODMcomplexTypeDefinitionTranslatedText(
                                    value = '0', 
                                    lang = '0', )
                                ], ), 
                        alias = [
                            rcc.models.od_mcomplex_type_definition_alias.ODMcomplexTypeDefinitionAlias(
                                context = '0', 
                                name = '0', )
                            ], 
                        coded_value = '0', 
                        ui_width = '0', 
                        rank = 1.337, 
                        order_number = 56, )
                    ], 
                external_code_list = rcc.models.od_mcomplex_type_definition_external_code_list.ODMcomplexTypeDefinitionExternalCodeList(
                    dictionary = '0', 
                    version = '0', 
                    href = '0', 
                    ref = '0', ), 
                enumerated_item = [
                    rcc.models.od_mcomplex_type_definition_enumerated_item.ODMcomplexTypeDefinitionEnumeratedItem(
                        alias = [
                            rcc.models.od_mcomplex_type_definition_alias.ODMcomplexTypeDefinitionAlias(
                                context = '0', 
                                name = '0', )
                            ], 
                        coded_value = '0', 
                        ui_width = '0', 
                        rank = 1.337, 
                        order_number = 56, )
                    ], 
                alias = [
                    rcc.models.od_mcomplex_type_definition_alias.ODMcomplexTypeDefinitionAlias(
                        context = '0', 
                        name = '0', )
                    ], 
                oid = '0', 
                name = '0', 
                data_type = 'INTEGER', 
                label = '0', 
                form_oid = '0', 
                response_type = '0', 
                hidden = True, 
                is_global = True, 
                sasformat_name = '0'
            )
        else :
            return ODMcomplexTypeDefinitionCodeList(
        )

    def testODMcomplexTypeDefinitionCodeList(self):
        """Test ODMcomplexTypeDefinitionCodeList"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
