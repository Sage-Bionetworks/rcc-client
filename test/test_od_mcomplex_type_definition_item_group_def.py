# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import rcc
from rcc.models.od_mcomplex_type_definition_item_group_def import ODMcomplexTypeDefinitionItemGroupDef  # noqa: E501
from rcc.rest import ApiException

class TestODMcomplexTypeDefinitionItemGroupDef(unittest.TestCase):
    """ODMcomplexTypeDefinitionItemGroupDef unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ODMcomplexTypeDefinitionItemGroupDef
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = rcc.models.od_mcomplex_type_definition_item_group_def.ODMcomplexTypeDefinitionItemGroupDef()  # noqa: E501
        if include_optional :
            return ODMcomplexTypeDefinitionItemGroupDef(
                description = rcc.models.od_mcomplex_type_definition_description.ODMcomplexTypeDefinitionDescription(
                    translated_text = [
                        rcc.models.od_mcomplex_type_definition_translated_text.ODMcomplexTypeDefinitionTranslatedText(
                            value = '0', 
                            lang = '0', )
                        ], ), 
                item_ref = [
                    rcc.models.od_mcomplex_type_definition_item_ref.ODMcomplexTypeDefinitionItemRef(
                        item_oid = '0', 
                        key_sequence = 56, 
                        method_oid = '0', 
                        imputation_method_oid = '0', 
                        role = '0', 
                        role_code_list_oid = '0', 
                        order_number = 56, 
                        mandatory = 'YES', 
                        collection_exception_condition_oid = '0', )
                    ], 
                alias = [
                    rcc.models.od_mcomplex_type_definition_alias.ODMcomplexTypeDefinitionAlias(
                        context = '0', 
                        name = '0', )
                    ], 
                oid = '0', 
                name = '0', 
                repeating = 'YES', 
                is_reference_data = 'YES', 
                domain = '0', 
                origin = '0', 
                role = '0', 
                purpose = '0', 
                comment = '0', 
                item_group_definition = rcc.models.item_group_definition.ItemGroupDefinition(
                    item_group_row = [
                        rcc.models.item_group_row.ItemGroupRow(
                            label = '0', 
                            display_sequence = 56, )
                        ], 
                    item_group_col = [
                        rcc.models.item_group_col.ItemGroupCol(
                            label = '0', 
                            display_sequence = 56, )
                        ], 
                    group_status = '0', 
                    group_type = '0', 
                    section_oid = '0', 
                    name = '0', 
                    oid = '0', 
                    display_sequence = 56, 
                    group_branching_equation = '0', 
                    max_repeating_rows = 56, 
                    is_fixed_rows = True, 
                    is_dummy_flag = True, 
                    original_item_groups_oid = '0', ), 
                sasdataset_name = '0'
            )
        else :
            return ODMcomplexTypeDefinitionItemGroupDef(
                item_group_definition = rcc.models.item_group_definition.ItemGroupDefinition(
                    item_group_row = [
                        rcc.models.item_group_row.ItemGroupRow(
                            label = '0', 
                            display_sequence = 56, )
                        ], 
                    item_group_col = [
                        rcc.models.item_group_col.ItemGroupCol(
                            label = '0', 
                            display_sequence = 56, )
                        ], 
                    group_status = '0', 
                    group_type = '0', 
                    section_oid = '0', 
                    name = '0', 
                    oid = '0', 
                    display_sequence = 56, 
                    group_branching_equation = '0', 
                    max_repeating_rows = 56, 
                    is_fixed_rows = True, 
                    is_dummy_flag = True, 
                    original_item_groups_oid = '0', ),
        )

    def testODMcomplexTypeDefinitionItemGroupDef(self):
        """Test ODMcomplexTypeDefinitionItemGroupDef"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
