# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import rcc
from rcc.models.od_mcomplex_type_definition_user import ODMcomplexTypeDefinitionUser  # noqa: E501
from rcc.rest import ApiException

class TestODMcomplexTypeDefinitionUser(unittest.TestCase):
    """ODMcomplexTypeDefinitionUser unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ODMcomplexTypeDefinitionUser
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = rcc.models.od_mcomplex_type_definition_user.ODMcomplexTypeDefinitionUser()  # noqa: E501
        if include_optional :
            return ODMcomplexTypeDefinitionUser(
                login_name = rcc.models.od_mcomplex_type_definition_login_name.ODMcomplexTypeDefinitionLoginName(
                    value = '0', ), 
                display_name = rcc.models.od_mcomplex_type_definition_display_name.ODMcomplexTypeDefinitionDisplayName(
                    value = '0', ), 
                full_name = rcc.models.od_mcomplex_type_definition_full_name.ODMcomplexTypeDefinitionFullName(
                    value = '0', ), 
                first_name = rcc.models.od_mcomplex_type_definition_first_name.ODMcomplexTypeDefinitionFirstName(
                    value = '0', ), 
                last_name = rcc.models.od_mcomplex_type_definition_last_name.ODMcomplexTypeDefinitionLastName(
                    value = '0', ), 
                organization = rcc.models.od_mcomplex_type_definition_organization.ODMcomplexTypeDefinitionOrganization(
                    value = '0', ), 
                address = [
                    rcc.models.od_mcomplex_type_definition_address.ODMcomplexTypeDefinitionAddress(
                        street_name = [
                            rcc.models.od_mcomplex_type_definition_street_name.ODMcomplexTypeDefinitionStreetName(
                                value = '0', )
                            ], 
                        city = rcc.models.od_mcomplex_type_definition_city.ODMcomplexTypeDefinitionCity(
                            value = '0', ), 
                        state_prov = rcc.models.od_mcomplex_type_definition_state_prov.ODMcomplexTypeDefinitionStateProv(
                            value = '0', ), 
                        country = rcc.models.od_mcomplex_type_definition_country.ODMcomplexTypeDefinitionCountry(
                            value = '0', ), 
                        postal_code = rcc.models.od_mcomplex_type_definition_postal_code.ODMcomplexTypeDefinitionPostalCode(
                            value = '0', ), 
                        other_text = rcc.models.od_mcomplex_type_definition_other_text.ODMcomplexTypeDefinitionOtherText(
                            value = '0', ), )
                    ], 
                email = [
                    rcc.models.od_mcomplex_type_definition_email.ODMcomplexTypeDefinitionEmail(
                        value = '0', )
                    ], 
                picture = rcc.models.od_mcomplex_type_definition_picture.ODMcomplexTypeDefinitionPicture(
                    picture_file_name = '0', 
                    image_type = '0', ), 
                pager = rcc.models.od_mcomplex_type_definition_pager.ODMcomplexTypeDefinitionPager(
                    value = '0', ), 
                fax = [
                    rcc.models.od_mcomplex_type_definition_fax.ODMcomplexTypeDefinitionFax(
                        value = '0', )
                    ], 
                phone = [
                    rcc.models.od_mcomplex_type_definition_phone.ODMcomplexTypeDefinitionPhone(
                        value = '0', )
                    ], 
                location_ref = [
                    rcc.models.od_mcomplex_type_definition_location_ref.ODMcomplexTypeDefinitionLocationRef(
                        location_oid = '0', )
                    ], 
                certificate = [
                    rcc.models.od_mcomplex_type_definition_certificate.ODMcomplexTypeDefinitionCertificate(
                        value = '0', )
                    ], 
                oid = '0', 
                user_type = 'SPONSOR'
            )
        else :
            return ODMcomplexTypeDefinitionUser(
        )

    def testODMcomplexTypeDefinitionUser(self):
        """Test ODMcomplexTypeDefinitionUser"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
