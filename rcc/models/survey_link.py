# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class SurveyLink(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'subject_oid': 'str',
        'subject_id': 'str',
        'study_event_definition_oid': 'str',
        'event_name': 'str',
        'crf_oid': 'str',
        'crf_name': 'str',
        'crf_version_oid': 'str',
        'code': 'str',
        'failed_attempts': 'int',
        'locked_date': 'datetime',
        'preview_only': 'int',
        'public_survey': 'int',
        'site_oid': 'str',
        'recent': 'int'
    }

    attribute_map = {
        'subject_oid': 'subjectOID',
        'subject_id': 'subjectID',
        'study_event_definition_oid': 'studyEventDefinitionOID',
        'event_name': 'eventName',
        'crf_oid': 'crfOID',
        'crf_name': 'crfName',
        'crf_version_oid': 'crfVersionOID',
        'code': 'code',
        'failed_attempts': 'failedAttempts',
        'locked_date': 'lockedDate',
        'preview_only': 'previewOnly',
        'public_survey': 'publicSurvey',
        'site_oid': 'siteOID',
        'recent': 'recent'
    }

    def __init__(self, subject_oid=None, subject_id=None, study_event_definition_oid=None, event_name=None, crf_oid=None, crf_name=None, crf_version_oid=None, code=None, failed_attempts=None, locked_date=None, preview_only=None, public_survey=None, site_oid=None, recent=None, local_vars_configuration=None):  # noqa: E501
        """SurveyLink - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._subject_oid = None
        self._subject_id = None
        self._study_event_definition_oid = None
        self._event_name = None
        self._crf_oid = None
        self._crf_name = None
        self._crf_version_oid = None
        self._code = None
        self._failed_attempts = None
        self._locked_date = None
        self._preview_only = None
        self._public_survey = None
        self._site_oid = None
        self._recent = None
        self.discriminator = None

        if subject_oid is not None:
            self.subject_oid = subject_oid
        if subject_id is not None:
            self.subject_id = subject_id
        if study_event_definition_oid is not None:
            self.study_event_definition_oid = study_event_definition_oid
        if event_name is not None:
            self.event_name = event_name
        if crf_oid is not None:
            self.crf_oid = crf_oid
        if crf_name is not None:
            self.crf_name = crf_name
        if crf_version_oid is not None:
            self.crf_version_oid = crf_version_oid
        if code is not None:
            self.code = code
        if failed_attempts is not None:
            self.failed_attempts = failed_attempts
        if locked_date is not None:
            self.locked_date = locked_date
        if preview_only is not None:
            self.preview_only = preview_only
        if public_survey is not None:
            self.public_survey = public_survey
        if site_oid is not None:
            self.site_oid = site_oid
        if recent is not None:
            self.recent = recent

    @property
    def subject_oid(self):
        """Gets the subject_oid of this SurveyLink.  # noqa: E501


        :return: The subject_oid of this SurveyLink.  # noqa: E501
        :rtype: str
        """
        return self._subject_oid

    @subject_oid.setter
    def subject_oid(self, subject_oid):
        """Sets the subject_oid of this SurveyLink.


        :param subject_oid: The subject_oid of this SurveyLink.  # noqa: E501
        :type: str
        """

        self._subject_oid = subject_oid

    @property
    def subject_id(self):
        """Gets the subject_id of this SurveyLink.  # noqa: E501


        :return: The subject_id of this SurveyLink.  # noqa: E501
        :rtype: str
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this SurveyLink.


        :param subject_id: The subject_id of this SurveyLink.  # noqa: E501
        :type: str
        """

        self._subject_id = subject_id

    @property
    def study_event_definition_oid(self):
        """Gets the study_event_definition_oid of this SurveyLink.  # noqa: E501


        :return: The study_event_definition_oid of this SurveyLink.  # noqa: E501
        :rtype: str
        """
        return self._study_event_definition_oid

    @study_event_definition_oid.setter
    def study_event_definition_oid(self, study_event_definition_oid):
        """Sets the study_event_definition_oid of this SurveyLink.


        :param study_event_definition_oid: The study_event_definition_oid of this SurveyLink.  # noqa: E501
        :type: str
        """

        self._study_event_definition_oid = study_event_definition_oid

    @property
    def event_name(self):
        """Gets the event_name of this SurveyLink.  # noqa: E501


        :return: The event_name of this SurveyLink.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this SurveyLink.


        :param event_name: The event_name of this SurveyLink.  # noqa: E501
        :type: str
        """

        self._event_name = event_name

    @property
    def crf_oid(self):
        """Gets the crf_oid of this SurveyLink.  # noqa: E501


        :return: The crf_oid of this SurveyLink.  # noqa: E501
        :rtype: str
        """
        return self._crf_oid

    @crf_oid.setter
    def crf_oid(self, crf_oid):
        """Sets the crf_oid of this SurveyLink.


        :param crf_oid: The crf_oid of this SurveyLink.  # noqa: E501
        :type: str
        """

        self._crf_oid = crf_oid

    @property
    def crf_name(self):
        """Gets the crf_name of this SurveyLink.  # noqa: E501


        :return: The crf_name of this SurveyLink.  # noqa: E501
        :rtype: str
        """
        return self._crf_name

    @crf_name.setter
    def crf_name(self, crf_name):
        """Sets the crf_name of this SurveyLink.


        :param crf_name: The crf_name of this SurveyLink.  # noqa: E501
        :type: str
        """

        self._crf_name = crf_name

    @property
    def crf_version_oid(self):
        """Gets the crf_version_oid of this SurveyLink.  # noqa: E501


        :return: The crf_version_oid of this SurveyLink.  # noqa: E501
        :rtype: str
        """
        return self._crf_version_oid

    @crf_version_oid.setter
    def crf_version_oid(self, crf_version_oid):
        """Sets the crf_version_oid of this SurveyLink.


        :param crf_version_oid: The crf_version_oid of this SurveyLink.  # noqa: E501
        :type: str
        """

        self._crf_version_oid = crf_version_oid

    @property
    def code(self):
        """Gets the code of this SurveyLink.  # noqa: E501


        :return: The code of this SurveyLink.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this SurveyLink.


        :param code: The code of this SurveyLink.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def failed_attempts(self):
        """Gets the failed_attempts of this SurveyLink.  # noqa: E501


        :return: The failed_attempts of this SurveyLink.  # noqa: E501
        :rtype: int
        """
        return self._failed_attempts

    @failed_attempts.setter
    def failed_attempts(self, failed_attempts):
        """Sets the failed_attempts of this SurveyLink.


        :param failed_attempts: The failed_attempts of this SurveyLink.  # noqa: E501
        :type: int
        """

        self._failed_attempts = failed_attempts

    @property
    def locked_date(self):
        """Gets the locked_date of this SurveyLink.  # noqa: E501


        :return: The locked_date of this SurveyLink.  # noqa: E501
        :rtype: datetime
        """
        return self._locked_date

    @locked_date.setter
    def locked_date(self, locked_date):
        """Sets the locked_date of this SurveyLink.


        :param locked_date: The locked_date of this SurveyLink.  # noqa: E501
        :type: datetime
        """

        self._locked_date = locked_date

    @property
    def preview_only(self):
        """Gets the preview_only of this SurveyLink.  # noqa: E501


        :return: The preview_only of this SurveyLink.  # noqa: E501
        :rtype: int
        """
        return self._preview_only

    @preview_only.setter
    def preview_only(self, preview_only):
        """Sets the preview_only of this SurveyLink.


        :param preview_only: The preview_only of this SurveyLink.  # noqa: E501
        :type: int
        """

        self._preview_only = preview_only

    @property
    def public_survey(self):
        """Gets the public_survey of this SurveyLink.  # noqa: E501


        :return: The public_survey of this SurveyLink.  # noqa: E501
        :rtype: int
        """
        return self._public_survey

    @public_survey.setter
    def public_survey(self, public_survey):
        """Sets the public_survey of this SurveyLink.


        :param public_survey: The public_survey of this SurveyLink.  # noqa: E501
        :type: int
        """

        self._public_survey = public_survey

    @property
    def site_oid(self):
        """Gets the site_oid of this SurveyLink.  # noqa: E501


        :return: The site_oid of this SurveyLink.  # noqa: E501
        :rtype: str
        """
        return self._site_oid

    @site_oid.setter
    def site_oid(self, site_oid):
        """Sets the site_oid of this SurveyLink.


        :param site_oid: The site_oid of this SurveyLink.  # noqa: E501
        :type: str
        """

        self._site_oid = site_oid

    @property
    def recent(self):
        """Gets the recent of this SurveyLink.  # noqa: E501


        :return: The recent of this SurveyLink.  # noqa: E501
        :rtype: int
        """
        return self._recent

    @recent.setter
    def recent(self, recent):
        """Sets the recent of this SurveyLink.


        :param recent: The recent of this SurveyLink.  # noqa: E501
        :type: int
        """

        self._recent = recent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SurveyLink):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SurveyLink):
            return True

        return self.to_dict() != other.to_dict()
