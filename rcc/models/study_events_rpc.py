# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class StudyEventsRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'subject_id': 'int',
        'event_definition_id': 'int',
        'location': 'str',
        'event_occurence': 'int',
        'date_start': 'int',
        'date_end': 'int',
        'start_time_flag': 'bool',
        'end_time_flag': 'bool',
        'reference_visit_id': 'int',
        'status_id': 'int',
        'status_code': 'str'
    }

    attribute_map = {
        'id': 'id',
        'subject_id': 'subjectId',
        'event_definition_id': 'eventDefinitionId',
        'location': 'location',
        'event_occurence': 'eventOccurence',
        'date_start': 'dateStart',
        'date_end': 'dateEnd',
        'start_time_flag': 'startTimeFlag',
        'end_time_flag': 'endTimeFlag',
        'reference_visit_id': 'referenceVisitId',
        'status_id': 'statusId',
        'status_code': 'statusCode'
    }

    def __init__(self, id=None, subject_id=None, event_definition_id=None, location=None, event_occurence=None, date_start=None, date_end=None, start_time_flag=None, end_time_flag=None, reference_visit_id=None, status_id=None, status_code=None, local_vars_configuration=None):  # noqa: E501
        """StudyEventsRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._subject_id = None
        self._event_definition_id = None
        self._location = None
        self._event_occurence = None
        self._date_start = None
        self._date_end = None
        self._start_time_flag = None
        self._end_time_flag = None
        self._reference_visit_id = None
        self._status_id = None
        self._status_code = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if subject_id is not None:
            self.subject_id = subject_id
        if event_definition_id is not None:
            self.event_definition_id = event_definition_id
        if location is not None:
            self.location = location
        if event_occurence is not None:
            self.event_occurence = event_occurence
        if date_start is not None:
            self.date_start = date_start
        if date_end is not None:
            self.date_end = date_end
        if start_time_flag is not None:
            self.start_time_flag = start_time_flag
        if end_time_flag is not None:
            self.end_time_flag = end_time_flag
        if reference_visit_id is not None:
            self.reference_visit_id = reference_visit_id
        if status_id is not None:
            self.status_id = status_id
        if status_code is not None:
            self.status_code = status_code

    @property
    def id(self):
        """Gets the id of this StudyEventsRpc.  # noqa: E501


        :return: The id of this StudyEventsRpc.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StudyEventsRpc.


        :param id: The id of this StudyEventsRpc.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def subject_id(self):
        """Gets the subject_id of this StudyEventsRpc.  # noqa: E501


        :return: The subject_id of this StudyEventsRpc.  # noqa: E501
        :rtype: int
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this StudyEventsRpc.


        :param subject_id: The subject_id of this StudyEventsRpc.  # noqa: E501
        :type: int
        """

        self._subject_id = subject_id

    @property
    def event_definition_id(self):
        """Gets the event_definition_id of this StudyEventsRpc.  # noqa: E501


        :return: The event_definition_id of this StudyEventsRpc.  # noqa: E501
        :rtype: int
        """
        return self._event_definition_id

    @event_definition_id.setter
    def event_definition_id(self, event_definition_id):
        """Sets the event_definition_id of this StudyEventsRpc.


        :param event_definition_id: The event_definition_id of this StudyEventsRpc.  # noqa: E501
        :type: int
        """

        self._event_definition_id = event_definition_id

    @property
    def location(self):
        """Gets the location of this StudyEventsRpc.  # noqa: E501


        :return: The location of this StudyEventsRpc.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this StudyEventsRpc.


        :param location: The location of this StudyEventsRpc.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def event_occurence(self):
        """Gets the event_occurence of this StudyEventsRpc.  # noqa: E501


        :return: The event_occurence of this StudyEventsRpc.  # noqa: E501
        :rtype: int
        """
        return self._event_occurence

    @event_occurence.setter
    def event_occurence(self, event_occurence):
        """Sets the event_occurence of this StudyEventsRpc.


        :param event_occurence: The event_occurence of this StudyEventsRpc.  # noqa: E501
        :type: int
        """

        self._event_occurence = event_occurence

    @property
    def date_start(self):
        """Gets the date_start of this StudyEventsRpc.  # noqa: E501


        :return: The date_start of this StudyEventsRpc.  # noqa: E501
        :rtype: int
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this StudyEventsRpc.


        :param date_start: The date_start of this StudyEventsRpc.  # noqa: E501
        :type: int
        """

        self._date_start = date_start

    @property
    def date_end(self):
        """Gets the date_end of this StudyEventsRpc.  # noqa: E501


        :return: The date_end of this StudyEventsRpc.  # noqa: E501
        :rtype: int
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this StudyEventsRpc.


        :param date_end: The date_end of this StudyEventsRpc.  # noqa: E501
        :type: int
        """

        self._date_end = date_end

    @property
    def start_time_flag(self):
        """Gets the start_time_flag of this StudyEventsRpc.  # noqa: E501


        :return: The start_time_flag of this StudyEventsRpc.  # noqa: E501
        :rtype: bool
        """
        return self._start_time_flag

    @start_time_flag.setter
    def start_time_flag(self, start_time_flag):
        """Sets the start_time_flag of this StudyEventsRpc.


        :param start_time_flag: The start_time_flag of this StudyEventsRpc.  # noqa: E501
        :type: bool
        """

        self._start_time_flag = start_time_flag

    @property
    def end_time_flag(self):
        """Gets the end_time_flag of this StudyEventsRpc.  # noqa: E501


        :return: The end_time_flag of this StudyEventsRpc.  # noqa: E501
        :rtype: bool
        """
        return self._end_time_flag

    @end_time_flag.setter
    def end_time_flag(self, end_time_flag):
        """Sets the end_time_flag of this StudyEventsRpc.


        :param end_time_flag: The end_time_flag of this StudyEventsRpc.  # noqa: E501
        :type: bool
        """

        self._end_time_flag = end_time_flag

    @property
    def reference_visit_id(self):
        """Gets the reference_visit_id of this StudyEventsRpc.  # noqa: E501


        :return: The reference_visit_id of this StudyEventsRpc.  # noqa: E501
        :rtype: int
        """
        return self._reference_visit_id

    @reference_visit_id.setter
    def reference_visit_id(self, reference_visit_id):
        """Sets the reference_visit_id of this StudyEventsRpc.


        :param reference_visit_id: The reference_visit_id of this StudyEventsRpc.  # noqa: E501
        :type: int
        """

        self._reference_visit_id = reference_visit_id

    @property
    def status_id(self):
        """Gets the status_id of this StudyEventsRpc.  # noqa: E501


        :return: The status_id of this StudyEventsRpc.  # noqa: E501
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this StudyEventsRpc.


        :param status_id: The status_id of this StudyEventsRpc.  # noqa: E501
        :type: int
        """

        self._status_id = status_id

    @property
    def status_code(self):
        """Gets the status_code of this StudyEventsRpc.  # noqa: E501


        :return: The status_code of this StudyEventsRpc.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this StudyEventsRpc.


        :param status_code: The status_code of this StudyEventsRpc.  # noqa: E501
        :type: str
        """

        self._status_code = status_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudyEventsRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StudyEventsRpc):
            return True

        return self.to_dict() != other.to_dict()
