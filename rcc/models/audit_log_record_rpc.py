# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class AuditLogRecordRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'study_id': 'int',
        'study_site_id': 'int',
        'study_site_uid': 'str',
        'subject_id': 'int',
        'subject_unique_identifier': 'str',
        'audit_date': 'int',
        'audit_ip': 'str',
        'audit_user_id': 'int',
        'entity_id': 'int',
        'entity_name': 'str',
        'reason_for_change': 'str',
        'event_type_id': 'int',
        'event_type': 'str',
        'old_value': 'str',
        'new_value': 'str',
        'value_index': 'int',
        'event_crf_id': 'int',
        'event_crf_version_id': 'int',
        'study_event_id': 'int',
        'event_id': 'int',
        'event_name': 'str',
        'user_id': 'int',
        'crf_version_id': 'int',
        'crf_version_name': 'str',
        'crf_id': 'int',
        'crf_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'study_id': 'studyId',
        'study_site_id': 'studySiteId',
        'study_site_uid': 'studySiteUid',
        'subject_id': 'subjectId',
        'subject_unique_identifier': 'subjectUniqueIdentifier',
        'audit_date': 'auditDate',
        'audit_ip': 'auditIp',
        'audit_user_id': 'auditUserId',
        'entity_id': 'entityId',
        'entity_name': 'entityName',
        'reason_for_change': 'reasonForChange',
        'event_type_id': 'eventTypeId',
        'event_type': 'eventType',
        'old_value': 'oldValue',
        'new_value': 'newValue',
        'value_index': 'valueIndex',
        'event_crf_id': 'eventCrfId',
        'event_crf_version_id': 'eventCrfVersionId',
        'study_event_id': 'studyEventId',
        'event_id': 'eventId',
        'event_name': 'eventName',
        'user_id': 'userId',
        'crf_version_id': 'crfVersionId',
        'crf_version_name': 'crfVersionName',
        'crf_id': 'crfId',
        'crf_name': 'crfName'
    }

    def __init__(self, id=None, study_id=None, study_site_id=None, study_site_uid=None, subject_id=None, subject_unique_identifier=None, audit_date=None, audit_ip=None, audit_user_id=None, entity_id=None, entity_name=None, reason_for_change=None, event_type_id=None, event_type=None, old_value=None, new_value=None, value_index=None, event_crf_id=None, event_crf_version_id=None, study_event_id=None, event_id=None, event_name=None, user_id=None, crf_version_id=None, crf_version_name=None, crf_id=None, crf_name=None, local_vars_configuration=None):  # noqa: E501
        """AuditLogRecordRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._study_id = None
        self._study_site_id = None
        self._study_site_uid = None
        self._subject_id = None
        self._subject_unique_identifier = None
        self._audit_date = None
        self._audit_ip = None
        self._audit_user_id = None
        self._entity_id = None
        self._entity_name = None
        self._reason_for_change = None
        self._event_type_id = None
        self._event_type = None
        self._old_value = None
        self._new_value = None
        self._value_index = None
        self._event_crf_id = None
        self._event_crf_version_id = None
        self._study_event_id = None
        self._event_id = None
        self._event_name = None
        self._user_id = None
        self._crf_version_id = None
        self._crf_version_name = None
        self._crf_id = None
        self._crf_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if study_id is not None:
            self.study_id = study_id
        if study_site_id is not None:
            self.study_site_id = study_site_id
        if study_site_uid is not None:
            self.study_site_uid = study_site_uid
        if subject_id is not None:
            self.subject_id = subject_id
        if subject_unique_identifier is not None:
            self.subject_unique_identifier = subject_unique_identifier
        if audit_date is not None:
            self.audit_date = audit_date
        if audit_ip is not None:
            self.audit_ip = audit_ip
        if audit_user_id is not None:
            self.audit_user_id = audit_user_id
        if entity_id is not None:
            self.entity_id = entity_id
        if entity_name is not None:
            self.entity_name = entity_name
        if reason_for_change is not None:
            self.reason_for_change = reason_for_change
        if event_type_id is not None:
            self.event_type_id = event_type_id
        if event_type is not None:
            self.event_type = event_type
        if old_value is not None:
            self.old_value = old_value
        if new_value is not None:
            self.new_value = new_value
        if value_index is not None:
            self.value_index = value_index
        if event_crf_id is not None:
            self.event_crf_id = event_crf_id
        if event_crf_version_id is not None:
            self.event_crf_version_id = event_crf_version_id
        if study_event_id is not None:
            self.study_event_id = study_event_id
        if event_id is not None:
            self.event_id = event_id
        if event_name is not None:
            self.event_name = event_name
        if user_id is not None:
            self.user_id = user_id
        if crf_version_id is not None:
            self.crf_version_id = crf_version_id
        if crf_version_name is not None:
            self.crf_version_name = crf_version_name
        if crf_id is not None:
            self.crf_id = crf_id
        if crf_name is not None:
            self.crf_name = crf_name

    @property
    def id(self):
        """Gets the id of this AuditLogRecordRpc.  # noqa: E501


        :return: The id of this AuditLogRecordRpc.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditLogRecordRpc.


        :param id: The id of this AuditLogRecordRpc.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def study_id(self):
        """Gets the study_id of this AuditLogRecordRpc.  # noqa: E501


        :return: The study_id of this AuditLogRecordRpc.  # noqa: E501
        :rtype: int
        """
        return self._study_id

    @study_id.setter
    def study_id(self, study_id):
        """Sets the study_id of this AuditLogRecordRpc.


        :param study_id: The study_id of this AuditLogRecordRpc.  # noqa: E501
        :type: int
        """

        self._study_id = study_id

    @property
    def study_site_id(self):
        """Gets the study_site_id of this AuditLogRecordRpc.  # noqa: E501


        :return: The study_site_id of this AuditLogRecordRpc.  # noqa: E501
        :rtype: int
        """
        return self._study_site_id

    @study_site_id.setter
    def study_site_id(self, study_site_id):
        """Sets the study_site_id of this AuditLogRecordRpc.


        :param study_site_id: The study_site_id of this AuditLogRecordRpc.  # noqa: E501
        :type: int
        """

        self._study_site_id = study_site_id

    @property
    def study_site_uid(self):
        """Gets the study_site_uid of this AuditLogRecordRpc.  # noqa: E501


        :return: The study_site_uid of this AuditLogRecordRpc.  # noqa: E501
        :rtype: str
        """
        return self._study_site_uid

    @study_site_uid.setter
    def study_site_uid(self, study_site_uid):
        """Sets the study_site_uid of this AuditLogRecordRpc.


        :param study_site_uid: The study_site_uid of this AuditLogRecordRpc.  # noqa: E501
        :type: str
        """

        self._study_site_uid = study_site_uid

    @property
    def subject_id(self):
        """Gets the subject_id of this AuditLogRecordRpc.  # noqa: E501


        :return: The subject_id of this AuditLogRecordRpc.  # noqa: E501
        :rtype: int
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this AuditLogRecordRpc.


        :param subject_id: The subject_id of this AuditLogRecordRpc.  # noqa: E501
        :type: int
        """

        self._subject_id = subject_id

    @property
    def subject_unique_identifier(self):
        """Gets the subject_unique_identifier of this AuditLogRecordRpc.  # noqa: E501


        :return: The subject_unique_identifier of this AuditLogRecordRpc.  # noqa: E501
        :rtype: str
        """
        return self._subject_unique_identifier

    @subject_unique_identifier.setter
    def subject_unique_identifier(self, subject_unique_identifier):
        """Sets the subject_unique_identifier of this AuditLogRecordRpc.


        :param subject_unique_identifier: The subject_unique_identifier of this AuditLogRecordRpc.  # noqa: E501
        :type: str
        """

        self._subject_unique_identifier = subject_unique_identifier

    @property
    def audit_date(self):
        """Gets the audit_date of this AuditLogRecordRpc.  # noqa: E501


        :return: The audit_date of this AuditLogRecordRpc.  # noqa: E501
        :rtype: int
        """
        return self._audit_date

    @audit_date.setter
    def audit_date(self, audit_date):
        """Sets the audit_date of this AuditLogRecordRpc.


        :param audit_date: The audit_date of this AuditLogRecordRpc.  # noqa: E501
        :type: int
        """

        self._audit_date = audit_date

    @property
    def audit_ip(self):
        """Gets the audit_ip of this AuditLogRecordRpc.  # noqa: E501


        :return: The audit_ip of this AuditLogRecordRpc.  # noqa: E501
        :rtype: str
        """
        return self._audit_ip

    @audit_ip.setter
    def audit_ip(self, audit_ip):
        """Sets the audit_ip of this AuditLogRecordRpc.


        :param audit_ip: The audit_ip of this AuditLogRecordRpc.  # noqa: E501
        :type: str
        """

        self._audit_ip = audit_ip

    @property
    def audit_user_id(self):
        """Gets the audit_user_id of this AuditLogRecordRpc.  # noqa: E501


        :return: The audit_user_id of this AuditLogRecordRpc.  # noqa: E501
        :rtype: int
        """
        return self._audit_user_id

    @audit_user_id.setter
    def audit_user_id(self, audit_user_id):
        """Sets the audit_user_id of this AuditLogRecordRpc.


        :param audit_user_id: The audit_user_id of this AuditLogRecordRpc.  # noqa: E501
        :type: int
        """

        self._audit_user_id = audit_user_id

    @property
    def entity_id(self):
        """Gets the entity_id of this AuditLogRecordRpc.  # noqa: E501


        :return: The entity_id of this AuditLogRecordRpc.  # noqa: E501
        :rtype: int
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this AuditLogRecordRpc.


        :param entity_id: The entity_id of this AuditLogRecordRpc.  # noqa: E501
        :type: int
        """

        self._entity_id = entity_id

    @property
    def entity_name(self):
        """Gets the entity_name of this AuditLogRecordRpc.  # noqa: E501


        :return: The entity_name of this AuditLogRecordRpc.  # noqa: E501
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this AuditLogRecordRpc.


        :param entity_name: The entity_name of this AuditLogRecordRpc.  # noqa: E501
        :type: str
        """

        self._entity_name = entity_name

    @property
    def reason_for_change(self):
        """Gets the reason_for_change of this AuditLogRecordRpc.  # noqa: E501


        :return: The reason_for_change of this AuditLogRecordRpc.  # noqa: E501
        :rtype: str
        """
        return self._reason_for_change

    @reason_for_change.setter
    def reason_for_change(self, reason_for_change):
        """Sets the reason_for_change of this AuditLogRecordRpc.


        :param reason_for_change: The reason_for_change of this AuditLogRecordRpc.  # noqa: E501
        :type: str
        """

        self._reason_for_change = reason_for_change

    @property
    def event_type_id(self):
        """Gets the event_type_id of this AuditLogRecordRpc.  # noqa: E501


        :return: The event_type_id of this AuditLogRecordRpc.  # noqa: E501
        :rtype: int
        """
        return self._event_type_id

    @event_type_id.setter
    def event_type_id(self, event_type_id):
        """Sets the event_type_id of this AuditLogRecordRpc.


        :param event_type_id: The event_type_id of this AuditLogRecordRpc.  # noqa: E501
        :type: int
        """

        self._event_type_id = event_type_id

    @property
    def event_type(self):
        """Gets the event_type of this AuditLogRecordRpc.  # noqa: E501


        :return: The event_type of this AuditLogRecordRpc.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this AuditLogRecordRpc.


        :param event_type: The event_type of this AuditLogRecordRpc.  # noqa: E501
        :type: str
        """

        self._event_type = event_type

    @property
    def old_value(self):
        """Gets the old_value of this AuditLogRecordRpc.  # noqa: E501


        :return: The old_value of this AuditLogRecordRpc.  # noqa: E501
        :rtype: str
        """
        return self._old_value

    @old_value.setter
    def old_value(self, old_value):
        """Sets the old_value of this AuditLogRecordRpc.


        :param old_value: The old_value of this AuditLogRecordRpc.  # noqa: E501
        :type: str
        """

        self._old_value = old_value

    @property
    def new_value(self):
        """Gets the new_value of this AuditLogRecordRpc.  # noqa: E501


        :return: The new_value of this AuditLogRecordRpc.  # noqa: E501
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this AuditLogRecordRpc.


        :param new_value: The new_value of this AuditLogRecordRpc.  # noqa: E501
        :type: str
        """

        self._new_value = new_value

    @property
    def value_index(self):
        """Gets the value_index of this AuditLogRecordRpc.  # noqa: E501


        :return: The value_index of this AuditLogRecordRpc.  # noqa: E501
        :rtype: int
        """
        return self._value_index

    @value_index.setter
    def value_index(self, value_index):
        """Sets the value_index of this AuditLogRecordRpc.


        :param value_index: The value_index of this AuditLogRecordRpc.  # noqa: E501
        :type: int
        """

        self._value_index = value_index

    @property
    def event_crf_id(self):
        """Gets the event_crf_id of this AuditLogRecordRpc.  # noqa: E501


        :return: The event_crf_id of this AuditLogRecordRpc.  # noqa: E501
        :rtype: int
        """
        return self._event_crf_id

    @event_crf_id.setter
    def event_crf_id(self, event_crf_id):
        """Sets the event_crf_id of this AuditLogRecordRpc.


        :param event_crf_id: The event_crf_id of this AuditLogRecordRpc.  # noqa: E501
        :type: int
        """

        self._event_crf_id = event_crf_id

    @property
    def event_crf_version_id(self):
        """Gets the event_crf_version_id of this AuditLogRecordRpc.  # noqa: E501


        :return: The event_crf_version_id of this AuditLogRecordRpc.  # noqa: E501
        :rtype: int
        """
        return self._event_crf_version_id

    @event_crf_version_id.setter
    def event_crf_version_id(self, event_crf_version_id):
        """Sets the event_crf_version_id of this AuditLogRecordRpc.


        :param event_crf_version_id: The event_crf_version_id of this AuditLogRecordRpc.  # noqa: E501
        :type: int
        """

        self._event_crf_version_id = event_crf_version_id

    @property
    def study_event_id(self):
        """Gets the study_event_id of this AuditLogRecordRpc.  # noqa: E501


        :return: The study_event_id of this AuditLogRecordRpc.  # noqa: E501
        :rtype: int
        """
        return self._study_event_id

    @study_event_id.setter
    def study_event_id(self, study_event_id):
        """Sets the study_event_id of this AuditLogRecordRpc.


        :param study_event_id: The study_event_id of this AuditLogRecordRpc.  # noqa: E501
        :type: int
        """

        self._study_event_id = study_event_id

    @property
    def event_id(self):
        """Gets the event_id of this AuditLogRecordRpc.  # noqa: E501


        :return: The event_id of this AuditLogRecordRpc.  # noqa: E501
        :rtype: int
        """
        return self._event_id

    @event_id.setter
    def event_id(self, event_id):
        """Sets the event_id of this AuditLogRecordRpc.


        :param event_id: The event_id of this AuditLogRecordRpc.  # noqa: E501
        :type: int
        """

        self._event_id = event_id

    @property
    def event_name(self):
        """Gets the event_name of this AuditLogRecordRpc.  # noqa: E501


        :return: The event_name of this AuditLogRecordRpc.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this AuditLogRecordRpc.


        :param event_name: The event_name of this AuditLogRecordRpc.  # noqa: E501
        :type: str
        """

        self._event_name = event_name

    @property
    def user_id(self):
        """Gets the user_id of this AuditLogRecordRpc.  # noqa: E501


        :return: The user_id of this AuditLogRecordRpc.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuditLogRecordRpc.


        :param user_id: The user_id of this AuditLogRecordRpc.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def crf_version_id(self):
        """Gets the crf_version_id of this AuditLogRecordRpc.  # noqa: E501


        :return: The crf_version_id of this AuditLogRecordRpc.  # noqa: E501
        :rtype: int
        """
        return self._crf_version_id

    @crf_version_id.setter
    def crf_version_id(self, crf_version_id):
        """Sets the crf_version_id of this AuditLogRecordRpc.


        :param crf_version_id: The crf_version_id of this AuditLogRecordRpc.  # noqa: E501
        :type: int
        """

        self._crf_version_id = crf_version_id

    @property
    def crf_version_name(self):
        """Gets the crf_version_name of this AuditLogRecordRpc.  # noqa: E501


        :return: The crf_version_name of this AuditLogRecordRpc.  # noqa: E501
        :rtype: str
        """
        return self._crf_version_name

    @crf_version_name.setter
    def crf_version_name(self, crf_version_name):
        """Sets the crf_version_name of this AuditLogRecordRpc.


        :param crf_version_name: The crf_version_name of this AuditLogRecordRpc.  # noqa: E501
        :type: str
        """

        self._crf_version_name = crf_version_name

    @property
    def crf_id(self):
        """Gets the crf_id of this AuditLogRecordRpc.  # noqa: E501


        :return: The crf_id of this AuditLogRecordRpc.  # noqa: E501
        :rtype: int
        """
        return self._crf_id

    @crf_id.setter
    def crf_id(self, crf_id):
        """Sets the crf_id of this AuditLogRecordRpc.


        :param crf_id: The crf_id of this AuditLogRecordRpc.  # noqa: E501
        :type: int
        """

        self._crf_id = crf_id

    @property
    def crf_name(self):
        """Gets the crf_name of this AuditLogRecordRpc.  # noqa: E501


        :return: The crf_name of this AuditLogRecordRpc.  # noqa: E501
        :rtype: str
        """
        return self._crf_name

    @crf_name.setter
    def crf_name(self, crf_name):
        """Sets the crf_name of this AuditLogRecordRpc.


        :param crf_name: The crf_name of this AuditLogRecordRpc.  # noqa: E501
        :type: str
        """

        self._crf_name = crf_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditLogRecordRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AuditLogRecordRpc):
            return True

        return self.to_dict() != other.to_dict()
