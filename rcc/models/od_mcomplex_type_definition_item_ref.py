# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ODMcomplexTypeDefinitionItemRef(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'item_oid': 'str',
        'key_sequence': 'int',
        'method_oid': 'str',
        'imputation_method_oid': 'str',
        'role': 'str',
        'role_code_list_oid': 'str',
        'order_number': 'int',
        'mandatory': 'str',
        'collection_exception_condition_oid': 'str'
    }

    attribute_map = {
        'item_oid': 'itemOID',
        'key_sequence': 'keySequence',
        'method_oid': 'methodOID',
        'imputation_method_oid': 'imputationMethodOID',
        'role': 'role',
        'role_code_list_oid': 'roleCodeListOID',
        'order_number': 'orderNumber',
        'mandatory': 'mandatory',
        'collection_exception_condition_oid': 'collectionExceptionConditionOID'
    }

    def __init__(self, item_oid=None, key_sequence=None, method_oid=None, imputation_method_oid=None, role=None, role_code_list_oid=None, order_number=None, mandatory=None, collection_exception_condition_oid=None, local_vars_configuration=None):  # noqa: E501
        """ODMcomplexTypeDefinitionItemRef - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._item_oid = None
        self._key_sequence = None
        self._method_oid = None
        self._imputation_method_oid = None
        self._role = None
        self._role_code_list_oid = None
        self._order_number = None
        self._mandatory = None
        self._collection_exception_condition_oid = None
        self.discriminator = None

        if item_oid is not None:
            self.item_oid = item_oid
        if key_sequence is not None:
            self.key_sequence = key_sequence
        if method_oid is not None:
            self.method_oid = method_oid
        if imputation_method_oid is not None:
            self.imputation_method_oid = imputation_method_oid
        if role is not None:
            self.role = role
        if role_code_list_oid is not None:
            self.role_code_list_oid = role_code_list_oid
        if order_number is not None:
            self.order_number = order_number
        if mandatory is not None:
            self.mandatory = mandatory
        if collection_exception_condition_oid is not None:
            self.collection_exception_condition_oid = collection_exception_condition_oid

    @property
    def item_oid(self):
        """Gets the item_oid of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501


        :return: The item_oid of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501
        :rtype: str
        """
        return self._item_oid

    @item_oid.setter
    def item_oid(self, item_oid):
        """Sets the item_oid of this ODMcomplexTypeDefinitionItemRef.


        :param item_oid: The item_oid of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501
        :type: str
        """

        self._item_oid = item_oid

    @property
    def key_sequence(self):
        """Gets the key_sequence of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501


        :return: The key_sequence of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501
        :rtype: int
        """
        return self._key_sequence

    @key_sequence.setter
    def key_sequence(self, key_sequence):
        """Sets the key_sequence of this ODMcomplexTypeDefinitionItemRef.


        :param key_sequence: The key_sequence of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501
        :type: int
        """

        self._key_sequence = key_sequence

    @property
    def method_oid(self):
        """Gets the method_oid of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501


        :return: The method_oid of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501
        :rtype: str
        """
        return self._method_oid

    @method_oid.setter
    def method_oid(self, method_oid):
        """Sets the method_oid of this ODMcomplexTypeDefinitionItemRef.


        :param method_oid: The method_oid of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501
        :type: str
        """

        self._method_oid = method_oid

    @property
    def imputation_method_oid(self):
        """Gets the imputation_method_oid of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501


        :return: The imputation_method_oid of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501
        :rtype: str
        """
        return self._imputation_method_oid

    @imputation_method_oid.setter
    def imputation_method_oid(self, imputation_method_oid):
        """Sets the imputation_method_oid of this ODMcomplexTypeDefinitionItemRef.


        :param imputation_method_oid: The imputation_method_oid of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501
        :type: str
        """

        self._imputation_method_oid = imputation_method_oid

    @property
    def role(self):
        """Gets the role of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501


        :return: The role of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ODMcomplexTypeDefinitionItemRef.


        :param role: The role of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def role_code_list_oid(self):
        """Gets the role_code_list_oid of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501


        :return: The role_code_list_oid of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501
        :rtype: str
        """
        return self._role_code_list_oid

    @role_code_list_oid.setter
    def role_code_list_oid(self, role_code_list_oid):
        """Sets the role_code_list_oid of this ODMcomplexTypeDefinitionItemRef.


        :param role_code_list_oid: The role_code_list_oid of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501
        :type: str
        """

        self._role_code_list_oid = role_code_list_oid

    @property
    def order_number(self):
        """Gets the order_number of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501


        :return: The order_number of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501
        :rtype: int
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this ODMcomplexTypeDefinitionItemRef.


        :param order_number: The order_number of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501
        :type: int
        """

        self._order_number = order_number

    @property
    def mandatory(self):
        """Gets the mandatory of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501


        :return: The mandatory of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501
        :rtype: str
        """
        return self._mandatory

    @mandatory.setter
    def mandatory(self, mandatory):
        """Sets the mandatory of this ODMcomplexTypeDefinitionItemRef.


        :param mandatory: The mandatory of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and mandatory not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `mandatory` ({0}), must be one of {1}"  # noqa: E501
                .format(mandatory, allowed_values)
            )

        self._mandatory = mandatory

    @property
    def collection_exception_condition_oid(self):
        """Gets the collection_exception_condition_oid of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501


        :return: The collection_exception_condition_oid of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501
        :rtype: str
        """
        return self._collection_exception_condition_oid

    @collection_exception_condition_oid.setter
    def collection_exception_condition_oid(self, collection_exception_condition_oid):
        """Sets the collection_exception_condition_oid of this ODMcomplexTypeDefinitionItemRef.


        :param collection_exception_condition_oid: The collection_exception_condition_oid of this ODMcomplexTypeDefinitionItemRef.  # noqa: E501
        :type: str
        """

        self._collection_exception_condition_oid = collection_exception_condition_oid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionItemRef):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionItemRef):
            return True

        return self.to_dict() != other.to_dict()
