# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class RandomizationConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'block_size': 'int',
        'mimimum_block_size': 'int',
        'maximum_block_size': 'int',
        'initial_balls': 'int',
        'success': 'int',
        'failure': 'int',
        'description': 'str',
        'first_option': 'str',
        'second_option': 'str',
        'replaced_balls': 'int',
        'data_oid': 'str',
        'stratify_study_site': 'bool',
        'status': 'str',
        'algorythm_type': 'str',
        'block_randomization_type': 'str',
        'block_randomization_constraint': 'str',
        'block_history': 'str',
        'block_history_printout': 'str',
        'mti': 'int',
        'probability': 'float',
        'dtype': 'str',
        'pvalue': 'float',
        'dname': 'str'
    }

    attribute_map = {
        'block_size': 'blockSize',
        'mimimum_block_size': 'mimimumBlockSize',
        'maximum_block_size': 'maximumBlockSize',
        'initial_balls': 'initialBalls',
        'success': 'success',
        'failure': 'failure',
        'description': 'description',
        'first_option': 'firstOption',
        'second_option': 'secondOption',
        'replaced_balls': 'replacedBalls',
        'data_oid': 'dataOID',
        'stratify_study_site': 'stratifyStudySite',
        'status': 'status',
        'algorythm_type': 'algorythmType',
        'block_randomization_type': 'blockRandomizationType',
        'block_randomization_constraint': 'blockRandomizationConstraint',
        'block_history': 'blockHistory',
        'block_history_printout': 'blockHistoryPrintout',
        'mti': 'mti',
        'probability': 'probability',
        'dtype': 'dtype',
        'pvalue': 'pvalue',
        'dname': 'dname'
    }

    def __init__(self, block_size=None, mimimum_block_size=None, maximum_block_size=None, initial_balls=None, success=None, failure=None, description=None, first_option=None, second_option=None, replaced_balls=None, data_oid=None, stratify_study_site=None, status=None, algorythm_type=None, block_randomization_type=None, block_randomization_constraint=None, block_history=None, block_history_printout=None, mti=None, probability=None, dtype=None, pvalue=None, dname=None, local_vars_configuration=None):  # noqa: E501
        """RandomizationConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._block_size = None
        self._mimimum_block_size = None
        self._maximum_block_size = None
        self._initial_balls = None
        self._success = None
        self._failure = None
        self._description = None
        self._first_option = None
        self._second_option = None
        self._replaced_balls = None
        self._data_oid = None
        self._stratify_study_site = None
        self._status = None
        self._algorythm_type = None
        self._block_randomization_type = None
        self._block_randomization_constraint = None
        self._block_history = None
        self._block_history_printout = None
        self._mti = None
        self._probability = None
        self._dtype = None
        self._pvalue = None
        self._dname = None
        self.discriminator = None

        if block_size is not None:
            self.block_size = block_size
        if mimimum_block_size is not None:
            self.mimimum_block_size = mimimum_block_size
        if maximum_block_size is not None:
            self.maximum_block_size = maximum_block_size
        if initial_balls is not None:
            self.initial_balls = initial_balls
        if success is not None:
            self.success = success
        if failure is not None:
            self.failure = failure
        if description is not None:
            self.description = description
        if first_option is not None:
            self.first_option = first_option
        if second_option is not None:
            self.second_option = second_option
        if replaced_balls is not None:
            self.replaced_balls = replaced_balls
        if data_oid is not None:
            self.data_oid = data_oid
        if stratify_study_site is not None:
            self.stratify_study_site = stratify_study_site
        if status is not None:
            self.status = status
        if algorythm_type is not None:
            self.algorythm_type = algorythm_type
        if block_randomization_type is not None:
            self.block_randomization_type = block_randomization_type
        if block_randomization_constraint is not None:
            self.block_randomization_constraint = block_randomization_constraint
        if block_history is not None:
            self.block_history = block_history
        if block_history_printout is not None:
            self.block_history_printout = block_history_printout
        if mti is not None:
            self.mti = mti
        if probability is not None:
            self.probability = probability
        if dtype is not None:
            self.dtype = dtype
        if pvalue is not None:
            self.pvalue = pvalue
        if dname is not None:
            self.dname = dname

    @property
    def block_size(self):
        """Gets the block_size of this RandomizationConfig.  # noqa: E501


        :return: The block_size of this RandomizationConfig.  # noqa: E501
        :rtype: int
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this RandomizationConfig.


        :param block_size: The block_size of this RandomizationConfig.  # noqa: E501
        :type: int
        """

        self._block_size = block_size

    @property
    def mimimum_block_size(self):
        """Gets the mimimum_block_size of this RandomizationConfig.  # noqa: E501


        :return: The mimimum_block_size of this RandomizationConfig.  # noqa: E501
        :rtype: int
        """
        return self._mimimum_block_size

    @mimimum_block_size.setter
    def mimimum_block_size(self, mimimum_block_size):
        """Sets the mimimum_block_size of this RandomizationConfig.


        :param mimimum_block_size: The mimimum_block_size of this RandomizationConfig.  # noqa: E501
        :type: int
        """

        self._mimimum_block_size = mimimum_block_size

    @property
    def maximum_block_size(self):
        """Gets the maximum_block_size of this RandomizationConfig.  # noqa: E501


        :return: The maximum_block_size of this RandomizationConfig.  # noqa: E501
        :rtype: int
        """
        return self._maximum_block_size

    @maximum_block_size.setter
    def maximum_block_size(self, maximum_block_size):
        """Sets the maximum_block_size of this RandomizationConfig.


        :param maximum_block_size: The maximum_block_size of this RandomizationConfig.  # noqa: E501
        :type: int
        """

        self._maximum_block_size = maximum_block_size

    @property
    def initial_balls(self):
        """Gets the initial_balls of this RandomizationConfig.  # noqa: E501


        :return: The initial_balls of this RandomizationConfig.  # noqa: E501
        :rtype: int
        """
        return self._initial_balls

    @initial_balls.setter
    def initial_balls(self, initial_balls):
        """Sets the initial_balls of this RandomizationConfig.


        :param initial_balls: The initial_balls of this RandomizationConfig.  # noqa: E501
        :type: int
        """

        self._initial_balls = initial_balls

    @property
    def success(self):
        """Gets the success of this RandomizationConfig.  # noqa: E501


        :return: The success of this RandomizationConfig.  # noqa: E501
        :rtype: int
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this RandomizationConfig.


        :param success: The success of this RandomizationConfig.  # noqa: E501
        :type: int
        """

        self._success = success

    @property
    def failure(self):
        """Gets the failure of this RandomizationConfig.  # noqa: E501


        :return: The failure of this RandomizationConfig.  # noqa: E501
        :rtype: int
        """
        return self._failure

    @failure.setter
    def failure(self, failure):
        """Sets the failure of this RandomizationConfig.


        :param failure: The failure of this RandomizationConfig.  # noqa: E501
        :type: int
        """

        self._failure = failure

    @property
    def description(self):
        """Gets the description of this RandomizationConfig.  # noqa: E501


        :return: The description of this RandomizationConfig.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RandomizationConfig.


        :param description: The description of this RandomizationConfig.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def first_option(self):
        """Gets the first_option of this RandomizationConfig.  # noqa: E501


        :return: The first_option of this RandomizationConfig.  # noqa: E501
        :rtype: str
        """
        return self._first_option

    @first_option.setter
    def first_option(self, first_option):
        """Sets the first_option of this RandomizationConfig.


        :param first_option: The first_option of this RandomizationConfig.  # noqa: E501
        :type: str
        """

        self._first_option = first_option

    @property
    def second_option(self):
        """Gets the second_option of this RandomizationConfig.  # noqa: E501


        :return: The second_option of this RandomizationConfig.  # noqa: E501
        :rtype: str
        """
        return self._second_option

    @second_option.setter
    def second_option(self, second_option):
        """Sets the second_option of this RandomizationConfig.


        :param second_option: The second_option of this RandomizationConfig.  # noqa: E501
        :type: str
        """

        self._second_option = second_option

    @property
    def replaced_balls(self):
        """Gets the replaced_balls of this RandomizationConfig.  # noqa: E501


        :return: The replaced_balls of this RandomizationConfig.  # noqa: E501
        :rtype: int
        """
        return self._replaced_balls

    @replaced_balls.setter
    def replaced_balls(self, replaced_balls):
        """Sets the replaced_balls of this RandomizationConfig.


        :param replaced_balls: The replaced_balls of this RandomizationConfig.  # noqa: E501
        :type: int
        """

        self._replaced_balls = replaced_balls

    @property
    def data_oid(self):
        """Gets the data_oid of this RandomizationConfig.  # noqa: E501


        :return: The data_oid of this RandomizationConfig.  # noqa: E501
        :rtype: str
        """
        return self._data_oid

    @data_oid.setter
    def data_oid(self, data_oid):
        """Sets the data_oid of this RandomizationConfig.


        :param data_oid: The data_oid of this RandomizationConfig.  # noqa: E501
        :type: str
        """

        self._data_oid = data_oid

    @property
    def stratify_study_site(self):
        """Gets the stratify_study_site of this RandomizationConfig.  # noqa: E501


        :return: The stratify_study_site of this RandomizationConfig.  # noqa: E501
        :rtype: bool
        """
        return self._stratify_study_site

    @stratify_study_site.setter
    def stratify_study_site(self, stratify_study_site):
        """Sets the stratify_study_site of this RandomizationConfig.


        :param stratify_study_site: The stratify_study_site of this RandomizationConfig.  # noqa: E501
        :type: bool
        """

        self._stratify_study_site = stratify_study_site

    @property
    def status(self):
        """Gets the status of this RandomizationConfig.  # noqa: E501


        :return: The status of this RandomizationConfig.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RandomizationConfig.


        :param status: The status of this RandomizationConfig.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def algorythm_type(self):
        """Gets the algorythm_type of this RandomizationConfig.  # noqa: E501


        :return: The algorythm_type of this RandomizationConfig.  # noqa: E501
        :rtype: str
        """
        return self._algorythm_type

    @algorythm_type.setter
    def algorythm_type(self, algorythm_type):
        """Sets the algorythm_type of this RandomizationConfig.


        :param algorythm_type: The algorythm_type of this RandomizationConfig.  # noqa: E501
        :type: str
        """

        self._algorythm_type = algorythm_type

    @property
    def block_randomization_type(self):
        """Gets the block_randomization_type of this RandomizationConfig.  # noqa: E501


        :return: The block_randomization_type of this RandomizationConfig.  # noqa: E501
        :rtype: str
        """
        return self._block_randomization_type

    @block_randomization_type.setter
    def block_randomization_type(self, block_randomization_type):
        """Sets the block_randomization_type of this RandomizationConfig.


        :param block_randomization_type: The block_randomization_type of this RandomizationConfig.  # noqa: E501
        :type: str
        """

        self._block_randomization_type = block_randomization_type

    @property
    def block_randomization_constraint(self):
        """Gets the block_randomization_constraint of this RandomizationConfig.  # noqa: E501


        :return: The block_randomization_constraint of this RandomizationConfig.  # noqa: E501
        :rtype: str
        """
        return self._block_randomization_constraint

    @block_randomization_constraint.setter
    def block_randomization_constraint(self, block_randomization_constraint):
        """Sets the block_randomization_constraint of this RandomizationConfig.


        :param block_randomization_constraint: The block_randomization_constraint of this RandomizationConfig.  # noqa: E501
        :type: str
        """

        self._block_randomization_constraint = block_randomization_constraint

    @property
    def block_history(self):
        """Gets the block_history of this RandomizationConfig.  # noqa: E501


        :return: The block_history of this RandomizationConfig.  # noqa: E501
        :rtype: str
        """
        return self._block_history

    @block_history.setter
    def block_history(self, block_history):
        """Sets the block_history of this RandomizationConfig.


        :param block_history: The block_history of this RandomizationConfig.  # noqa: E501
        :type: str
        """

        self._block_history = block_history

    @property
    def block_history_printout(self):
        """Gets the block_history_printout of this RandomizationConfig.  # noqa: E501


        :return: The block_history_printout of this RandomizationConfig.  # noqa: E501
        :rtype: str
        """
        return self._block_history_printout

    @block_history_printout.setter
    def block_history_printout(self, block_history_printout):
        """Sets the block_history_printout of this RandomizationConfig.


        :param block_history_printout: The block_history_printout of this RandomizationConfig.  # noqa: E501
        :type: str
        """

        self._block_history_printout = block_history_printout

    @property
    def mti(self):
        """Gets the mti of this RandomizationConfig.  # noqa: E501


        :return: The mti of this RandomizationConfig.  # noqa: E501
        :rtype: int
        """
        return self._mti

    @mti.setter
    def mti(self, mti):
        """Sets the mti of this RandomizationConfig.


        :param mti: The mti of this RandomizationConfig.  # noqa: E501
        :type: int
        """

        self._mti = mti

    @property
    def probability(self):
        """Gets the probability of this RandomizationConfig.  # noqa: E501


        :return: The probability of this RandomizationConfig.  # noqa: E501
        :rtype: float
        """
        return self._probability

    @probability.setter
    def probability(self, probability):
        """Sets the probability of this RandomizationConfig.


        :param probability: The probability of this RandomizationConfig.  # noqa: E501
        :type: float
        """

        self._probability = probability

    @property
    def dtype(self):
        """Gets the dtype of this RandomizationConfig.  # noqa: E501


        :return: The dtype of this RandomizationConfig.  # noqa: E501
        :rtype: str
        """
        return self._dtype

    @dtype.setter
    def dtype(self, dtype):
        """Sets the dtype of this RandomizationConfig.


        :param dtype: The dtype of this RandomizationConfig.  # noqa: E501
        :type: str
        """

        self._dtype = dtype

    @property
    def pvalue(self):
        """Gets the pvalue of this RandomizationConfig.  # noqa: E501


        :return: The pvalue of this RandomizationConfig.  # noqa: E501
        :rtype: float
        """
        return self._pvalue

    @pvalue.setter
    def pvalue(self, pvalue):
        """Sets the pvalue of this RandomizationConfig.


        :param pvalue: The pvalue of this RandomizationConfig.  # noqa: E501
        :type: float
        """

        self._pvalue = pvalue

    @property
    def dname(self):
        """Gets the dname of this RandomizationConfig.  # noqa: E501


        :return: The dname of this RandomizationConfig.  # noqa: E501
        :rtype: str
        """
        return self._dname

    @dname.setter
    def dname(self, dname):
        """Sets the dname of this RandomizationConfig.


        :param dname: The dname of this RandomizationConfig.  # noqa: E501
        :type: str
        """

        self._dname = dname

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RandomizationConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RandomizationConfig):
            return True

        return self.to_dict() != other.to_dict()
