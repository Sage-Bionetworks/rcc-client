# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class StudyEventRecord(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'participant_id': 'str',
        'participant_screening_number': 'str',
        'participant_status': 'str',
        'participant_states_history': 'str',
        'participant_econsent_status': 'str',
        'participant_enrollment_date': 'str',
        'participant_screening_date': 'str',
        'participant_initials': 'str',
        'participant_email': 'str',
        'participant_updated_by': 'str',
        'participant_updated_date': 'str',
        'site_name': 'str',
        'study_group': 'str',
        'event_name': 'str',
        'event_date': 'str',
        'event_status': 'str',
        'event_states_history': 'str',
        'event_updated_by': 'str',
        'event_updated_date': 'str',
        'items': 'list[ItemValue]',
        'participant_date_of_birth': 'str',
        'participant_creation_date': 'str'
    }

    attribute_map = {
        'participant_id': 'participantId',
        'participant_screening_number': 'participantScreeningNumber',
        'participant_status': 'participantStatus',
        'participant_states_history': 'participantStatesHistory',
        'participant_econsent_status': 'participantEconsentStatus',
        'participant_enrollment_date': 'participantEnrollmentDate',
        'participant_screening_date': 'participantScreeningDate',
        'participant_initials': 'participantInitials',
        'participant_email': 'participantEmail',
        'participant_updated_by': 'participantUpdatedBy',
        'participant_updated_date': 'participantUpdatedDate',
        'site_name': 'siteName',
        'study_group': 'studyGroup',
        'event_name': 'eventName',
        'event_date': 'eventDate',
        'event_status': 'eventStatus',
        'event_states_history': 'eventStatesHistory',
        'event_updated_by': 'eventUpdatedBy',
        'event_updated_date': 'eventUpdatedDate',
        'items': 'items',
        'participant_date_of_birth': 'participantDateOfBirth',
        'participant_creation_date': 'participantCreationDate'
    }

    def __init__(self, participant_id=None, participant_screening_number=None, participant_status=None, participant_states_history=None, participant_econsent_status=None, participant_enrollment_date=None, participant_screening_date=None, participant_initials=None, participant_email=None, participant_updated_by=None, participant_updated_date=None, site_name=None, study_group=None, event_name=None, event_date=None, event_status=None, event_states_history=None, event_updated_by=None, event_updated_date=None, items=None, participant_date_of_birth=None, participant_creation_date=None, local_vars_configuration=None):  # noqa: E501
        """StudyEventRecord - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._participant_id = None
        self._participant_screening_number = None
        self._participant_status = None
        self._participant_states_history = None
        self._participant_econsent_status = None
        self._participant_enrollment_date = None
        self._participant_screening_date = None
        self._participant_initials = None
        self._participant_email = None
        self._participant_updated_by = None
        self._participant_updated_date = None
        self._site_name = None
        self._study_group = None
        self._event_name = None
        self._event_date = None
        self._event_status = None
        self._event_states_history = None
        self._event_updated_by = None
        self._event_updated_date = None
        self._items = None
        self._participant_date_of_birth = None
        self._participant_creation_date = None
        self.discriminator = None

        if participant_id is not None:
            self.participant_id = participant_id
        if participant_screening_number is not None:
            self.participant_screening_number = participant_screening_number
        if participant_status is not None:
            self.participant_status = participant_status
        if participant_states_history is not None:
            self.participant_states_history = participant_states_history
        if participant_econsent_status is not None:
            self.participant_econsent_status = participant_econsent_status
        if participant_enrollment_date is not None:
            self.participant_enrollment_date = participant_enrollment_date
        if participant_screening_date is not None:
            self.participant_screening_date = participant_screening_date
        if participant_initials is not None:
            self.participant_initials = participant_initials
        if participant_email is not None:
            self.participant_email = participant_email
        if participant_updated_by is not None:
            self.participant_updated_by = participant_updated_by
        if participant_updated_date is not None:
            self.participant_updated_date = participant_updated_date
        if site_name is not None:
            self.site_name = site_name
        if study_group is not None:
            self.study_group = study_group
        if event_name is not None:
            self.event_name = event_name
        if event_date is not None:
            self.event_date = event_date
        if event_status is not None:
            self.event_status = event_status
        if event_states_history is not None:
            self.event_states_history = event_states_history
        if event_updated_by is not None:
            self.event_updated_by = event_updated_by
        if event_updated_date is not None:
            self.event_updated_date = event_updated_date
        if items is not None:
            self.items = items
        if participant_date_of_birth is not None:
            self.participant_date_of_birth = participant_date_of_birth
        if participant_creation_date is not None:
            self.participant_creation_date = participant_creation_date

    @property
    def participant_id(self):
        """Gets the participant_id of this StudyEventRecord.  # noqa: E501


        :return: The participant_id of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._participant_id

    @participant_id.setter
    def participant_id(self, participant_id):
        """Sets the participant_id of this StudyEventRecord.


        :param participant_id: The participant_id of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._participant_id = participant_id

    @property
    def participant_screening_number(self):
        """Gets the participant_screening_number of this StudyEventRecord.  # noqa: E501


        :return: The participant_screening_number of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._participant_screening_number

    @participant_screening_number.setter
    def participant_screening_number(self, participant_screening_number):
        """Sets the participant_screening_number of this StudyEventRecord.


        :param participant_screening_number: The participant_screening_number of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._participant_screening_number = participant_screening_number

    @property
    def participant_status(self):
        """Gets the participant_status of this StudyEventRecord.  # noqa: E501


        :return: The participant_status of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._participant_status

    @participant_status.setter
    def participant_status(self, participant_status):
        """Sets the participant_status of this StudyEventRecord.


        :param participant_status: The participant_status of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._participant_status = participant_status

    @property
    def participant_states_history(self):
        """Gets the participant_states_history of this StudyEventRecord.  # noqa: E501


        :return: The participant_states_history of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._participant_states_history

    @participant_states_history.setter
    def participant_states_history(self, participant_states_history):
        """Sets the participant_states_history of this StudyEventRecord.


        :param participant_states_history: The participant_states_history of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._participant_states_history = participant_states_history

    @property
    def participant_econsent_status(self):
        """Gets the participant_econsent_status of this StudyEventRecord.  # noqa: E501


        :return: The participant_econsent_status of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._participant_econsent_status

    @participant_econsent_status.setter
    def participant_econsent_status(self, participant_econsent_status):
        """Sets the participant_econsent_status of this StudyEventRecord.


        :param participant_econsent_status: The participant_econsent_status of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._participant_econsent_status = participant_econsent_status

    @property
    def participant_enrollment_date(self):
        """Gets the participant_enrollment_date of this StudyEventRecord.  # noqa: E501


        :return: The participant_enrollment_date of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._participant_enrollment_date

    @participant_enrollment_date.setter
    def participant_enrollment_date(self, participant_enrollment_date):
        """Sets the participant_enrollment_date of this StudyEventRecord.


        :param participant_enrollment_date: The participant_enrollment_date of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._participant_enrollment_date = participant_enrollment_date

    @property
    def participant_screening_date(self):
        """Gets the participant_screening_date of this StudyEventRecord.  # noqa: E501


        :return: The participant_screening_date of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._participant_screening_date

    @participant_screening_date.setter
    def participant_screening_date(self, participant_screening_date):
        """Sets the participant_screening_date of this StudyEventRecord.


        :param participant_screening_date: The participant_screening_date of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._participant_screening_date = participant_screening_date

    @property
    def participant_initials(self):
        """Gets the participant_initials of this StudyEventRecord.  # noqa: E501


        :return: The participant_initials of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._participant_initials

    @participant_initials.setter
    def participant_initials(self, participant_initials):
        """Sets the participant_initials of this StudyEventRecord.


        :param participant_initials: The participant_initials of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._participant_initials = participant_initials

    @property
    def participant_email(self):
        """Gets the participant_email of this StudyEventRecord.  # noqa: E501


        :return: The participant_email of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._participant_email

    @participant_email.setter
    def participant_email(self, participant_email):
        """Sets the participant_email of this StudyEventRecord.


        :param participant_email: The participant_email of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._participant_email = participant_email

    @property
    def participant_updated_by(self):
        """Gets the participant_updated_by of this StudyEventRecord.  # noqa: E501


        :return: The participant_updated_by of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._participant_updated_by

    @participant_updated_by.setter
    def participant_updated_by(self, participant_updated_by):
        """Sets the participant_updated_by of this StudyEventRecord.


        :param participant_updated_by: The participant_updated_by of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._participant_updated_by = participant_updated_by

    @property
    def participant_updated_date(self):
        """Gets the participant_updated_date of this StudyEventRecord.  # noqa: E501


        :return: The participant_updated_date of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._participant_updated_date

    @participant_updated_date.setter
    def participant_updated_date(self, participant_updated_date):
        """Sets the participant_updated_date of this StudyEventRecord.


        :param participant_updated_date: The participant_updated_date of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._participant_updated_date = participant_updated_date

    @property
    def site_name(self):
        """Gets the site_name of this StudyEventRecord.  # noqa: E501


        :return: The site_name of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this StudyEventRecord.


        :param site_name: The site_name of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._site_name = site_name

    @property
    def study_group(self):
        """Gets the study_group of this StudyEventRecord.  # noqa: E501


        :return: The study_group of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._study_group

    @study_group.setter
    def study_group(self, study_group):
        """Sets the study_group of this StudyEventRecord.


        :param study_group: The study_group of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._study_group = study_group

    @property
    def event_name(self):
        """Gets the event_name of this StudyEventRecord.  # noqa: E501


        :return: The event_name of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this StudyEventRecord.


        :param event_name: The event_name of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._event_name = event_name

    @property
    def event_date(self):
        """Gets the event_date of this StudyEventRecord.  # noqa: E501


        :return: The event_date of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this StudyEventRecord.


        :param event_date: The event_date of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._event_date = event_date

    @property
    def event_status(self):
        """Gets the event_status of this StudyEventRecord.  # noqa: E501


        :return: The event_status of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._event_status

    @event_status.setter
    def event_status(self, event_status):
        """Sets the event_status of this StudyEventRecord.


        :param event_status: The event_status of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._event_status = event_status

    @property
    def event_states_history(self):
        """Gets the event_states_history of this StudyEventRecord.  # noqa: E501


        :return: The event_states_history of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._event_states_history

    @event_states_history.setter
    def event_states_history(self, event_states_history):
        """Sets the event_states_history of this StudyEventRecord.


        :param event_states_history: The event_states_history of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._event_states_history = event_states_history

    @property
    def event_updated_by(self):
        """Gets the event_updated_by of this StudyEventRecord.  # noqa: E501


        :return: The event_updated_by of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._event_updated_by

    @event_updated_by.setter
    def event_updated_by(self, event_updated_by):
        """Sets the event_updated_by of this StudyEventRecord.


        :param event_updated_by: The event_updated_by of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._event_updated_by = event_updated_by

    @property
    def event_updated_date(self):
        """Gets the event_updated_date of this StudyEventRecord.  # noqa: E501


        :return: The event_updated_date of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._event_updated_date

    @event_updated_date.setter
    def event_updated_date(self, event_updated_date):
        """Sets the event_updated_date of this StudyEventRecord.


        :param event_updated_date: The event_updated_date of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._event_updated_date = event_updated_date

    @property
    def items(self):
        """Gets the items of this StudyEventRecord.  # noqa: E501


        :return: The items of this StudyEventRecord.  # noqa: E501
        :rtype: list[ItemValue]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this StudyEventRecord.


        :param items: The items of this StudyEventRecord.  # noqa: E501
        :type: list[ItemValue]
        """

        self._items = items

    @property
    def participant_date_of_birth(self):
        """Gets the participant_date_of_birth of this StudyEventRecord.  # noqa: E501


        :return: The participant_date_of_birth of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._participant_date_of_birth

    @participant_date_of_birth.setter
    def participant_date_of_birth(self, participant_date_of_birth):
        """Sets the participant_date_of_birth of this StudyEventRecord.


        :param participant_date_of_birth: The participant_date_of_birth of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._participant_date_of_birth = participant_date_of_birth

    @property
    def participant_creation_date(self):
        """Gets the participant_creation_date of this StudyEventRecord.  # noqa: E501


        :return: The participant_creation_date of this StudyEventRecord.  # noqa: E501
        :rtype: str
        """
        return self._participant_creation_date

    @participant_creation_date.setter
    def participant_creation_date(self, participant_creation_date):
        """Sets the participant_creation_date of this StudyEventRecord.


        :param participant_creation_date: The participant_creation_date of this StudyEventRecord.  # noqa: E501
        :type: str
        """

        self._participant_creation_date = participant_creation_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudyEventRecord):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StudyEventRecord):
            return True

        return self.to_dict() != other.to_dict()
