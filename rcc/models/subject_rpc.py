# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class SubjectRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'client_id': 'int',
        'study_id': 'int',
        'unique_identifier': 'str',
        'rc_oid': 'str',
        'study_site_id': 'int',
        'study_site_name': 'str',
        'protocol_id': 'str',
        'date_screened': 'int',
        'update_date': 'int',
        'status_id': 'int',
        'status': 'str',
        'initials': 'str',
        'email': 'str',
        'screening_number': 'str',
        'randomization_id': 'int',
        'crf_version_screening_id': 'int',
        'force_manual_subject_number': 'bool',
        'custom_enroll_crf_used': 'bool',
        'mrn': 'str',
        'gender_id': 'int',
        'gender': 'str',
        'dob_collected': 'bool',
        'enrollment_failure_notes': 'str',
        'screening_crf_passed': 'bool',
        'enrollment_confirmed': 'bool',
        'dynamic_group_class_id': 'int',
        'casebook_document_id': 'int',
        'custom_enroll_crf_id': 'int',
        'custom_enroll_crf_version_id': 'int',
        'auto_schedule_calendared_events': 'bool',
        'study_group_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'client_id': 'clientId',
        'study_id': 'studyId',
        'unique_identifier': 'uniqueIdentifier',
        'rc_oid': 'rcOid',
        'study_site_id': 'studySiteId',
        'study_site_name': 'studySiteName',
        'protocol_id': 'protocolId',
        'date_screened': 'dateScreened',
        'update_date': 'updateDate',
        'status_id': 'statusId',
        'status': 'status',
        'initials': 'initials',
        'email': 'email',
        'screening_number': 'screeningNumber',
        'randomization_id': 'randomizationId',
        'crf_version_screening_id': 'crfVersionScreeningId',
        'force_manual_subject_number': 'forceManualSubjectNumber',
        'custom_enroll_crf_used': 'customEnrollCrfUsed',
        'mrn': 'mrn',
        'gender_id': 'genderId',
        'gender': 'gender',
        'dob_collected': 'dobCollected',
        'enrollment_failure_notes': 'enrollmentFailureNotes',
        'screening_crf_passed': 'screeningCrfPassed',
        'enrollment_confirmed': 'enrollmentConfirmed',
        'dynamic_group_class_id': 'dynamicGroupClassId',
        'casebook_document_id': 'casebookDocumentId',
        'custom_enroll_crf_id': 'customEnrollCrfId',
        'custom_enroll_crf_version_id': 'customEnrollCrfVersionId',
        'auto_schedule_calendared_events': 'autoScheduleCalendaredEvents',
        'study_group_name': 'studyGroupName'
    }

    def __init__(self, id=None, client_id=None, study_id=None, unique_identifier=None, rc_oid=None, study_site_id=None, study_site_name=None, protocol_id=None, date_screened=None, update_date=None, status_id=None, status=None, initials=None, email=None, screening_number=None, randomization_id=None, crf_version_screening_id=None, force_manual_subject_number=None, custom_enroll_crf_used=None, mrn=None, gender_id=None, gender=None, dob_collected=None, enrollment_failure_notes=None, screening_crf_passed=None, enrollment_confirmed=None, dynamic_group_class_id=None, casebook_document_id=None, custom_enroll_crf_id=None, custom_enroll_crf_version_id=None, auto_schedule_calendared_events=None, study_group_name=None, local_vars_configuration=None):  # noqa: E501
        """SubjectRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._client_id = None
        self._study_id = None
        self._unique_identifier = None
        self._rc_oid = None
        self._study_site_id = None
        self._study_site_name = None
        self._protocol_id = None
        self._date_screened = None
        self._update_date = None
        self._status_id = None
        self._status = None
        self._initials = None
        self._email = None
        self._screening_number = None
        self._randomization_id = None
        self._crf_version_screening_id = None
        self._force_manual_subject_number = None
        self._custom_enroll_crf_used = None
        self._mrn = None
        self._gender_id = None
        self._gender = None
        self._dob_collected = None
        self._enrollment_failure_notes = None
        self._screening_crf_passed = None
        self._enrollment_confirmed = None
        self._dynamic_group_class_id = None
        self._casebook_document_id = None
        self._custom_enroll_crf_id = None
        self._custom_enroll_crf_version_id = None
        self._auto_schedule_calendared_events = None
        self._study_group_name = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if client_id is not None:
            self.client_id = client_id
        if study_id is not None:
            self.study_id = study_id
        if unique_identifier is not None:
            self.unique_identifier = unique_identifier
        if rc_oid is not None:
            self.rc_oid = rc_oid
        if study_site_id is not None:
            self.study_site_id = study_site_id
        if study_site_name is not None:
            self.study_site_name = study_site_name
        if protocol_id is not None:
            self.protocol_id = protocol_id
        if date_screened is not None:
            self.date_screened = date_screened
        if update_date is not None:
            self.update_date = update_date
        if status_id is not None:
            self.status_id = status_id
        if status is not None:
            self.status = status
        if initials is not None:
            self.initials = initials
        if email is not None:
            self.email = email
        if screening_number is not None:
            self.screening_number = screening_number
        if randomization_id is not None:
            self.randomization_id = randomization_id
        if crf_version_screening_id is not None:
            self.crf_version_screening_id = crf_version_screening_id
        if force_manual_subject_number is not None:
            self.force_manual_subject_number = force_manual_subject_number
        if custom_enroll_crf_used is not None:
            self.custom_enroll_crf_used = custom_enroll_crf_used
        if mrn is not None:
            self.mrn = mrn
        if gender_id is not None:
            self.gender_id = gender_id
        if gender is not None:
            self.gender = gender
        if dob_collected is not None:
            self.dob_collected = dob_collected
        if enrollment_failure_notes is not None:
            self.enrollment_failure_notes = enrollment_failure_notes
        if screening_crf_passed is not None:
            self.screening_crf_passed = screening_crf_passed
        if enrollment_confirmed is not None:
            self.enrollment_confirmed = enrollment_confirmed
        if dynamic_group_class_id is not None:
            self.dynamic_group_class_id = dynamic_group_class_id
        if casebook_document_id is not None:
            self.casebook_document_id = casebook_document_id
        if custom_enroll_crf_id is not None:
            self.custom_enroll_crf_id = custom_enroll_crf_id
        if custom_enroll_crf_version_id is not None:
            self.custom_enroll_crf_version_id = custom_enroll_crf_version_id
        if auto_schedule_calendared_events is not None:
            self.auto_schedule_calendared_events = auto_schedule_calendared_events
        if study_group_name is not None:
            self.study_group_name = study_group_name

    @property
    def id(self):
        """Gets the id of this SubjectRpc.  # noqa: E501


        :return: The id of this SubjectRpc.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubjectRpc.


        :param id: The id of this SubjectRpc.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this SubjectRpc.  # noqa: E501


        :return: The client_id of this SubjectRpc.  # noqa: E501
        :rtype: int
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this SubjectRpc.


        :param client_id: The client_id of this SubjectRpc.  # noqa: E501
        :type: int
        """

        self._client_id = client_id

    @property
    def study_id(self):
        """Gets the study_id of this SubjectRpc.  # noqa: E501


        :return: The study_id of this SubjectRpc.  # noqa: E501
        :rtype: int
        """
        return self._study_id

    @study_id.setter
    def study_id(self, study_id):
        """Sets the study_id of this SubjectRpc.


        :param study_id: The study_id of this SubjectRpc.  # noqa: E501
        :type: int
        """

        self._study_id = study_id

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this SubjectRpc.  # noqa: E501

        Unique Subject Identifier. Used to refer the subject.  # noqa: E501

        :return: The unique_identifier of this SubjectRpc.  # noqa: E501
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this SubjectRpc.

        Unique Subject Identifier. Used to refer the subject.  # noqa: E501

        :param unique_identifier: The unique_identifier of this SubjectRpc.  # noqa: E501
        :type: str
        """

        self._unique_identifier = unique_identifier

    @property
    def rc_oid(self):
        """Gets the rc_oid of this SubjectRpc.  # noqa: E501


        :return: The rc_oid of this SubjectRpc.  # noqa: E501
        :rtype: str
        """
        return self._rc_oid

    @rc_oid.setter
    def rc_oid(self, rc_oid):
        """Sets the rc_oid of this SubjectRpc.


        :param rc_oid: The rc_oid of this SubjectRpc.  # noqa: E501
        :type: str
        """

        self._rc_oid = rc_oid

    @property
    def study_site_id(self):
        """Gets the study_site_id of this SubjectRpc.  # noqa: E501


        :return: The study_site_id of this SubjectRpc.  # noqa: E501
        :rtype: int
        """
        return self._study_site_id

    @study_site_id.setter
    def study_site_id(self, study_site_id):
        """Sets the study_site_id of this SubjectRpc.


        :param study_site_id: The study_site_id of this SubjectRpc.  # noqa: E501
        :type: int
        """

        self._study_site_id = study_site_id

    @property
    def study_site_name(self):
        """Gets the study_site_name of this SubjectRpc.  # noqa: E501

        Site name for Subject Site. Virtual field.  # noqa: E501

        :return: The study_site_name of this SubjectRpc.  # noqa: E501
        :rtype: str
        """
        return self._study_site_name

    @study_site_name.setter
    def study_site_name(self, study_site_name):
        """Sets the study_site_name of this SubjectRpc.

        Site name for Subject Site. Virtual field.  # noqa: E501

        :param study_site_name: The study_site_name of this SubjectRpc.  # noqa: E501
        :type: str
        """

        self._study_site_name = study_site_name

    @property
    def protocol_id(self):
        """Gets the protocol_id of this SubjectRpc.  # noqa: E501


        :return: The protocol_id of this SubjectRpc.  # noqa: E501
        :rtype: str
        """
        return self._protocol_id

    @protocol_id.setter
    def protocol_id(self, protocol_id):
        """Sets the protocol_id of this SubjectRpc.


        :param protocol_id: The protocol_id of this SubjectRpc.  # noqa: E501
        :type: str
        """

        self._protocol_id = protocol_id

    @property
    def date_screened(self):
        """Gets the date_screened of this SubjectRpc.  # noqa: E501


        :return: The date_screened of this SubjectRpc.  # noqa: E501
        :rtype: int
        """
        return self._date_screened

    @date_screened.setter
    def date_screened(self, date_screened):
        """Sets the date_screened of this SubjectRpc.


        :param date_screened: The date_screened of this SubjectRpc.  # noqa: E501
        :type: int
        """

        self._date_screened = date_screened

    @property
    def update_date(self):
        """Gets the update_date of this SubjectRpc.  # noqa: E501


        :return: The update_date of this SubjectRpc.  # noqa: E501
        :rtype: int
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date):
        """Sets the update_date of this SubjectRpc.


        :param update_date: The update_date of this SubjectRpc.  # noqa: E501
        :type: int
        """

        self._update_date = update_date

    @property
    def status_id(self):
        """Gets the status_id of this SubjectRpc.  # noqa: E501


        :return: The status_id of this SubjectRpc.  # noqa: E501
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this SubjectRpc.


        :param status_id: The status_id of this SubjectRpc.  # noqa: E501
        :type: int
        """

        self._status_id = status_id

    @property
    def status(self):
        """Gets the status of this SubjectRpc.  # noqa: E501

        Subject status property  # noqa: E501

        :return: The status of this SubjectRpc.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubjectRpc.

        Subject status property  # noqa: E501

        :param status: The status of this SubjectRpc.  # noqa: E501
        :type: str
        """
        allowed_values = ["Enrolled", "Not Enrolled", "Incomplete", "Removed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def initials(self):
        """Gets the initials of this SubjectRpc.  # noqa: E501


        :return: The initials of this SubjectRpc.  # noqa: E501
        :rtype: str
        """
        return self._initials

    @initials.setter
    def initials(self, initials):
        """Sets the initials of this SubjectRpc.


        :param initials: The initials of this SubjectRpc.  # noqa: E501
        :type: str
        """

        self._initials = initials

    @property
    def email(self):
        """Gets the email of this SubjectRpc.  # noqa: E501


        :return: The email of this SubjectRpc.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SubjectRpc.


        :param email: The email of this SubjectRpc.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def screening_number(self):
        """Gets the screening_number of this SubjectRpc.  # noqa: E501


        :return: The screening_number of this SubjectRpc.  # noqa: E501
        :rtype: str
        """
        return self._screening_number

    @screening_number.setter
    def screening_number(self, screening_number):
        """Sets the screening_number of this SubjectRpc.


        :param screening_number: The screening_number of this SubjectRpc.  # noqa: E501
        :type: str
        """

        self._screening_number = screening_number

    @property
    def randomization_id(self):
        """Gets the randomization_id of this SubjectRpc.  # noqa: E501


        :return: The randomization_id of this SubjectRpc.  # noqa: E501
        :rtype: int
        """
        return self._randomization_id

    @randomization_id.setter
    def randomization_id(self, randomization_id):
        """Sets the randomization_id of this SubjectRpc.


        :param randomization_id: The randomization_id of this SubjectRpc.  # noqa: E501
        :type: int
        """

        self._randomization_id = randomization_id

    @property
    def crf_version_screening_id(self):
        """Gets the crf_version_screening_id of this SubjectRpc.  # noqa: E501

        ID of Screening CRF Version  # noqa: E501

        :return: The crf_version_screening_id of this SubjectRpc.  # noqa: E501
        :rtype: int
        """
        return self._crf_version_screening_id

    @crf_version_screening_id.setter
    def crf_version_screening_id(self, crf_version_screening_id):
        """Sets the crf_version_screening_id of this SubjectRpc.

        ID of Screening CRF Version  # noqa: E501

        :param crf_version_screening_id: The crf_version_screening_id of this SubjectRpc.  # noqa: E501
        :type: int
        """

        self._crf_version_screening_id = crf_version_screening_id

    @property
    def force_manual_subject_number(self):
        """Gets the force_manual_subject_number of this SubjectRpc.  # noqa: E501

        Flag shows how to generate Subject Number. By default it is manual subject number.  # noqa: E501

        :return: The force_manual_subject_number of this SubjectRpc.  # noqa: E501
        :rtype: bool
        """
        return self._force_manual_subject_number

    @force_manual_subject_number.setter
    def force_manual_subject_number(self, force_manual_subject_number):
        """Sets the force_manual_subject_number of this SubjectRpc.

        Flag shows how to generate Subject Number. By default it is manual subject number.  # noqa: E501

        :param force_manual_subject_number: The force_manual_subject_number of this SubjectRpc.  # noqa: E501
        :type: bool
        """

        self._force_manual_subject_number = force_manual_subject_number

    @property
    def custom_enroll_crf_used(self):
        """Gets the custom_enroll_crf_used of this SubjectRpc.  # noqa: E501


        :return: The custom_enroll_crf_used of this SubjectRpc.  # noqa: E501
        :rtype: bool
        """
        return self._custom_enroll_crf_used

    @custom_enroll_crf_used.setter
    def custom_enroll_crf_used(self, custom_enroll_crf_used):
        """Sets the custom_enroll_crf_used of this SubjectRpc.


        :param custom_enroll_crf_used: The custom_enroll_crf_used of this SubjectRpc.  # noqa: E501
        :type: bool
        """

        self._custom_enroll_crf_used = custom_enroll_crf_used

    @property
    def mrn(self):
        """Gets the mrn of this SubjectRpc.  # noqa: E501


        :return: The mrn of this SubjectRpc.  # noqa: E501
        :rtype: str
        """
        return self._mrn

    @mrn.setter
    def mrn(self, mrn):
        """Sets the mrn of this SubjectRpc.


        :param mrn: The mrn of this SubjectRpc.  # noqa: E501
        :type: str
        """

        self._mrn = mrn

    @property
    def gender_id(self):
        """Gets the gender_id of this SubjectRpc.  # noqa: E501


        :return: The gender_id of this SubjectRpc.  # noqa: E501
        :rtype: int
        """
        return self._gender_id

    @gender_id.setter
    def gender_id(self, gender_id):
        """Sets the gender_id of this SubjectRpc.


        :param gender_id: The gender_id of this SubjectRpc.  # noqa: E501
        :type: int
        """

        self._gender_id = gender_id

    @property
    def gender(self):
        """Gets the gender of this SubjectRpc.  # noqa: E501

        Subject gender  # noqa: E501

        :return: The gender of this SubjectRpc.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this SubjectRpc.

        Subject gender  # noqa: E501

        :param gender: The gender of this SubjectRpc.  # noqa: E501
        :type: str
        """
        allowed_values = ["male", "female"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and gender not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def dob_collected(self):
        """Gets the dob_collected of this SubjectRpc.  # noqa: E501


        :return: The dob_collected of this SubjectRpc.  # noqa: E501
        :rtype: bool
        """
        return self._dob_collected

    @dob_collected.setter
    def dob_collected(self, dob_collected):
        """Sets the dob_collected of this SubjectRpc.


        :param dob_collected: The dob_collected of this SubjectRpc.  # noqa: E501
        :type: bool
        """

        self._dob_collected = dob_collected

    @property
    def enrollment_failure_notes(self):
        """Gets the enrollment_failure_notes of this SubjectRpc.  # noqa: E501


        :return: The enrollment_failure_notes of this SubjectRpc.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_failure_notes

    @enrollment_failure_notes.setter
    def enrollment_failure_notes(self, enrollment_failure_notes):
        """Sets the enrollment_failure_notes of this SubjectRpc.


        :param enrollment_failure_notes: The enrollment_failure_notes of this SubjectRpc.  # noqa: E501
        :type: str
        """

        self._enrollment_failure_notes = enrollment_failure_notes

    @property
    def screening_crf_passed(self):
        """Gets the screening_crf_passed of this SubjectRpc.  # noqa: E501


        :return: The screening_crf_passed of this SubjectRpc.  # noqa: E501
        :rtype: bool
        """
        return self._screening_crf_passed

    @screening_crf_passed.setter
    def screening_crf_passed(self, screening_crf_passed):
        """Sets the screening_crf_passed of this SubjectRpc.


        :param screening_crf_passed: The screening_crf_passed of this SubjectRpc.  # noqa: E501
        :type: bool
        """

        self._screening_crf_passed = screening_crf_passed

    @property
    def enrollment_confirmed(self):
        """Gets the enrollment_confirmed of this SubjectRpc.  # noqa: E501


        :return: The enrollment_confirmed of this SubjectRpc.  # noqa: E501
        :rtype: bool
        """
        return self._enrollment_confirmed

    @enrollment_confirmed.setter
    def enrollment_confirmed(self, enrollment_confirmed):
        """Sets the enrollment_confirmed of this SubjectRpc.


        :param enrollment_confirmed: The enrollment_confirmed of this SubjectRpc.  # noqa: E501
        :type: bool
        """

        self._enrollment_confirmed = enrollment_confirmed

    @property
    def dynamic_group_class_id(self):
        """Gets the dynamic_group_class_id of this SubjectRpc.  # noqa: E501


        :return: The dynamic_group_class_id of this SubjectRpc.  # noqa: E501
        :rtype: int
        """
        return self._dynamic_group_class_id

    @dynamic_group_class_id.setter
    def dynamic_group_class_id(self, dynamic_group_class_id):
        """Sets the dynamic_group_class_id of this SubjectRpc.


        :param dynamic_group_class_id: The dynamic_group_class_id of this SubjectRpc.  # noqa: E501
        :type: int
        """

        self._dynamic_group_class_id = dynamic_group_class_id

    @property
    def casebook_document_id(self):
        """Gets the casebook_document_id of this SubjectRpc.  # noqa: E501


        :return: The casebook_document_id of this SubjectRpc.  # noqa: E501
        :rtype: int
        """
        return self._casebook_document_id

    @casebook_document_id.setter
    def casebook_document_id(self, casebook_document_id):
        """Sets the casebook_document_id of this SubjectRpc.


        :param casebook_document_id: The casebook_document_id of this SubjectRpc.  # noqa: E501
        :type: int
        """

        self._casebook_document_id = casebook_document_id

    @property
    def custom_enroll_crf_id(self):
        """Gets the custom_enroll_crf_id of this SubjectRpc.  # noqa: E501


        :return: The custom_enroll_crf_id of this SubjectRpc.  # noqa: E501
        :rtype: int
        """
        return self._custom_enroll_crf_id

    @custom_enroll_crf_id.setter
    def custom_enroll_crf_id(self, custom_enroll_crf_id):
        """Sets the custom_enroll_crf_id of this SubjectRpc.


        :param custom_enroll_crf_id: The custom_enroll_crf_id of this SubjectRpc.  # noqa: E501
        :type: int
        """

        self._custom_enroll_crf_id = custom_enroll_crf_id

    @property
    def custom_enroll_crf_version_id(self):
        """Gets the custom_enroll_crf_version_id of this SubjectRpc.  # noqa: E501


        :return: The custom_enroll_crf_version_id of this SubjectRpc.  # noqa: E501
        :rtype: int
        """
        return self._custom_enroll_crf_version_id

    @custom_enroll_crf_version_id.setter
    def custom_enroll_crf_version_id(self, custom_enroll_crf_version_id):
        """Sets the custom_enroll_crf_version_id of this SubjectRpc.


        :param custom_enroll_crf_version_id: The custom_enroll_crf_version_id of this SubjectRpc.  # noqa: E501
        :type: int
        """

        self._custom_enroll_crf_version_id = custom_enroll_crf_version_id

    @property
    def auto_schedule_calendared_events(self):
        """Gets the auto_schedule_calendared_events of this SubjectRpc.  # noqa: E501


        :return: The auto_schedule_calendared_events of this SubjectRpc.  # noqa: E501
        :rtype: bool
        """
        return self._auto_schedule_calendared_events

    @auto_schedule_calendared_events.setter
    def auto_schedule_calendared_events(self, auto_schedule_calendared_events):
        """Sets the auto_schedule_calendared_events of this SubjectRpc.


        :param auto_schedule_calendared_events: The auto_schedule_calendared_events of this SubjectRpc.  # noqa: E501
        :type: bool
        """

        self._auto_schedule_calendared_events = auto_schedule_calendared_events

    @property
    def study_group_name(self):
        """Gets the study_group_name of this SubjectRpc.  # noqa: E501


        :return: The study_group_name of this SubjectRpc.  # noqa: E501
        :rtype: str
        """
        return self._study_group_name

    @study_group_name.setter
    def study_group_name(self, study_group_name):
        """Sets the study_group_name of this SubjectRpc.


        :param study_group_name: The study_group_name of this SubjectRpc.  # noqa: E501
        :type: str
        """

        self._study_group_name = study_group_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubjectRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubjectRpc):
            return True

        return self.to_dict() != other.to_dict()
