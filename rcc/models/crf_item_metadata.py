# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class CRFItemMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'item_metadata_oid': 'str',
        'column_number': 'int',
        'page_number_label': 'str',
        'question_number_label': 'str',
        'left_item_text': 'str',
        'right_item_text': 'str',
        'regexp': 'str',
        'regexp_error_msg': 'str',
        'ordinal': 'int',
        'required': 'bool',
        'response_layout': 'str',
        'width_decimal': 'str',
        'show_item': 'bool',
        'code_ref': 'str',
        'group_oid': 'str',
        'is_required': 'bool',
        'disp_sequence': 'int',
        'branching_equation': 'str',
        'crf_version_oid': 'str',
        'hide_from_survey': 'bool',
        'position_row': 'int',
        'position_column': 'int',
        'item_data_type': 'str',
        'measurement_unit_name': 'str',
        'variable_name': 'str',
        'label': 'str',
        'label_plain_text': 'str',
        'phi_status': 'bool',
        'left_alignment': 'bool',
        'field_width': 'int',
        'info_text': 'str',
        'min_value': 'str',
        'max_value': 'str',
        'show_validator': 'bool',
        'soft_validation': 'bool',
        'calc_field_equation': 'str',
        'custom_info1': 'str',
        'custom_info2': 'str',
        'stratification_variable': 'bool',
        'show_response_set_value_too': 'bool',
        'study_dictionary': 'str',
        'default_value': 'str',
        'subject_group': 'bool',
        'required_query_description': 'str',
        'warning_when_left_empty': 'str',
        'dynamic_list_rs_values_eq': 'str',
        'dynamic_list_type': 'str',
        'dynamic_list_no_duplicates': 'bool',
        'used_in_dys_fields': 'bool',
        'econsent_signature': 'bool'
    }

    attribute_map = {
        'item_metadata_oid': 'itemMetadataOID',
        'column_number': 'columnNumber',
        'page_number_label': 'pageNumberLabel',
        'question_number_label': 'questionNumberLabel',
        'left_item_text': 'leftItemText',
        'right_item_text': 'rightItemText',
        'regexp': 'regexp',
        'regexp_error_msg': 'regexpErrorMsg',
        'ordinal': 'ordinal',
        'required': 'required',
        'response_layout': 'responseLayout',
        'width_decimal': 'widthDecimal',
        'show_item': 'showItem',
        'code_ref': 'codeRef',
        'group_oid': 'groupOID',
        'is_required': 'isRequired',
        'disp_sequence': 'dispSequence',
        'branching_equation': 'branchingEquation',
        'crf_version_oid': 'crfVersionOID',
        'hide_from_survey': 'hideFromSurvey',
        'position_row': 'positionRow',
        'position_column': 'positionColumn',
        'item_data_type': 'itemDataType',
        'measurement_unit_name': 'measurementUnitName',
        'variable_name': 'variableName',
        'label': 'label',
        'label_plain_text': 'labelPlainText',
        'phi_status': 'phiStatus',
        'left_alignment': 'leftAlignment',
        'field_width': 'fieldWidth',
        'info_text': 'infoText',
        'min_value': 'minValue',
        'max_value': 'maxValue',
        'show_validator': 'showValidator',
        'soft_validation': 'softValidation',
        'calc_field_equation': 'calcFieldEquation',
        'custom_info1': 'customInfo1',
        'custom_info2': 'customInfo2',
        'stratification_variable': 'stratificationVariable',
        'show_response_set_value_too': 'showResponseSetValueToo',
        'study_dictionary': 'studyDictionary',
        'default_value': 'defaultValue',
        'subject_group': 'subjectGroup',
        'required_query_description': 'requiredQueryDescription',
        'warning_when_left_empty': 'warningWhenLeftEmpty',
        'dynamic_list_rs_values_eq': 'dynamicListRsValuesEq',
        'dynamic_list_type': 'dynamicListType',
        'dynamic_list_no_duplicates': 'dynamicListNoDuplicates',
        'used_in_dys_fields': 'usedInDysFields',
        'econsent_signature': 'econsentSignature'
    }

    def __init__(self, item_metadata_oid=None, column_number=None, page_number_label=None, question_number_label=None, left_item_text=None, right_item_text=None, regexp=None, regexp_error_msg=None, ordinal=None, required=None, response_layout=None, width_decimal=None, show_item=None, code_ref=None, group_oid=None, is_required=None, disp_sequence=None, branching_equation=None, crf_version_oid=None, hide_from_survey=None, position_row=None, position_column=None, item_data_type=None, measurement_unit_name=None, variable_name=None, label=None, label_plain_text=None, phi_status=None, left_alignment=None, field_width=None, info_text=None, min_value=None, max_value=None, show_validator=None, soft_validation=None, calc_field_equation=None, custom_info1=None, custom_info2=None, stratification_variable=None, show_response_set_value_too=None, study_dictionary=None, default_value=None, subject_group=None, required_query_description=None, warning_when_left_empty=None, dynamic_list_rs_values_eq=None, dynamic_list_type=None, dynamic_list_no_duplicates=None, used_in_dys_fields=None, econsent_signature=None, local_vars_configuration=None):  # noqa: E501
        """CRFItemMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._item_metadata_oid = None
        self._column_number = None
        self._page_number_label = None
        self._question_number_label = None
        self._left_item_text = None
        self._right_item_text = None
        self._regexp = None
        self._regexp_error_msg = None
        self._ordinal = None
        self._required = None
        self._response_layout = None
        self._width_decimal = None
        self._show_item = None
        self._code_ref = None
        self._group_oid = None
        self._is_required = None
        self._disp_sequence = None
        self._branching_equation = None
        self._crf_version_oid = None
        self._hide_from_survey = None
        self._position_row = None
        self._position_column = None
        self._item_data_type = None
        self._measurement_unit_name = None
        self._variable_name = None
        self._label = None
        self._label_plain_text = None
        self._phi_status = None
        self._left_alignment = None
        self._field_width = None
        self._info_text = None
        self._min_value = None
        self._max_value = None
        self._show_validator = None
        self._soft_validation = None
        self._calc_field_equation = None
        self._custom_info1 = None
        self._custom_info2 = None
        self._stratification_variable = None
        self._show_response_set_value_too = None
        self._study_dictionary = None
        self._default_value = None
        self._subject_group = None
        self._required_query_description = None
        self._warning_when_left_empty = None
        self._dynamic_list_rs_values_eq = None
        self._dynamic_list_type = None
        self._dynamic_list_no_duplicates = None
        self._used_in_dys_fields = None
        self._econsent_signature = None
        self.discriminator = None

        if item_metadata_oid is not None:
            self.item_metadata_oid = item_metadata_oid
        if column_number is not None:
            self.column_number = column_number
        if page_number_label is not None:
            self.page_number_label = page_number_label
        if question_number_label is not None:
            self.question_number_label = question_number_label
        if left_item_text is not None:
            self.left_item_text = left_item_text
        if right_item_text is not None:
            self.right_item_text = right_item_text
        if regexp is not None:
            self.regexp = regexp
        if regexp_error_msg is not None:
            self.regexp_error_msg = regexp_error_msg
        if ordinal is not None:
            self.ordinal = ordinal
        if required is not None:
            self.required = required
        if response_layout is not None:
            self.response_layout = response_layout
        if width_decimal is not None:
            self.width_decimal = width_decimal
        if show_item is not None:
            self.show_item = show_item
        if code_ref is not None:
            self.code_ref = code_ref
        if group_oid is not None:
            self.group_oid = group_oid
        if is_required is not None:
            self.is_required = is_required
        if disp_sequence is not None:
            self.disp_sequence = disp_sequence
        if branching_equation is not None:
            self.branching_equation = branching_equation
        if crf_version_oid is not None:
            self.crf_version_oid = crf_version_oid
        if hide_from_survey is not None:
            self.hide_from_survey = hide_from_survey
        if position_row is not None:
            self.position_row = position_row
        if position_column is not None:
            self.position_column = position_column
        if item_data_type is not None:
            self.item_data_type = item_data_type
        if measurement_unit_name is not None:
            self.measurement_unit_name = measurement_unit_name
        if variable_name is not None:
            self.variable_name = variable_name
        if label is not None:
            self.label = label
        if label_plain_text is not None:
            self.label_plain_text = label_plain_text
        if phi_status is not None:
            self.phi_status = phi_status
        if left_alignment is not None:
            self.left_alignment = left_alignment
        if field_width is not None:
            self.field_width = field_width
        if info_text is not None:
            self.info_text = info_text
        if min_value is not None:
            self.min_value = min_value
        if max_value is not None:
            self.max_value = max_value
        if show_validator is not None:
            self.show_validator = show_validator
        if soft_validation is not None:
            self.soft_validation = soft_validation
        if calc_field_equation is not None:
            self.calc_field_equation = calc_field_equation
        if custom_info1 is not None:
            self.custom_info1 = custom_info1
        if custom_info2 is not None:
            self.custom_info2 = custom_info2
        if stratification_variable is not None:
            self.stratification_variable = stratification_variable
        if show_response_set_value_too is not None:
            self.show_response_set_value_too = show_response_set_value_too
        if study_dictionary is not None:
            self.study_dictionary = study_dictionary
        if default_value is not None:
            self.default_value = default_value
        if subject_group is not None:
            self.subject_group = subject_group
        if required_query_description is not None:
            self.required_query_description = required_query_description
        if warning_when_left_empty is not None:
            self.warning_when_left_empty = warning_when_left_empty
        if dynamic_list_rs_values_eq is not None:
            self.dynamic_list_rs_values_eq = dynamic_list_rs_values_eq
        if dynamic_list_type is not None:
            self.dynamic_list_type = dynamic_list_type
        if dynamic_list_no_duplicates is not None:
            self.dynamic_list_no_duplicates = dynamic_list_no_duplicates
        if used_in_dys_fields is not None:
            self.used_in_dys_fields = used_in_dys_fields
        if econsent_signature is not None:
            self.econsent_signature = econsent_signature

    @property
    def item_metadata_oid(self):
        """Gets the item_metadata_oid of this CRFItemMetadata.  # noqa: E501


        :return: The item_metadata_oid of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._item_metadata_oid

    @item_metadata_oid.setter
    def item_metadata_oid(self, item_metadata_oid):
        """Sets the item_metadata_oid of this CRFItemMetadata.


        :param item_metadata_oid: The item_metadata_oid of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._item_metadata_oid = item_metadata_oid

    @property
    def column_number(self):
        """Gets the column_number of this CRFItemMetadata.  # noqa: E501


        :return: The column_number of this CRFItemMetadata.  # noqa: E501
        :rtype: int
        """
        return self._column_number

    @column_number.setter
    def column_number(self, column_number):
        """Sets the column_number of this CRFItemMetadata.


        :param column_number: The column_number of this CRFItemMetadata.  # noqa: E501
        :type: int
        """

        self._column_number = column_number

    @property
    def page_number_label(self):
        """Gets the page_number_label of this CRFItemMetadata.  # noqa: E501


        :return: The page_number_label of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._page_number_label

    @page_number_label.setter
    def page_number_label(self, page_number_label):
        """Sets the page_number_label of this CRFItemMetadata.


        :param page_number_label: The page_number_label of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._page_number_label = page_number_label

    @property
    def question_number_label(self):
        """Gets the question_number_label of this CRFItemMetadata.  # noqa: E501


        :return: The question_number_label of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._question_number_label

    @question_number_label.setter
    def question_number_label(self, question_number_label):
        """Sets the question_number_label of this CRFItemMetadata.


        :param question_number_label: The question_number_label of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._question_number_label = question_number_label

    @property
    def left_item_text(self):
        """Gets the left_item_text of this CRFItemMetadata.  # noqa: E501


        :return: The left_item_text of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._left_item_text

    @left_item_text.setter
    def left_item_text(self, left_item_text):
        """Sets the left_item_text of this CRFItemMetadata.


        :param left_item_text: The left_item_text of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._left_item_text = left_item_text

    @property
    def right_item_text(self):
        """Gets the right_item_text of this CRFItemMetadata.  # noqa: E501


        :return: The right_item_text of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._right_item_text

    @right_item_text.setter
    def right_item_text(self, right_item_text):
        """Sets the right_item_text of this CRFItemMetadata.


        :param right_item_text: The right_item_text of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._right_item_text = right_item_text

    @property
    def regexp(self):
        """Gets the regexp of this CRFItemMetadata.  # noqa: E501


        :return: The regexp of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._regexp

    @regexp.setter
    def regexp(self, regexp):
        """Sets the regexp of this CRFItemMetadata.


        :param regexp: The regexp of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._regexp = regexp

    @property
    def regexp_error_msg(self):
        """Gets the regexp_error_msg of this CRFItemMetadata.  # noqa: E501


        :return: The regexp_error_msg of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._regexp_error_msg

    @regexp_error_msg.setter
    def regexp_error_msg(self, regexp_error_msg):
        """Sets the regexp_error_msg of this CRFItemMetadata.


        :param regexp_error_msg: The regexp_error_msg of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._regexp_error_msg = regexp_error_msg

    @property
    def ordinal(self):
        """Gets the ordinal of this CRFItemMetadata.  # noqa: E501


        :return: The ordinal of this CRFItemMetadata.  # noqa: E501
        :rtype: int
        """
        return self._ordinal

    @ordinal.setter
    def ordinal(self, ordinal):
        """Sets the ordinal of this CRFItemMetadata.


        :param ordinal: The ordinal of this CRFItemMetadata.  # noqa: E501
        :type: int
        """

        self._ordinal = ordinal

    @property
    def required(self):
        """Gets the required of this CRFItemMetadata.  # noqa: E501


        :return: The required of this CRFItemMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this CRFItemMetadata.


        :param required: The required of this CRFItemMetadata.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def response_layout(self):
        """Gets the response_layout of this CRFItemMetadata.  # noqa: E501


        :return: The response_layout of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._response_layout

    @response_layout.setter
    def response_layout(self, response_layout):
        """Sets the response_layout of this CRFItemMetadata.


        :param response_layout: The response_layout of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._response_layout = response_layout

    @property
    def width_decimal(self):
        """Gets the width_decimal of this CRFItemMetadata.  # noqa: E501


        :return: The width_decimal of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._width_decimal

    @width_decimal.setter
    def width_decimal(self, width_decimal):
        """Sets the width_decimal of this CRFItemMetadata.


        :param width_decimal: The width_decimal of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._width_decimal = width_decimal

    @property
    def show_item(self):
        """Gets the show_item of this CRFItemMetadata.  # noqa: E501


        :return: The show_item of this CRFItemMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._show_item

    @show_item.setter
    def show_item(self, show_item):
        """Sets the show_item of this CRFItemMetadata.


        :param show_item: The show_item of this CRFItemMetadata.  # noqa: E501
        :type: bool
        """

        self._show_item = show_item

    @property
    def code_ref(self):
        """Gets the code_ref of this CRFItemMetadata.  # noqa: E501


        :return: The code_ref of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._code_ref

    @code_ref.setter
    def code_ref(self, code_ref):
        """Sets the code_ref of this CRFItemMetadata.


        :param code_ref: The code_ref of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._code_ref = code_ref

    @property
    def group_oid(self):
        """Gets the group_oid of this CRFItemMetadata.  # noqa: E501


        :return: The group_oid of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._group_oid

    @group_oid.setter
    def group_oid(self, group_oid):
        """Sets the group_oid of this CRFItemMetadata.


        :param group_oid: The group_oid of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._group_oid = group_oid

    @property
    def is_required(self):
        """Gets the is_required of this CRFItemMetadata.  # noqa: E501


        :return: The is_required of this CRFItemMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this CRFItemMetadata.


        :param is_required: The is_required of this CRFItemMetadata.  # noqa: E501
        :type: bool
        """

        self._is_required = is_required

    @property
    def disp_sequence(self):
        """Gets the disp_sequence of this CRFItemMetadata.  # noqa: E501


        :return: The disp_sequence of this CRFItemMetadata.  # noqa: E501
        :rtype: int
        """
        return self._disp_sequence

    @disp_sequence.setter
    def disp_sequence(self, disp_sequence):
        """Sets the disp_sequence of this CRFItemMetadata.


        :param disp_sequence: The disp_sequence of this CRFItemMetadata.  # noqa: E501
        :type: int
        """

        self._disp_sequence = disp_sequence

    @property
    def branching_equation(self):
        """Gets the branching_equation of this CRFItemMetadata.  # noqa: E501


        :return: The branching_equation of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._branching_equation

    @branching_equation.setter
    def branching_equation(self, branching_equation):
        """Sets the branching_equation of this CRFItemMetadata.


        :param branching_equation: The branching_equation of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._branching_equation = branching_equation

    @property
    def crf_version_oid(self):
        """Gets the crf_version_oid of this CRFItemMetadata.  # noqa: E501


        :return: The crf_version_oid of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._crf_version_oid

    @crf_version_oid.setter
    def crf_version_oid(self, crf_version_oid):
        """Sets the crf_version_oid of this CRFItemMetadata.


        :param crf_version_oid: The crf_version_oid of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._crf_version_oid = crf_version_oid

    @property
    def hide_from_survey(self):
        """Gets the hide_from_survey of this CRFItemMetadata.  # noqa: E501


        :return: The hide_from_survey of this CRFItemMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._hide_from_survey

    @hide_from_survey.setter
    def hide_from_survey(self, hide_from_survey):
        """Sets the hide_from_survey of this CRFItemMetadata.


        :param hide_from_survey: The hide_from_survey of this CRFItemMetadata.  # noqa: E501
        :type: bool
        """

        self._hide_from_survey = hide_from_survey

    @property
    def position_row(self):
        """Gets the position_row of this CRFItemMetadata.  # noqa: E501


        :return: The position_row of this CRFItemMetadata.  # noqa: E501
        :rtype: int
        """
        return self._position_row

    @position_row.setter
    def position_row(self, position_row):
        """Sets the position_row of this CRFItemMetadata.


        :param position_row: The position_row of this CRFItemMetadata.  # noqa: E501
        :type: int
        """

        self._position_row = position_row

    @property
    def position_column(self):
        """Gets the position_column of this CRFItemMetadata.  # noqa: E501


        :return: The position_column of this CRFItemMetadata.  # noqa: E501
        :rtype: int
        """
        return self._position_column

    @position_column.setter
    def position_column(self, position_column):
        """Sets the position_column of this CRFItemMetadata.


        :param position_column: The position_column of this CRFItemMetadata.  # noqa: E501
        :type: int
        """

        self._position_column = position_column

    @property
    def item_data_type(self):
        """Gets the item_data_type of this CRFItemMetadata.  # noqa: E501


        :return: The item_data_type of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._item_data_type

    @item_data_type.setter
    def item_data_type(self, item_data_type):
        """Sets the item_data_type of this CRFItemMetadata.


        :param item_data_type: The item_data_type of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._item_data_type = item_data_type

    @property
    def measurement_unit_name(self):
        """Gets the measurement_unit_name of this CRFItemMetadata.  # noqa: E501


        :return: The measurement_unit_name of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._measurement_unit_name

    @measurement_unit_name.setter
    def measurement_unit_name(self, measurement_unit_name):
        """Sets the measurement_unit_name of this CRFItemMetadata.


        :param measurement_unit_name: The measurement_unit_name of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._measurement_unit_name = measurement_unit_name

    @property
    def variable_name(self):
        """Gets the variable_name of this CRFItemMetadata.  # noqa: E501


        :return: The variable_name of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._variable_name

    @variable_name.setter
    def variable_name(self, variable_name):
        """Sets the variable_name of this CRFItemMetadata.


        :param variable_name: The variable_name of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._variable_name = variable_name

    @property
    def label(self):
        """Gets the label of this CRFItemMetadata.  # noqa: E501


        :return: The label of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CRFItemMetadata.


        :param label: The label of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def label_plain_text(self):
        """Gets the label_plain_text of this CRFItemMetadata.  # noqa: E501


        :return: The label_plain_text of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._label_plain_text

    @label_plain_text.setter
    def label_plain_text(self, label_plain_text):
        """Sets the label_plain_text of this CRFItemMetadata.


        :param label_plain_text: The label_plain_text of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._label_plain_text = label_plain_text

    @property
    def phi_status(self):
        """Gets the phi_status of this CRFItemMetadata.  # noqa: E501


        :return: The phi_status of this CRFItemMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._phi_status

    @phi_status.setter
    def phi_status(self, phi_status):
        """Sets the phi_status of this CRFItemMetadata.


        :param phi_status: The phi_status of this CRFItemMetadata.  # noqa: E501
        :type: bool
        """

        self._phi_status = phi_status

    @property
    def left_alignment(self):
        """Gets the left_alignment of this CRFItemMetadata.  # noqa: E501


        :return: The left_alignment of this CRFItemMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._left_alignment

    @left_alignment.setter
    def left_alignment(self, left_alignment):
        """Sets the left_alignment of this CRFItemMetadata.


        :param left_alignment: The left_alignment of this CRFItemMetadata.  # noqa: E501
        :type: bool
        """

        self._left_alignment = left_alignment

    @property
    def field_width(self):
        """Gets the field_width of this CRFItemMetadata.  # noqa: E501


        :return: The field_width of this CRFItemMetadata.  # noqa: E501
        :rtype: int
        """
        return self._field_width

    @field_width.setter
    def field_width(self, field_width):
        """Sets the field_width of this CRFItemMetadata.


        :param field_width: The field_width of this CRFItemMetadata.  # noqa: E501
        :type: int
        """

        self._field_width = field_width

    @property
    def info_text(self):
        """Gets the info_text of this CRFItemMetadata.  # noqa: E501


        :return: The info_text of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._info_text

    @info_text.setter
    def info_text(self, info_text):
        """Sets the info_text of this CRFItemMetadata.


        :param info_text: The info_text of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._info_text = info_text

    @property
    def min_value(self):
        """Gets the min_value of this CRFItemMetadata.  # noqa: E501


        :return: The min_value of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this CRFItemMetadata.


        :param min_value: The min_value of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this CRFItemMetadata.  # noqa: E501


        :return: The max_value of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this CRFItemMetadata.


        :param max_value: The max_value of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._max_value = max_value

    @property
    def show_validator(self):
        """Gets the show_validator of this CRFItemMetadata.  # noqa: E501


        :return: The show_validator of this CRFItemMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._show_validator

    @show_validator.setter
    def show_validator(self, show_validator):
        """Sets the show_validator of this CRFItemMetadata.


        :param show_validator: The show_validator of this CRFItemMetadata.  # noqa: E501
        :type: bool
        """

        self._show_validator = show_validator

    @property
    def soft_validation(self):
        """Gets the soft_validation of this CRFItemMetadata.  # noqa: E501


        :return: The soft_validation of this CRFItemMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._soft_validation

    @soft_validation.setter
    def soft_validation(self, soft_validation):
        """Sets the soft_validation of this CRFItemMetadata.


        :param soft_validation: The soft_validation of this CRFItemMetadata.  # noqa: E501
        :type: bool
        """

        self._soft_validation = soft_validation

    @property
    def calc_field_equation(self):
        """Gets the calc_field_equation of this CRFItemMetadata.  # noqa: E501


        :return: The calc_field_equation of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._calc_field_equation

    @calc_field_equation.setter
    def calc_field_equation(self, calc_field_equation):
        """Sets the calc_field_equation of this CRFItemMetadata.


        :param calc_field_equation: The calc_field_equation of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._calc_field_equation = calc_field_equation

    @property
    def custom_info1(self):
        """Gets the custom_info1 of this CRFItemMetadata.  # noqa: E501


        :return: The custom_info1 of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._custom_info1

    @custom_info1.setter
    def custom_info1(self, custom_info1):
        """Sets the custom_info1 of this CRFItemMetadata.


        :param custom_info1: The custom_info1 of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._custom_info1 = custom_info1

    @property
    def custom_info2(self):
        """Gets the custom_info2 of this CRFItemMetadata.  # noqa: E501


        :return: The custom_info2 of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._custom_info2

    @custom_info2.setter
    def custom_info2(self, custom_info2):
        """Sets the custom_info2 of this CRFItemMetadata.


        :param custom_info2: The custom_info2 of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._custom_info2 = custom_info2

    @property
    def stratification_variable(self):
        """Gets the stratification_variable of this CRFItemMetadata.  # noqa: E501


        :return: The stratification_variable of this CRFItemMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._stratification_variable

    @stratification_variable.setter
    def stratification_variable(self, stratification_variable):
        """Sets the stratification_variable of this CRFItemMetadata.


        :param stratification_variable: The stratification_variable of this CRFItemMetadata.  # noqa: E501
        :type: bool
        """

        self._stratification_variable = stratification_variable

    @property
    def show_response_set_value_too(self):
        """Gets the show_response_set_value_too of this CRFItemMetadata.  # noqa: E501


        :return: The show_response_set_value_too of this CRFItemMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._show_response_set_value_too

    @show_response_set_value_too.setter
    def show_response_set_value_too(self, show_response_set_value_too):
        """Sets the show_response_set_value_too of this CRFItemMetadata.


        :param show_response_set_value_too: The show_response_set_value_too of this CRFItemMetadata.  # noqa: E501
        :type: bool
        """

        self._show_response_set_value_too = show_response_set_value_too

    @property
    def study_dictionary(self):
        """Gets the study_dictionary of this CRFItemMetadata.  # noqa: E501


        :return: The study_dictionary of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._study_dictionary

    @study_dictionary.setter
    def study_dictionary(self, study_dictionary):
        """Sets the study_dictionary of this CRFItemMetadata.


        :param study_dictionary: The study_dictionary of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._study_dictionary = study_dictionary

    @property
    def default_value(self):
        """Gets the default_value of this CRFItemMetadata.  # noqa: E501


        :return: The default_value of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this CRFItemMetadata.


        :param default_value: The default_value of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def subject_group(self):
        """Gets the subject_group of this CRFItemMetadata.  # noqa: E501


        :return: The subject_group of this CRFItemMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._subject_group

    @subject_group.setter
    def subject_group(self, subject_group):
        """Sets the subject_group of this CRFItemMetadata.


        :param subject_group: The subject_group of this CRFItemMetadata.  # noqa: E501
        :type: bool
        """

        self._subject_group = subject_group

    @property
    def required_query_description(self):
        """Gets the required_query_description of this CRFItemMetadata.  # noqa: E501


        :return: The required_query_description of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._required_query_description

    @required_query_description.setter
    def required_query_description(self, required_query_description):
        """Sets the required_query_description of this CRFItemMetadata.


        :param required_query_description: The required_query_description of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._required_query_description = required_query_description

    @property
    def warning_when_left_empty(self):
        """Gets the warning_when_left_empty of this CRFItemMetadata.  # noqa: E501


        :return: The warning_when_left_empty of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._warning_when_left_empty

    @warning_when_left_empty.setter
    def warning_when_left_empty(self, warning_when_left_empty):
        """Sets the warning_when_left_empty of this CRFItemMetadata.


        :param warning_when_left_empty: The warning_when_left_empty of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._warning_when_left_empty = warning_when_left_empty

    @property
    def dynamic_list_rs_values_eq(self):
        """Gets the dynamic_list_rs_values_eq of this CRFItemMetadata.  # noqa: E501


        :return: The dynamic_list_rs_values_eq of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_list_rs_values_eq

    @dynamic_list_rs_values_eq.setter
    def dynamic_list_rs_values_eq(self, dynamic_list_rs_values_eq):
        """Sets the dynamic_list_rs_values_eq of this CRFItemMetadata.


        :param dynamic_list_rs_values_eq: The dynamic_list_rs_values_eq of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._dynamic_list_rs_values_eq = dynamic_list_rs_values_eq

    @property
    def dynamic_list_type(self):
        """Gets the dynamic_list_type of this CRFItemMetadata.  # noqa: E501


        :return: The dynamic_list_type of this CRFItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_list_type

    @dynamic_list_type.setter
    def dynamic_list_type(self, dynamic_list_type):
        """Sets the dynamic_list_type of this CRFItemMetadata.


        :param dynamic_list_type: The dynamic_list_type of this CRFItemMetadata.  # noqa: E501
        :type: str
        """

        self._dynamic_list_type = dynamic_list_type

    @property
    def dynamic_list_no_duplicates(self):
        """Gets the dynamic_list_no_duplicates of this CRFItemMetadata.  # noqa: E501


        :return: The dynamic_list_no_duplicates of this CRFItemMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._dynamic_list_no_duplicates

    @dynamic_list_no_duplicates.setter
    def dynamic_list_no_duplicates(self, dynamic_list_no_duplicates):
        """Sets the dynamic_list_no_duplicates of this CRFItemMetadata.


        :param dynamic_list_no_duplicates: The dynamic_list_no_duplicates of this CRFItemMetadata.  # noqa: E501
        :type: bool
        """

        self._dynamic_list_no_duplicates = dynamic_list_no_duplicates

    @property
    def used_in_dys_fields(self):
        """Gets the used_in_dys_fields of this CRFItemMetadata.  # noqa: E501


        :return: The used_in_dys_fields of this CRFItemMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._used_in_dys_fields

    @used_in_dys_fields.setter
    def used_in_dys_fields(self, used_in_dys_fields):
        """Sets the used_in_dys_fields of this CRFItemMetadata.


        :param used_in_dys_fields: The used_in_dys_fields of this CRFItemMetadata.  # noqa: E501
        :type: bool
        """

        self._used_in_dys_fields = used_in_dys_fields

    @property
    def econsent_signature(self):
        """Gets the econsent_signature of this CRFItemMetadata.  # noqa: E501


        :return: The econsent_signature of this CRFItemMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._econsent_signature

    @econsent_signature.setter
    def econsent_signature(self, econsent_signature):
        """Sets the econsent_signature of this CRFItemMetadata.


        :param econsent_signature: The econsent_signature of this CRFItemMetadata.  # noqa: E501
        :type: bool
        """

        self._econsent_signature = econsent_signature

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CRFItemMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CRFItemMetadata):
            return True

        return self.to_dict() != other.to_dict()
