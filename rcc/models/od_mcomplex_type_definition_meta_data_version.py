# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ODMcomplexTypeDefinitionMetaDataVersion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'include': 'ODMcomplexTypeDefinitionInclude',
        'protocol': 'ODMcomplexTypeDefinitionProtocol',
        'study_event_def': 'list[ODMcomplexTypeDefinitionStudyEventDef]',
        'form_def': 'list[ODMcomplexTypeDefinitionFormDef]',
        'item_group_def': 'list[ODMcomplexTypeDefinitionItemGroupDef]',
        'item_def': 'list[ODMcomplexTypeDefinitionItemDef]',
        'repeating_crf_custom_columns_def': 'list[ODMcomplexTypeDefinitionRepeatingCrfCustomColumnsDef]',
        'code_list': 'list[ODMcomplexTypeDefinitionCodeList]',
        'imputation_method': 'list[ODMcomplexTypeDefinitionImputationMethod]',
        'presentation': 'list[ODMcomplexTypeDefinitionPresentation]',
        'condition_def': 'list[ODMcomplexTypeDefinitionConditionDef]',
        'method_def': 'list[ODMcomplexTypeDefinitionMethodDef]',
        'oid': 'str',
        'name': 'str',
        'description': 'str'
    }

    attribute_map = {
        'include': 'include',
        'protocol': 'protocol',
        'study_event_def': 'studyEventDef',
        'form_def': 'formDef',
        'item_group_def': 'itemGroupDef',
        'item_def': 'itemDef',
        'repeating_crf_custom_columns_def': 'repeatingCrfCustomColumnsDef',
        'code_list': 'codeList',
        'imputation_method': 'imputationMethod',
        'presentation': 'presentation',
        'condition_def': 'conditionDef',
        'method_def': 'methodDef',
        'oid': 'oid',
        'name': 'name',
        'description': 'description'
    }

    def __init__(self, include=None, protocol=None, study_event_def=None, form_def=None, item_group_def=None, item_def=None, repeating_crf_custom_columns_def=None, code_list=None, imputation_method=None, presentation=None, condition_def=None, method_def=None, oid=None, name=None, description=None, local_vars_configuration=None):  # noqa: E501
        """ODMcomplexTypeDefinitionMetaDataVersion - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._include = None
        self._protocol = None
        self._study_event_def = None
        self._form_def = None
        self._item_group_def = None
        self._item_def = None
        self._repeating_crf_custom_columns_def = None
        self._code_list = None
        self._imputation_method = None
        self._presentation = None
        self._condition_def = None
        self._method_def = None
        self._oid = None
        self._name = None
        self._description = None
        self.discriminator = None

        if include is not None:
            self.include = include
        if protocol is not None:
            self.protocol = protocol
        if study_event_def is not None:
            self.study_event_def = study_event_def
        if form_def is not None:
            self.form_def = form_def
        if item_group_def is not None:
            self.item_group_def = item_group_def
        if item_def is not None:
            self.item_def = item_def
        if repeating_crf_custom_columns_def is not None:
            self.repeating_crf_custom_columns_def = repeating_crf_custom_columns_def
        if code_list is not None:
            self.code_list = code_list
        if imputation_method is not None:
            self.imputation_method = imputation_method
        if presentation is not None:
            self.presentation = presentation
        if condition_def is not None:
            self.condition_def = condition_def
        if method_def is not None:
            self.method_def = method_def
        if oid is not None:
            self.oid = oid
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description

    @property
    def include(self):
        """Gets the include of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501


        :return: The include of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionInclude
        """
        return self._include

    @include.setter
    def include(self, include):
        """Sets the include of this ODMcomplexTypeDefinitionMetaDataVersion.


        :param include: The include of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :type: ODMcomplexTypeDefinitionInclude
        """

        self._include = include

    @property
    def protocol(self):
        """Gets the protocol of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501


        :return: The protocol of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionProtocol
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ODMcomplexTypeDefinitionMetaDataVersion.


        :param protocol: The protocol of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :type: ODMcomplexTypeDefinitionProtocol
        """

        self._protocol = protocol

    @property
    def study_event_def(self):
        """Gets the study_event_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501


        :return: The study_event_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionStudyEventDef]
        """
        return self._study_event_def

    @study_event_def.setter
    def study_event_def(self, study_event_def):
        """Sets the study_event_def of this ODMcomplexTypeDefinitionMetaDataVersion.


        :param study_event_def: The study_event_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionStudyEventDef]
        """

        self._study_event_def = study_event_def

    @property
    def form_def(self):
        """Gets the form_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501


        :return: The form_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionFormDef]
        """
        return self._form_def

    @form_def.setter
    def form_def(self, form_def):
        """Sets the form_def of this ODMcomplexTypeDefinitionMetaDataVersion.


        :param form_def: The form_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionFormDef]
        """

        self._form_def = form_def

    @property
    def item_group_def(self):
        """Gets the item_group_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501


        :return: The item_group_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionItemGroupDef]
        """
        return self._item_group_def

    @item_group_def.setter
    def item_group_def(self, item_group_def):
        """Sets the item_group_def of this ODMcomplexTypeDefinitionMetaDataVersion.


        :param item_group_def: The item_group_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionItemGroupDef]
        """

        self._item_group_def = item_group_def

    @property
    def item_def(self):
        """Gets the item_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501


        :return: The item_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionItemDef]
        """
        return self._item_def

    @item_def.setter
    def item_def(self, item_def):
        """Sets the item_def of this ODMcomplexTypeDefinitionMetaDataVersion.


        :param item_def: The item_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionItemDef]
        """

        self._item_def = item_def

    @property
    def repeating_crf_custom_columns_def(self):
        """Gets the repeating_crf_custom_columns_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501


        :return: The repeating_crf_custom_columns_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionRepeatingCrfCustomColumnsDef]
        """
        return self._repeating_crf_custom_columns_def

    @repeating_crf_custom_columns_def.setter
    def repeating_crf_custom_columns_def(self, repeating_crf_custom_columns_def):
        """Sets the repeating_crf_custom_columns_def of this ODMcomplexTypeDefinitionMetaDataVersion.


        :param repeating_crf_custom_columns_def: The repeating_crf_custom_columns_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionRepeatingCrfCustomColumnsDef]
        """

        self._repeating_crf_custom_columns_def = repeating_crf_custom_columns_def

    @property
    def code_list(self):
        """Gets the code_list of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501


        :return: The code_list of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionCodeList]
        """
        return self._code_list

    @code_list.setter
    def code_list(self, code_list):
        """Sets the code_list of this ODMcomplexTypeDefinitionMetaDataVersion.


        :param code_list: The code_list of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionCodeList]
        """

        self._code_list = code_list

    @property
    def imputation_method(self):
        """Gets the imputation_method of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501


        :return: The imputation_method of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionImputationMethod]
        """
        return self._imputation_method

    @imputation_method.setter
    def imputation_method(self, imputation_method):
        """Sets the imputation_method of this ODMcomplexTypeDefinitionMetaDataVersion.


        :param imputation_method: The imputation_method of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionImputationMethod]
        """

        self._imputation_method = imputation_method

    @property
    def presentation(self):
        """Gets the presentation of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501


        :return: The presentation of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionPresentation]
        """
        return self._presentation

    @presentation.setter
    def presentation(self, presentation):
        """Sets the presentation of this ODMcomplexTypeDefinitionMetaDataVersion.


        :param presentation: The presentation of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionPresentation]
        """

        self._presentation = presentation

    @property
    def condition_def(self):
        """Gets the condition_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501


        :return: The condition_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionConditionDef]
        """
        return self._condition_def

    @condition_def.setter
    def condition_def(self, condition_def):
        """Sets the condition_def of this ODMcomplexTypeDefinitionMetaDataVersion.


        :param condition_def: The condition_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionConditionDef]
        """

        self._condition_def = condition_def

    @property
    def method_def(self):
        """Gets the method_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501


        :return: The method_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionMethodDef]
        """
        return self._method_def

    @method_def.setter
    def method_def(self, method_def):
        """Sets the method_def of this ODMcomplexTypeDefinitionMetaDataVersion.


        :param method_def: The method_def of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionMethodDef]
        """

        self._method_def = method_def

    @property
    def oid(self):
        """Gets the oid of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501


        :return: The oid of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this ODMcomplexTypeDefinitionMetaDataVersion.


        :param oid: The oid of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :type: str
        """

        self._oid = oid

    @property
    def name(self):
        """Gets the name of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501


        :return: The name of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ODMcomplexTypeDefinitionMetaDataVersion.


        :param name: The name of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501


        :return: The description of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ODMcomplexTypeDefinitionMetaDataVersion.


        :param description: The description of this ODMcomplexTypeDefinitionMetaDataVersion.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionMetaDataVersion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionMetaDataVersion):
            return True

        return self.to_dict() != other.to_dict()
