# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class DiskFileRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'source_name': 'str',
        'content_type': 'str',
        'file_size': 'int',
        'temporary': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'source_name': 'sourceName',
        'content_type': 'contentType',
        'file_size': 'fileSize',
        'temporary': 'temporary'
    }

    def __init__(self, id=None, name=None, source_name=None, content_type=None, file_size=None, temporary=None, local_vars_configuration=None):  # noqa: E501
        """DiskFileRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._source_name = None
        self._content_type = None
        self._file_size = None
        self._temporary = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if source_name is not None:
            self.source_name = source_name
        if content_type is not None:
            self.content_type = content_type
        if file_size is not None:
            self.file_size = file_size
        if temporary is not None:
            self.temporary = temporary

    @property
    def id(self):
        """Gets the id of this DiskFileRpc.  # noqa: E501


        :return: The id of this DiskFileRpc.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiskFileRpc.


        :param id: The id of this DiskFileRpc.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DiskFileRpc.  # noqa: E501


        :return: The name of this DiskFileRpc.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DiskFileRpc.


        :param name: The name of this DiskFileRpc.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def source_name(self):
        """Gets the source_name of this DiskFileRpc.  # noqa: E501


        :return: The source_name of this DiskFileRpc.  # noqa: E501
        :rtype: str
        """
        return self._source_name

    @source_name.setter
    def source_name(self, source_name):
        """Sets the source_name of this DiskFileRpc.


        :param source_name: The source_name of this DiskFileRpc.  # noqa: E501
        :type: str
        """

        self._source_name = source_name

    @property
    def content_type(self):
        """Gets the content_type of this DiskFileRpc.  # noqa: E501


        :return: The content_type of this DiskFileRpc.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this DiskFileRpc.


        :param content_type: The content_type of this DiskFileRpc.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def file_size(self):
        """Gets the file_size of this DiskFileRpc.  # noqa: E501


        :return: The file_size of this DiskFileRpc.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this DiskFileRpc.


        :param file_size: The file_size of this DiskFileRpc.  # noqa: E501
        :type: int
        """

        self._file_size = file_size

    @property
    def temporary(self):
        """Gets the temporary of this DiskFileRpc.  # noqa: E501


        :return: The temporary of this DiskFileRpc.  # noqa: E501
        :rtype: bool
        """
        return self._temporary

    @temporary.setter
    def temporary(self, temporary):
        """Sets the temporary of this DiskFileRpc.


        :param temporary: The temporary of this DiskFileRpc.  # noqa: E501
        :type: bool
        """

        self._temporary = temporary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiskFileRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DiskFileRpc):
            return True

        return self.to_dict() != other.to_dict()
