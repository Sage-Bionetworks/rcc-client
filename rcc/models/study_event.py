# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class StudyEvent(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'study_event_crf': 'list[StudyEventCrf]',
        'subject_oid': 'str',
        'event_definition_oid': 'str',
        'location': 'str',
        'occurence': 'int',
        'date_start': 'datetime',
        'date_end': 'datetime',
        'status': 'str',
        'start_time_flag': 'bool',
        'end_time_flag': 'bool',
        'reference_visit_oid': 'str',
        'signature_date': 'datetime',
        'signature_owner': 'str',
        'signature_history': 'bool',
        'states': 'str',
        'study_event_oid': 'str',
        'repeating_form_parent_oid': 'str',
        'migration_locked': 'bool'
    }

    attribute_map = {
        'study_event_crf': 'studyEventCrf',
        'subject_oid': 'subjectOID',
        'event_definition_oid': 'eventDefinitionOID',
        'location': 'location',
        'occurence': 'occurence',
        'date_start': 'dateStart',
        'date_end': 'dateEnd',
        'status': 'status',
        'start_time_flag': 'startTimeFlag',
        'end_time_flag': 'endTimeFlag',
        'reference_visit_oid': 'referenceVisitOID',
        'signature_date': 'signatureDate',
        'signature_owner': 'signatureOwner',
        'signature_history': 'signatureHistory',
        'states': 'states',
        'study_event_oid': 'studyEventOID',
        'repeating_form_parent_oid': 'repeatingFormParentOID',
        'migration_locked': 'migrationLocked'
    }

    def __init__(self, study_event_crf=None, subject_oid=None, event_definition_oid=None, location=None, occurence=None, date_start=None, date_end=None, status=None, start_time_flag=None, end_time_flag=None, reference_visit_oid=None, signature_date=None, signature_owner=None, signature_history=None, states=None, study_event_oid=None, repeating_form_parent_oid=None, migration_locked=None, local_vars_configuration=None):  # noqa: E501
        """StudyEvent - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._study_event_crf = None
        self._subject_oid = None
        self._event_definition_oid = None
        self._location = None
        self._occurence = None
        self._date_start = None
        self._date_end = None
        self._status = None
        self._start_time_flag = None
        self._end_time_flag = None
        self._reference_visit_oid = None
        self._signature_date = None
        self._signature_owner = None
        self._signature_history = None
        self._states = None
        self._study_event_oid = None
        self._repeating_form_parent_oid = None
        self._migration_locked = None
        self.discriminator = None

        if study_event_crf is not None:
            self.study_event_crf = study_event_crf
        if subject_oid is not None:
            self.subject_oid = subject_oid
        if event_definition_oid is not None:
            self.event_definition_oid = event_definition_oid
        if location is not None:
            self.location = location
        if occurence is not None:
            self.occurence = occurence
        if date_start is not None:
            self.date_start = date_start
        if date_end is not None:
            self.date_end = date_end
        if status is not None:
            self.status = status
        if start_time_flag is not None:
            self.start_time_flag = start_time_flag
        if end_time_flag is not None:
            self.end_time_flag = end_time_flag
        if reference_visit_oid is not None:
            self.reference_visit_oid = reference_visit_oid
        if signature_date is not None:
            self.signature_date = signature_date
        if signature_owner is not None:
            self.signature_owner = signature_owner
        if signature_history is not None:
            self.signature_history = signature_history
        if states is not None:
            self.states = states
        if study_event_oid is not None:
            self.study_event_oid = study_event_oid
        if repeating_form_parent_oid is not None:
            self.repeating_form_parent_oid = repeating_form_parent_oid
        if migration_locked is not None:
            self.migration_locked = migration_locked

    @property
    def study_event_crf(self):
        """Gets the study_event_crf of this StudyEvent.  # noqa: E501


        :return: The study_event_crf of this StudyEvent.  # noqa: E501
        :rtype: list[StudyEventCrf]
        """
        return self._study_event_crf

    @study_event_crf.setter
    def study_event_crf(self, study_event_crf):
        """Sets the study_event_crf of this StudyEvent.


        :param study_event_crf: The study_event_crf of this StudyEvent.  # noqa: E501
        :type: list[StudyEventCrf]
        """

        self._study_event_crf = study_event_crf

    @property
    def subject_oid(self):
        """Gets the subject_oid of this StudyEvent.  # noqa: E501


        :return: The subject_oid of this StudyEvent.  # noqa: E501
        :rtype: str
        """
        return self._subject_oid

    @subject_oid.setter
    def subject_oid(self, subject_oid):
        """Sets the subject_oid of this StudyEvent.


        :param subject_oid: The subject_oid of this StudyEvent.  # noqa: E501
        :type: str
        """

        self._subject_oid = subject_oid

    @property
    def event_definition_oid(self):
        """Gets the event_definition_oid of this StudyEvent.  # noqa: E501


        :return: The event_definition_oid of this StudyEvent.  # noqa: E501
        :rtype: str
        """
        return self._event_definition_oid

    @event_definition_oid.setter
    def event_definition_oid(self, event_definition_oid):
        """Sets the event_definition_oid of this StudyEvent.


        :param event_definition_oid: The event_definition_oid of this StudyEvent.  # noqa: E501
        :type: str
        """

        self._event_definition_oid = event_definition_oid

    @property
    def location(self):
        """Gets the location of this StudyEvent.  # noqa: E501


        :return: The location of this StudyEvent.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this StudyEvent.


        :param location: The location of this StudyEvent.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def occurence(self):
        """Gets the occurence of this StudyEvent.  # noqa: E501


        :return: The occurence of this StudyEvent.  # noqa: E501
        :rtype: int
        """
        return self._occurence

    @occurence.setter
    def occurence(self, occurence):
        """Sets the occurence of this StudyEvent.


        :param occurence: The occurence of this StudyEvent.  # noqa: E501
        :type: int
        """

        self._occurence = occurence

    @property
    def date_start(self):
        """Gets the date_start of this StudyEvent.  # noqa: E501


        :return: The date_start of this StudyEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._date_start

    @date_start.setter
    def date_start(self, date_start):
        """Sets the date_start of this StudyEvent.


        :param date_start: The date_start of this StudyEvent.  # noqa: E501
        :type: datetime
        """

        self._date_start = date_start

    @property
    def date_end(self):
        """Gets the date_end of this StudyEvent.  # noqa: E501


        :return: The date_end of this StudyEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._date_end

    @date_end.setter
    def date_end(self, date_end):
        """Sets the date_end of this StudyEvent.


        :param date_end: The date_end of this StudyEvent.  # noqa: E501
        :type: datetime
        """

        self._date_end = date_end

    @property
    def status(self):
        """Gets the status of this StudyEvent.  # noqa: E501


        :return: The status of this StudyEvent.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StudyEvent.


        :param status: The status of this StudyEvent.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def start_time_flag(self):
        """Gets the start_time_flag of this StudyEvent.  # noqa: E501


        :return: The start_time_flag of this StudyEvent.  # noqa: E501
        :rtype: bool
        """
        return self._start_time_flag

    @start_time_flag.setter
    def start_time_flag(self, start_time_flag):
        """Sets the start_time_flag of this StudyEvent.


        :param start_time_flag: The start_time_flag of this StudyEvent.  # noqa: E501
        :type: bool
        """

        self._start_time_flag = start_time_flag

    @property
    def end_time_flag(self):
        """Gets the end_time_flag of this StudyEvent.  # noqa: E501


        :return: The end_time_flag of this StudyEvent.  # noqa: E501
        :rtype: bool
        """
        return self._end_time_flag

    @end_time_flag.setter
    def end_time_flag(self, end_time_flag):
        """Sets the end_time_flag of this StudyEvent.


        :param end_time_flag: The end_time_flag of this StudyEvent.  # noqa: E501
        :type: bool
        """

        self._end_time_flag = end_time_flag

    @property
    def reference_visit_oid(self):
        """Gets the reference_visit_oid of this StudyEvent.  # noqa: E501


        :return: The reference_visit_oid of this StudyEvent.  # noqa: E501
        :rtype: str
        """
        return self._reference_visit_oid

    @reference_visit_oid.setter
    def reference_visit_oid(self, reference_visit_oid):
        """Sets the reference_visit_oid of this StudyEvent.


        :param reference_visit_oid: The reference_visit_oid of this StudyEvent.  # noqa: E501
        :type: str
        """

        self._reference_visit_oid = reference_visit_oid

    @property
    def signature_date(self):
        """Gets the signature_date of this StudyEvent.  # noqa: E501


        :return: The signature_date of this StudyEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._signature_date

    @signature_date.setter
    def signature_date(self, signature_date):
        """Sets the signature_date of this StudyEvent.


        :param signature_date: The signature_date of this StudyEvent.  # noqa: E501
        :type: datetime
        """

        self._signature_date = signature_date

    @property
    def signature_owner(self):
        """Gets the signature_owner of this StudyEvent.  # noqa: E501


        :return: The signature_owner of this StudyEvent.  # noqa: E501
        :rtype: str
        """
        return self._signature_owner

    @signature_owner.setter
    def signature_owner(self, signature_owner):
        """Sets the signature_owner of this StudyEvent.


        :param signature_owner: The signature_owner of this StudyEvent.  # noqa: E501
        :type: str
        """

        self._signature_owner = signature_owner

    @property
    def signature_history(self):
        """Gets the signature_history of this StudyEvent.  # noqa: E501


        :return: The signature_history of this StudyEvent.  # noqa: E501
        :rtype: bool
        """
        return self._signature_history

    @signature_history.setter
    def signature_history(self, signature_history):
        """Sets the signature_history of this StudyEvent.


        :param signature_history: The signature_history of this StudyEvent.  # noqa: E501
        :type: bool
        """

        self._signature_history = signature_history

    @property
    def states(self):
        """Gets the states of this StudyEvent.  # noqa: E501


        :return: The states of this StudyEvent.  # noqa: E501
        :rtype: str
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this StudyEvent.


        :param states: The states of this StudyEvent.  # noqa: E501
        :type: str
        """

        self._states = states

    @property
    def study_event_oid(self):
        """Gets the study_event_oid of this StudyEvent.  # noqa: E501


        :return: The study_event_oid of this StudyEvent.  # noqa: E501
        :rtype: str
        """
        return self._study_event_oid

    @study_event_oid.setter
    def study_event_oid(self, study_event_oid):
        """Sets the study_event_oid of this StudyEvent.


        :param study_event_oid: The study_event_oid of this StudyEvent.  # noqa: E501
        :type: str
        """

        self._study_event_oid = study_event_oid

    @property
    def repeating_form_parent_oid(self):
        """Gets the repeating_form_parent_oid of this StudyEvent.  # noqa: E501


        :return: The repeating_form_parent_oid of this StudyEvent.  # noqa: E501
        :rtype: str
        """
        return self._repeating_form_parent_oid

    @repeating_form_parent_oid.setter
    def repeating_form_parent_oid(self, repeating_form_parent_oid):
        """Sets the repeating_form_parent_oid of this StudyEvent.


        :param repeating_form_parent_oid: The repeating_form_parent_oid of this StudyEvent.  # noqa: E501
        :type: str
        """

        self._repeating_form_parent_oid = repeating_form_parent_oid

    @property
    def migration_locked(self):
        """Gets the migration_locked of this StudyEvent.  # noqa: E501


        :return: The migration_locked of this StudyEvent.  # noqa: E501
        :rtype: bool
        """
        return self._migration_locked

    @migration_locked.setter
    def migration_locked(self, migration_locked):
        """Sets the migration_locked of this StudyEvent.


        :param migration_locked: The migration_locked of this StudyEvent.  # noqa: E501
        :type: bool
        """

        self._migration_locked = migration_locked

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudyEvent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StudyEvent):
            return True

        return self.to_dict() != other.to_dict()
