# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class StudyRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'study_version_id': 'int',
        'study_version': 'str',
        'unique_identifier': 'str',
        'name': 'str',
        'official_title': 'str',
        'secondary_identifier': 'str',
        'principal_investigator': 'str',
        'principal_investigator_user_id': 'int',
        'principal_investigator_role_name': 'str',
        'ad_lookup_code_by_protocol_type_id': 'int',
        'protocol_type': 'str',
        'admin_role_name': 'str',
        'summary': 'str',
        'sponsor': 'str',
        'collaborators': 'str',
        'oid': 'str',
        'ad_lookup_code_by_purpose_id': 'int',
        'purpose_type': 'str',
        'ad_lookup_code_by_control_id': 'int',
        'control_type': 'str',
        'ad_lookup_code_by_phase_id': 'int',
        'phase_type': 'str',
        'ad_lookup_code_by_classification_id': 'int',
        'classification_type': 'str',
        'ad_lookup_code_by_allocation_id': 'int',
        'allocation_type': 'str',
        'ad_lookup_code_by_intervention_id': 'int',
        'ad_lookup_code_by_masking_id': 'int',
        'masking_type': 'str',
        'ad_lookup_code_by_status_id': 'int',
        'status_name': 'str',
        'category_id': 'int',
        'screening_start_date': 'str',
        'screening_start_date_value': 'int',
        'date_planned_start': 'str',
        'date_planned_end': 'str',
        'protocol_id': 'str',
        'protocol_description': 'str',
        'protocol_date_verification': 'str',
        'ad_lookup_code_by_gender_id': 'int',
        'gender_name': 'str',
        'ad_lookup_code_by_assignment_id': 'int',
        'assignment_type': 'str',
        'ad_lookup_code_by_duration_id': 'int',
        'duration_type': 'str',
        'ad_lookup_code_by_selection_id': 'int',
        'selection_type': 'str',
        'ad_lookup_code_by_timing_id': 'int',
        'timing_type': 'str',
        'ad_lookup_code_by_study_type_id': 'int',
        'study_type': 'str',
        'conditions': 'str',
        'keywords': 'str',
        'eligibility': 'str',
        'study_category': 'str',
        'study_status': 'str',
        'age_min': 'int',
        'age_max': 'int',
        'healthy_volunteer_accepted': 'bool',
        'expected_total_enrollment': 'int',
        'facility_name': 'str',
        'facility_city': 'str',
        'facility_state': 'str',
        'facility_zip': 'str',
        'facility_country': 'str',
        'facility_contact_name': 'str',
        'facility_contact_degree': 'str',
        'facility_phone': 'str',
        'facility_email': 'str',
        'medline': 'str',
        'result_reference': 'bool',
        'url_reference': 'str',
        'url_description': 'str',
        'is_not_using_sites': 'bool',
        'copy_from_template': 'bool',
        'settings': 'dict(str, str)',
        'other_category': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'study_version_id': 'studyVersionId',
        'study_version': 'studyVersion',
        'unique_identifier': 'uniqueIdentifier',
        'name': 'name',
        'official_title': 'officialTitle',
        'secondary_identifier': 'secondaryIdentifier',
        'principal_investigator': 'principalInvestigator',
        'principal_investigator_user_id': 'principalInvestigatorUserId',
        'principal_investigator_role_name': 'principalInvestigatorRoleName',
        'ad_lookup_code_by_protocol_type_id': 'adLookupCodeByProtocolTypeId',
        'protocol_type': 'protocolType',
        'admin_role_name': 'adminRoleName',
        'summary': 'summary',
        'sponsor': 'sponsor',
        'collaborators': 'collaborators',
        'oid': 'oid',
        'ad_lookup_code_by_purpose_id': 'adLookupCodeByPurposeId',
        'purpose_type': 'purposeType',
        'ad_lookup_code_by_control_id': 'adLookupCodeByControlId',
        'control_type': 'controlType',
        'ad_lookup_code_by_phase_id': 'adLookupCodeByPhaseId',
        'phase_type': 'phaseType',
        'ad_lookup_code_by_classification_id': 'adLookupCodeByClassificationId',
        'classification_type': 'classificationType',
        'ad_lookup_code_by_allocation_id': 'adLookupCodeByAllocationId',
        'allocation_type': 'allocationType',
        'ad_lookup_code_by_intervention_id': 'adLookupCodeByInterventionId',
        'ad_lookup_code_by_masking_id': 'adLookupCodeByMaskingId',
        'masking_type': 'maskingType',
        'ad_lookup_code_by_status_id': 'adLookupCodeByStatusId',
        'status_name': 'statusName',
        'category_id': 'categoryId',
        'screening_start_date': 'screeningStartDate',
        'screening_start_date_value': 'screeningStartDateValue',
        'date_planned_start': 'datePlannedStart',
        'date_planned_end': 'datePlannedEnd',
        'protocol_id': 'protocolId',
        'protocol_description': 'protocolDescription',
        'protocol_date_verification': 'protocolDateVerification',
        'ad_lookup_code_by_gender_id': 'adLookupCodeByGenderId',
        'gender_name': 'genderName',
        'ad_lookup_code_by_assignment_id': 'adLookupCodeByAssignmentId',
        'assignment_type': 'assignmentType',
        'ad_lookup_code_by_duration_id': 'adLookupCodeByDurationId',
        'duration_type': 'durationType',
        'ad_lookup_code_by_selection_id': 'adLookupCodeBySelectionId',
        'selection_type': 'selectionType',
        'ad_lookup_code_by_timing_id': 'adLookupCodeByTimingId',
        'timing_type': 'timingType',
        'ad_lookup_code_by_study_type_id': 'adLookupCodeByStudyTypeId',
        'study_type': 'studyType',
        'conditions': 'conditions',
        'keywords': 'keywords',
        'eligibility': 'eligibility',
        'study_category': 'studyCategory',
        'study_status': 'studyStatus',
        'age_min': 'ageMin',
        'age_max': 'ageMax',
        'healthy_volunteer_accepted': 'healthyVolunteerAccepted',
        'expected_total_enrollment': 'expectedTotalEnrollment',
        'facility_name': 'facilityName',
        'facility_city': 'facilityCity',
        'facility_state': 'facilityState',
        'facility_zip': 'facilityZip',
        'facility_country': 'facilityCountry',
        'facility_contact_name': 'facilityContactName',
        'facility_contact_degree': 'facilityContactDegree',
        'facility_phone': 'facilityPhone',
        'facility_email': 'facilityEmail',
        'medline': 'medline',
        'result_reference': 'resultReference',
        'url_reference': 'urlReference',
        'url_description': 'urlDescription',
        'is_not_using_sites': 'isNotUsingSites',
        'copy_from_template': 'copyFromTemplate',
        'settings': 'settings',
        'other_category': 'otherCategory'
    }

    def __init__(self, id=None, study_version_id=None, study_version=None, unique_identifier=None, name=None, official_title=None, secondary_identifier=None, principal_investigator=None, principal_investigator_user_id=None, principal_investigator_role_name=None, ad_lookup_code_by_protocol_type_id=None, protocol_type=None, admin_role_name=None, summary=None, sponsor=None, collaborators=None, oid=None, ad_lookup_code_by_purpose_id=None, purpose_type=None, ad_lookup_code_by_control_id=None, control_type=None, ad_lookup_code_by_phase_id=None, phase_type=None, ad_lookup_code_by_classification_id=None, classification_type=None, ad_lookup_code_by_allocation_id=None, allocation_type=None, ad_lookup_code_by_intervention_id=None, ad_lookup_code_by_masking_id=None, masking_type=None, ad_lookup_code_by_status_id=None, status_name=None, category_id=None, screening_start_date=None, screening_start_date_value=None, date_planned_start=None, date_planned_end=None, protocol_id=None, protocol_description=None, protocol_date_verification=None, ad_lookup_code_by_gender_id=None, gender_name=None, ad_lookup_code_by_assignment_id=None, assignment_type=None, ad_lookup_code_by_duration_id=None, duration_type=None, ad_lookup_code_by_selection_id=None, selection_type=None, ad_lookup_code_by_timing_id=None, timing_type=None, ad_lookup_code_by_study_type_id=None, study_type=None, conditions=None, keywords=None, eligibility=None, study_category=None, study_status=None, age_min=None, age_max=None, healthy_volunteer_accepted=None, expected_total_enrollment=None, facility_name=None, facility_city=None, facility_state=None, facility_zip=None, facility_country=None, facility_contact_name=None, facility_contact_degree=None, facility_phone=None, facility_email=None, medline=None, result_reference=None, url_reference=None, url_description=None, is_not_using_sites=None, copy_from_template=None, settings=None, other_category=None, local_vars_configuration=None):  # noqa: E501
        """StudyRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._study_version_id = None
        self._study_version = None
        self._unique_identifier = None
        self._name = None
        self._official_title = None
        self._secondary_identifier = None
        self._principal_investigator = None
        self._principal_investigator_user_id = None
        self._principal_investigator_role_name = None
        self._ad_lookup_code_by_protocol_type_id = None
        self._protocol_type = None
        self._admin_role_name = None
        self._summary = None
        self._sponsor = None
        self._collaborators = None
        self._oid = None
        self._ad_lookup_code_by_purpose_id = None
        self._purpose_type = None
        self._ad_lookup_code_by_control_id = None
        self._control_type = None
        self._ad_lookup_code_by_phase_id = None
        self._phase_type = None
        self._ad_lookup_code_by_classification_id = None
        self._classification_type = None
        self._ad_lookup_code_by_allocation_id = None
        self._allocation_type = None
        self._ad_lookup_code_by_intervention_id = None
        self._ad_lookup_code_by_masking_id = None
        self._masking_type = None
        self._ad_lookup_code_by_status_id = None
        self._status_name = None
        self._category_id = None
        self._screening_start_date = None
        self._screening_start_date_value = None
        self._date_planned_start = None
        self._date_planned_end = None
        self._protocol_id = None
        self._protocol_description = None
        self._protocol_date_verification = None
        self._ad_lookup_code_by_gender_id = None
        self._gender_name = None
        self._ad_lookup_code_by_assignment_id = None
        self._assignment_type = None
        self._ad_lookup_code_by_duration_id = None
        self._duration_type = None
        self._ad_lookup_code_by_selection_id = None
        self._selection_type = None
        self._ad_lookup_code_by_timing_id = None
        self._timing_type = None
        self._ad_lookup_code_by_study_type_id = None
        self._study_type = None
        self._conditions = None
        self._keywords = None
        self._eligibility = None
        self._study_category = None
        self._study_status = None
        self._age_min = None
        self._age_max = None
        self._healthy_volunteer_accepted = None
        self._expected_total_enrollment = None
        self._facility_name = None
        self._facility_city = None
        self._facility_state = None
        self._facility_zip = None
        self._facility_country = None
        self._facility_contact_name = None
        self._facility_contact_degree = None
        self._facility_phone = None
        self._facility_email = None
        self._medline = None
        self._result_reference = None
        self._url_reference = None
        self._url_description = None
        self._is_not_using_sites = None
        self._copy_from_template = None
        self._settings = None
        self._other_category = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if study_version_id is not None:
            self.study_version_id = study_version_id
        if study_version is not None:
            self.study_version = study_version
        if unique_identifier is not None:
            self.unique_identifier = unique_identifier
        if name is not None:
            self.name = name
        if official_title is not None:
            self.official_title = official_title
        if secondary_identifier is not None:
            self.secondary_identifier = secondary_identifier
        if principal_investigator is not None:
            self.principal_investigator = principal_investigator
        if principal_investigator_user_id is not None:
            self.principal_investigator_user_id = principal_investigator_user_id
        if principal_investigator_role_name is not None:
            self.principal_investigator_role_name = principal_investigator_role_name
        if ad_lookup_code_by_protocol_type_id is not None:
            self.ad_lookup_code_by_protocol_type_id = ad_lookup_code_by_protocol_type_id
        if protocol_type is not None:
            self.protocol_type = protocol_type
        if admin_role_name is not None:
            self.admin_role_name = admin_role_name
        if summary is not None:
            self.summary = summary
        if sponsor is not None:
            self.sponsor = sponsor
        if collaborators is not None:
            self.collaborators = collaborators
        if oid is not None:
            self.oid = oid
        if ad_lookup_code_by_purpose_id is not None:
            self.ad_lookup_code_by_purpose_id = ad_lookup_code_by_purpose_id
        if purpose_type is not None:
            self.purpose_type = purpose_type
        if ad_lookup_code_by_control_id is not None:
            self.ad_lookup_code_by_control_id = ad_lookup_code_by_control_id
        if control_type is not None:
            self.control_type = control_type
        if ad_lookup_code_by_phase_id is not None:
            self.ad_lookup_code_by_phase_id = ad_lookup_code_by_phase_id
        if phase_type is not None:
            self.phase_type = phase_type
        if ad_lookup_code_by_classification_id is not None:
            self.ad_lookup_code_by_classification_id = ad_lookup_code_by_classification_id
        if classification_type is not None:
            self.classification_type = classification_type
        if ad_lookup_code_by_allocation_id is not None:
            self.ad_lookup_code_by_allocation_id = ad_lookup_code_by_allocation_id
        if allocation_type is not None:
            self.allocation_type = allocation_type
        if ad_lookup_code_by_intervention_id is not None:
            self.ad_lookup_code_by_intervention_id = ad_lookup_code_by_intervention_id
        if ad_lookup_code_by_masking_id is not None:
            self.ad_lookup_code_by_masking_id = ad_lookup_code_by_masking_id
        if masking_type is not None:
            self.masking_type = masking_type
        if ad_lookup_code_by_status_id is not None:
            self.ad_lookup_code_by_status_id = ad_lookup_code_by_status_id
        if status_name is not None:
            self.status_name = status_name
        if category_id is not None:
            self.category_id = category_id
        if screening_start_date is not None:
            self.screening_start_date = screening_start_date
        if screening_start_date_value is not None:
            self.screening_start_date_value = screening_start_date_value
        if date_planned_start is not None:
            self.date_planned_start = date_planned_start
        if date_planned_end is not None:
            self.date_planned_end = date_planned_end
        if protocol_id is not None:
            self.protocol_id = protocol_id
        if protocol_description is not None:
            self.protocol_description = protocol_description
        if protocol_date_verification is not None:
            self.protocol_date_verification = protocol_date_verification
        if ad_lookup_code_by_gender_id is not None:
            self.ad_lookup_code_by_gender_id = ad_lookup_code_by_gender_id
        if gender_name is not None:
            self.gender_name = gender_name
        if ad_lookup_code_by_assignment_id is not None:
            self.ad_lookup_code_by_assignment_id = ad_lookup_code_by_assignment_id
        if assignment_type is not None:
            self.assignment_type = assignment_type
        if ad_lookup_code_by_duration_id is not None:
            self.ad_lookup_code_by_duration_id = ad_lookup_code_by_duration_id
        if duration_type is not None:
            self.duration_type = duration_type
        if ad_lookup_code_by_selection_id is not None:
            self.ad_lookup_code_by_selection_id = ad_lookup_code_by_selection_id
        if selection_type is not None:
            self.selection_type = selection_type
        if ad_lookup_code_by_timing_id is not None:
            self.ad_lookup_code_by_timing_id = ad_lookup_code_by_timing_id
        if timing_type is not None:
            self.timing_type = timing_type
        if ad_lookup_code_by_study_type_id is not None:
            self.ad_lookup_code_by_study_type_id = ad_lookup_code_by_study_type_id
        if study_type is not None:
            self.study_type = study_type
        if conditions is not None:
            self.conditions = conditions
        if keywords is not None:
            self.keywords = keywords
        if eligibility is not None:
            self.eligibility = eligibility
        if study_category is not None:
            self.study_category = study_category
        if study_status is not None:
            self.study_status = study_status
        if age_min is not None:
            self.age_min = age_min
        if age_max is not None:
            self.age_max = age_max
        if healthy_volunteer_accepted is not None:
            self.healthy_volunteer_accepted = healthy_volunteer_accepted
        if expected_total_enrollment is not None:
            self.expected_total_enrollment = expected_total_enrollment
        if facility_name is not None:
            self.facility_name = facility_name
        if facility_city is not None:
            self.facility_city = facility_city
        if facility_state is not None:
            self.facility_state = facility_state
        if facility_zip is not None:
            self.facility_zip = facility_zip
        if facility_country is not None:
            self.facility_country = facility_country
        if facility_contact_name is not None:
            self.facility_contact_name = facility_contact_name
        if facility_contact_degree is not None:
            self.facility_contact_degree = facility_contact_degree
        if facility_phone is not None:
            self.facility_phone = facility_phone
        if facility_email is not None:
            self.facility_email = facility_email
        if medline is not None:
            self.medline = medline
        if result_reference is not None:
            self.result_reference = result_reference
        if url_reference is not None:
            self.url_reference = url_reference
        if url_description is not None:
            self.url_description = url_description
        if is_not_using_sites is not None:
            self.is_not_using_sites = is_not_using_sites
        if copy_from_template is not None:
            self.copy_from_template = copy_from_template
        if settings is not None:
            self.settings = settings
        if other_category is not None:
            self.other_category = other_category

    @property
    def id(self):
        """Gets the id of this StudyRpc.  # noqa: E501


        :return: The id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StudyRpc.


        :param id: The id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def study_version_id(self):
        """Gets the study_version_id of this StudyRpc.  # noqa: E501


        :return: The study_version_id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._study_version_id

    @study_version_id.setter
    def study_version_id(self, study_version_id):
        """Sets the study_version_id of this StudyRpc.


        :param study_version_id: The study_version_id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._study_version_id = study_version_id

    @property
    def study_version(self):
        """Gets the study_version of this StudyRpc.  # noqa: E501

        Study Version Number. Please use it if 'studyVersionId' not available.  # noqa: E501

        :return: The study_version of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._study_version

    @study_version.setter
    def study_version(self, study_version):
        """Sets the study_version of this StudyRpc.

        Study Version Number. Please use it if 'studyVersionId' not available.  # noqa: E501

        :param study_version: The study_version of this StudyRpc.  # noqa: E501
        :type: str
        """
        allowed_values = ["1.3", "1.2.3", "1.2.2", "1.2.1", "1.2", "1.0"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and study_version not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `study_version` ({0}), must be one of {1}"  # noqa: E501
                .format(study_version, allowed_values)
            )

        self._study_version = study_version

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this StudyRpc.  # noqa: E501


        :return: The unique_identifier of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this StudyRpc.


        :param unique_identifier: The unique_identifier of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._unique_identifier = unique_identifier

    @property
    def name(self):
        """Gets the name of this StudyRpc.  # noqa: E501


        :return: The name of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StudyRpc.


        :param name: The name of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def official_title(self):
        """Gets the official_title of this StudyRpc.  # noqa: E501


        :return: The official_title of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._official_title

    @official_title.setter
    def official_title(self, official_title):
        """Sets the official_title of this StudyRpc.


        :param official_title: The official_title of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._official_title = official_title

    @property
    def secondary_identifier(self):
        """Gets the secondary_identifier of this StudyRpc.  # noqa: E501


        :return: The secondary_identifier of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._secondary_identifier

    @secondary_identifier.setter
    def secondary_identifier(self, secondary_identifier):
        """Sets the secondary_identifier of this StudyRpc.


        :param secondary_identifier: The secondary_identifier of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._secondary_identifier = secondary_identifier

    @property
    def principal_investigator(self):
        """Gets the principal_investigator of this StudyRpc.  # noqa: E501


        :return: The principal_investigator of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._principal_investigator

    @principal_investigator.setter
    def principal_investigator(self, principal_investigator):
        """Sets the principal_investigator of this StudyRpc.


        :param principal_investigator: The principal_investigator of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._principal_investigator = principal_investigator

    @property
    def principal_investigator_user_id(self):
        """Gets the principal_investigator_user_id of this StudyRpc.  # noqa: E501


        :return: The principal_investigator_user_id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._principal_investigator_user_id

    @principal_investigator_user_id.setter
    def principal_investigator_user_id(self, principal_investigator_user_id):
        """Sets the principal_investigator_user_id of this StudyRpc.


        :param principal_investigator_user_id: The principal_investigator_user_id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._principal_investigator_user_id = principal_investigator_user_id

    @property
    def principal_investigator_role_name(self):
        """Gets the principal_investigator_role_name of this StudyRpc.  # noqa: E501


        :return: The principal_investigator_role_name of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._principal_investigator_role_name

    @principal_investigator_role_name.setter
    def principal_investigator_role_name(self, principal_investigator_role_name):
        """Sets the principal_investigator_role_name of this StudyRpc.


        :param principal_investigator_role_name: The principal_investigator_role_name of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._principal_investigator_role_name = principal_investigator_role_name

    @property
    def ad_lookup_code_by_protocol_type_id(self):
        """Gets the ad_lookup_code_by_protocol_type_id of this StudyRpc.  # noqa: E501


        :return: The ad_lookup_code_by_protocol_type_id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._ad_lookup_code_by_protocol_type_id

    @ad_lookup_code_by_protocol_type_id.setter
    def ad_lookup_code_by_protocol_type_id(self, ad_lookup_code_by_protocol_type_id):
        """Sets the ad_lookup_code_by_protocol_type_id of this StudyRpc.


        :param ad_lookup_code_by_protocol_type_id: The ad_lookup_code_by_protocol_type_id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._ad_lookup_code_by_protocol_type_id = ad_lookup_code_by_protocol_type_id

    @property
    def protocol_type(self):
        """Gets the protocol_type of this StudyRpc.  # noqa: E501

        Study Protocol type name. Please use it if 'adLookupCodeByProtocolTypeId' not available.  # noqa: E501

        :return: The protocol_type of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._protocol_type

    @protocol_type.setter
    def protocol_type(self, protocol_type):
        """Sets the protocol_type of this StudyRpc.

        Study Protocol type name. Please use it if 'adLookupCodeByProtocolTypeId' not available.  # noqa: E501

        :param protocol_type: The protocol_type of this StudyRpc.  # noqa: E501
        :type: str
        """
        allowed_values = ["Interventional", "Observational"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and protocol_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `protocol_type` ({0}), must be one of {1}"  # noqa: E501
                .format(protocol_type, allowed_values)
            )

        self._protocol_type = protocol_type

    @property
    def admin_role_name(self):
        """Gets the admin_role_name of this StudyRpc.  # noqa: E501


        :return: The admin_role_name of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._admin_role_name

    @admin_role_name.setter
    def admin_role_name(self, admin_role_name):
        """Sets the admin_role_name of this StudyRpc.


        :param admin_role_name: The admin_role_name of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._admin_role_name = admin_role_name

    @property
    def summary(self):
        """Gets the summary of this StudyRpc.  # noqa: E501


        :return: The summary of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this StudyRpc.


        :param summary: The summary of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def sponsor(self):
        """Gets the sponsor of this StudyRpc.  # noqa: E501


        :return: The sponsor of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._sponsor

    @sponsor.setter
    def sponsor(self, sponsor):
        """Sets the sponsor of this StudyRpc.


        :param sponsor: The sponsor of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._sponsor = sponsor

    @property
    def collaborators(self):
        """Gets the collaborators of this StudyRpc.  # noqa: E501


        :return: The collaborators of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this StudyRpc.


        :param collaborators: The collaborators of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._collaborators = collaborators

    @property
    def oid(self):
        """Gets the oid of this StudyRpc.  # noqa: E501


        :return: The oid of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this StudyRpc.


        :param oid: The oid of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._oid = oid

    @property
    def ad_lookup_code_by_purpose_id(self):
        """Gets the ad_lookup_code_by_purpose_id of this StudyRpc.  # noqa: E501


        :return: The ad_lookup_code_by_purpose_id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._ad_lookup_code_by_purpose_id

    @ad_lookup_code_by_purpose_id.setter
    def ad_lookup_code_by_purpose_id(self, ad_lookup_code_by_purpose_id):
        """Sets the ad_lookup_code_by_purpose_id of this StudyRpc.


        :param ad_lookup_code_by_purpose_id: The ad_lookup_code_by_purpose_id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._ad_lookup_code_by_purpose_id = ad_lookup_code_by_purpose_id

    @property
    def purpose_type(self):
        """Gets the purpose_type of this StudyRpc.  # noqa: E501

        Study Purpose Type. Please use it if 'adLookupCodeByPurposeId' not available.  # noqa: E501

        :return: The purpose_type of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._purpose_type

    @purpose_type.setter
    def purpose_type(self, purpose_type):
        """Sets the purpose_type of this StudyRpc.

        Study Purpose Type. Please use it if 'adLookupCodeByPurposeId' not available.  # noqa: E501

        :param purpose_type: The purpose_type of this StudyRpc.  # noqa: E501
        :type: str
        """
        allowed_values = ["Treatment", "Prevention", "Diagnosis", "Supportive Care", "Screening", "Health Services Research", "Basic Science", "Other"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and purpose_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `purpose_type` ({0}), must be one of {1}"  # noqa: E501
                .format(purpose_type, allowed_values)
            )

        self._purpose_type = purpose_type

    @property
    def ad_lookup_code_by_control_id(self):
        """Gets the ad_lookup_code_by_control_id of this StudyRpc.  # noqa: E501


        :return: The ad_lookup_code_by_control_id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._ad_lookup_code_by_control_id

    @ad_lookup_code_by_control_id.setter
    def ad_lookup_code_by_control_id(self, ad_lookup_code_by_control_id):
        """Sets the ad_lookup_code_by_control_id of this StudyRpc.


        :param ad_lookup_code_by_control_id: The ad_lookup_code_by_control_id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._ad_lookup_code_by_control_id = ad_lookup_code_by_control_id

    @property
    def control_type(self):
        """Gets the control_type of this StudyRpc.  # noqa: E501

        Study Control Type. Please use it if 'adLookupCodeByControlId' not available.  # noqa: E501

        :return: The control_type of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._control_type

    @control_type.setter
    def control_type(self, control_type):
        """Sets the control_type of this StudyRpc.

        Study Control Type. Please use it if 'adLookupCodeByControlId' not available.  # noqa: E501

        :param control_type: The control_type of this StudyRpc.  # noqa: E501
        :type: str
        """
        allowed_values = ["Placebo", "Active", "Uncontrolled", "Historical", "Dose Comparison"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and control_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `control_type` ({0}), must be one of {1}"  # noqa: E501
                .format(control_type, allowed_values)
            )

        self._control_type = control_type

    @property
    def ad_lookup_code_by_phase_id(self):
        """Gets the ad_lookup_code_by_phase_id of this StudyRpc.  # noqa: E501


        :return: The ad_lookup_code_by_phase_id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._ad_lookup_code_by_phase_id

    @ad_lookup_code_by_phase_id.setter
    def ad_lookup_code_by_phase_id(self, ad_lookup_code_by_phase_id):
        """Sets the ad_lookup_code_by_phase_id of this StudyRpc.


        :param ad_lookup_code_by_phase_id: The ad_lookup_code_by_phase_id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._ad_lookup_code_by_phase_id = ad_lookup_code_by_phase_id

    @property
    def phase_type(self):
        """Gets the phase_type of this StudyRpc.  # noqa: E501

        Study Phase. Please use it if 'adLookupCodeByPhaseId' not available.  # noqa: E501

        :return: The phase_type of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._phase_type

    @phase_type.setter
    def phase_type(self, phase_type):
        """Sets the phase_type of this StudyRpc.

        Study Phase. Please use it if 'adLookupCodeByPhaseId' not available.  # noqa: E501

        :param phase_type: The phase_type of this StudyRpc.  # noqa: E501
        :type: str
        """
        allowed_values = ["N/A", "Phase I", "Phase I/Phase II", "Phase II", "Phase II/Phase III", "Phase III", "Phase III/Phase IV", "Phase IV"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and phase_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `phase_type` ({0}), must be one of {1}"  # noqa: E501
                .format(phase_type, allowed_values)
            )

        self._phase_type = phase_type

    @property
    def ad_lookup_code_by_classification_id(self):
        """Gets the ad_lookup_code_by_classification_id of this StudyRpc.  # noqa: E501


        :return: The ad_lookup_code_by_classification_id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._ad_lookup_code_by_classification_id

    @ad_lookup_code_by_classification_id.setter
    def ad_lookup_code_by_classification_id(self, ad_lookup_code_by_classification_id):
        """Sets the ad_lookup_code_by_classification_id of this StudyRpc.


        :param ad_lookup_code_by_classification_id: The ad_lookup_code_by_classification_id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._ad_lookup_code_by_classification_id = ad_lookup_code_by_classification_id

    @property
    def classification_type(self):
        """Gets the classification_type of this StudyRpc.  # noqa: E501

        Study Classification. Please use it if 'adLookupCodeByClassificationId' not available.  # noqa: E501

        :return: The classification_type of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._classification_type

    @classification_type.setter
    def classification_type(self, classification_type):
        """Sets the classification_type of this StudyRpc.

        Study Classification. Please use it if 'adLookupCodeByClassificationId' not available.  # noqa: E501

        :param classification_type: The classification_type of this StudyRpc.  # noqa: E501
        :type: str
        """
        allowed_values = ["Safety", "Efficacy", "Safety/Efficacy", "Bio-equivalence", "Bio-availability", "Pharmacokinetics", "Pharmacodynamics", "Pharmacokinetics/Pharmacodynamics"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and classification_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `classification_type` ({0}), must be one of {1}"  # noqa: E501
                .format(classification_type, allowed_values)
            )

        self._classification_type = classification_type

    @property
    def ad_lookup_code_by_allocation_id(self):
        """Gets the ad_lookup_code_by_allocation_id of this StudyRpc.  # noqa: E501


        :return: The ad_lookup_code_by_allocation_id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._ad_lookup_code_by_allocation_id

    @ad_lookup_code_by_allocation_id.setter
    def ad_lookup_code_by_allocation_id(self, ad_lookup_code_by_allocation_id):
        """Sets the ad_lookup_code_by_allocation_id of this StudyRpc.


        :param ad_lookup_code_by_allocation_id: The ad_lookup_code_by_allocation_id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._ad_lookup_code_by_allocation_id = ad_lookup_code_by_allocation_id

    @property
    def allocation_type(self):
        """Gets the allocation_type of this StudyRpc.  # noqa: E501

        Study Allocation. Please use it if 'adLookupCodeByAllocationId' not available.  # noqa: E501

        :return: The allocation_type of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._allocation_type

    @allocation_type.setter
    def allocation_type(self, allocation_type):
        """Sets the allocation_type of this StudyRpc.

        Study Allocation. Please use it if 'adLookupCodeByAllocationId' not available.  # noqa: E501

        :param allocation_type: The allocation_type of this StudyRpc.  # noqa: E501
        :type: str
        """
        allowed_values = ["Randomized Clinical Trial", "Nonrandomized Trial", "N/A"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and allocation_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `allocation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(allocation_type, allowed_values)
            )

        self._allocation_type = allocation_type

    @property
    def ad_lookup_code_by_intervention_id(self):
        """Gets the ad_lookup_code_by_intervention_id of this StudyRpc.  # noqa: E501


        :return: The ad_lookup_code_by_intervention_id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._ad_lookup_code_by_intervention_id

    @ad_lookup_code_by_intervention_id.setter
    def ad_lookup_code_by_intervention_id(self, ad_lookup_code_by_intervention_id):
        """Sets the ad_lookup_code_by_intervention_id of this StudyRpc.


        :param ad_lookup_code_by_intervention_id: The ad_lookup_code_by_intervention_id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._ad_lookup_code_by_intervention_id = ad_lookup_code_by_intervention_id

    @property
    def ad_lookup_code_by_masking_id(self):
        """Gets the ad_lookup_code_by_masking_id of this StudyRpc.  # noqa: E501


        :return: The ad_lookup_code_by_masking_id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._ad_lookup_code_by_masking_id

    @ad_lookup_code_by_masking_id.setter
    def ad_lookup_code_by_masking_id(self, ad_lookup_code_by_masking_id):
        """Sets the ad_lookup_code_by_masking_id of this StudyRpc.


        :param ad_lookup_code_by_masking_id: The ad_lookup_code_by_masking_id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._ad_lookup_code_by_masking_id = ad_lookup_code_by_masking_id

    @property
    def masking_type(self):
        """Gets the masking_type of this StudyRpc.  # noqa: E501

        Study Masking. Please use it if 'adLookupCodeByMaskingId' not available.  # noqa: E501

        :return: The masking_type of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._masking_type

    @masking_type.setter
    def masking_type(self, masking_type):
        """Sets the masking_type of this StudyRpc.

        Study Masking. Please use it if 'adLookupCodeByMaskingId' not available.  # noqa: E501

        :param masking_type: The masking_type of this StudyRpc.  # noqa: E501
        :type: str
        """
        allowed_values = ["Open", "Single Blind", "Double Blind"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and masking_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `masking_type` ({0}), must be one of {1}"  # noqa: E501
                .format(masking_type, allowed_values)
            )

        self._masking_type = masking_type

    @property
    def ad_lookup_code_by_status_id(self):
        """Gets the ad_lookup_code_by_status_id of this StudyRpc.  # noqa: E501


        :return: The ad_lookup_code_by_status_id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._ad_lookup_code_by_status_id

    @ad_lookup_code_by_status_id.setter
    def ad_lookup_code_by_status_id(self, ad_lookup_code_by_status_id):
        """Sets the ad_lookup_code_by_status_id of this StudyRpc.


        :param ad_lookup_code_by_status_id: The ad_lookup_code_by_status_id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._ad_lookup_code_by_status_id = ad_lookup_code_by_status_id

    @property
    def status_name(self):
        """Gets the status_name of this StudyRpc.  # noqa: E501

        Study Status. Please use it if 'adLookupCodeByStatusId' not available.  # noqa: E501

        :return: The status_name of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._status_name

    @status_name.setter
    def status_name(self, status_name):
        """Sets the status_name of this StudyRpc.

        Study Status. Please use it if 'adLookupCodeByStatusId' not available.  # noqa: E501

        :param status_name: The status_name of this StudyRpc.  # noqa: E501
        :type: str
        """
        allowed_values = ["Development", "Production", "Frozen", "Locked"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status_name not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status_name` ({0}), must be one of {1}"  # noqa: E501
                .format(status_name, allowed_values)
            )

        self._status_name = status_name

    @property
    def category_id(self):
        """Gets the category_id of this StudyRpc.  # noqa: E501


        :return: The category_id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this StudyRpc.


        :param category_id: The category_id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def screening_start_date(self):
        """Gets the screening_start_date of this StudyRpc.  # noqa: E501


        :return: The screening_start_date of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._screening_start_date

    @screening_start_date.setter
    def screening_start_date(self, screening_start_date):
        """Sets the screening_start_date of this StudyRpc.


        :param screening_start_date: The screening_start_date of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._screening_start_date = screening_start_date

    @property
    def screening_start_date_value(self):
        """Gets the screening_start_date_value of this StudyRpc.  # noqa: E501


        :return: The screening_start_date_value of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._screening_start_date_value

    @screening_start_date_value.setter
    def screening_start_date_value(self, screening_start_date_value):
        """Sets the screening_start_date_value of this StudyRpc.


        :param screening_start_date_value: The screening_start_date_value of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._screening_start_date_value = screening_start_date_value

    @property
    def date_planned_start(self):
        """Gets the date_planned_start of this StudyRpc.  # noqa: E501


        :return: The date_planned_start of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._date_planned_start

    @date_planned_start.setter
    def date_planned_start(self, date_planned_start):
        """Sets the date_planned_start of this StudyRpc.


        :param date_planned_start: The date_planned_start of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._date_planned_start = date_planned_start

    @property
    def date_planned_end(self):
        """Gets the date_planned_end of this StudyRpc.  # noqa: E501


        :return: The date_planned_end of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._date_planned_end

    @date_planned_end.setter
    def date_planned_end(self, date_planned_end):
        """Sets the date_planned_end of this StudyRpc.


        :param date_planned_end: The date_planned_end of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._date_planned_end = date_planned_end

    @property
    def protocol_id(self):
        """Gets the protocol_id of this StudyRpc.  # noqa: E501


        :return: The protocol_id of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._protocol_id

    @protocol_id.setter
    def protocol_id(self, protocol_id):
        """Sets the protocol_id of this StudyRpc.


        :param protocol_id: The protocol_id of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._protocol_id = protocol_id

    @property
    def protocol_description(self):
        """Gets the protocol_description of this StudyRpc.  # noqa: E501


        :return: The protocol_description of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._protocol_description

    @protocol_description.setter
    def protocol_description(self, protocol_description):
        """Sets the protocol_description of this StudyRpc.


        :param protocol_description: The protocol_description of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._protocol_description = protocol_description

    @property
    def protocol_date_verification(self):
        """Gets the protocol_date_verification of this StudyRpc.  # noqa: E501


        :return: The protocol_date_verification of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._protocol_date_verification

    @protocol_date_verification.setter
    def protocol_date_verification(self, protocol_date_verification):
        """Sets the protocol_date_verification of this StudyRpc.


        :param protocol_date_verification: The protocol_date_verification of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._protocol_date_verification = protocol_date_verification

    @property
    def ad_lookup_code_by_gender_id(self):
        """Gets the ad_lookup_code_by_gender_id of this StudyRpc.  # noqa: E501


        :return: The ad_lookup_code_by_gender_id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._ad_lookup_code_by_gender_id

    @ad_lookup_code_by_gender_id.setter
    def ad_lookup_code_by_gender_id(self, ad_lookup_code_by_gender_id):
        """Sets the ad_lookup_code_by_gender_id of this StudyRpc.


        :param ad_lookup_code_by_gender_id: The ad_lookup_code_by_gender_id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._ad_lookup_code_by_gender_id = ad_lookup_code_by_gender_id

    @property
    def gender_name(self):
        """Gets the gender_name of this StudyRpc.  # noqa: E501

        Study Gender. Please use it if 'adLookupCodeByGenderId' not available.  # noqa: E501

        :return: The gender_name of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._gender_name

    @gender_name.setter
    def gender_name(self, gender_name):
        """Sets the gender_name of this StudyRpc.

        Study Gender. Please use it if 'adLookupCodeByGenderId' not available.  # noqa: E501

        :param gender_name: The gender_name of this StudyRpc.  # noqa: E501
        :type: str
        """
        allowed_values = ["Male", "Female", "Both"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and gender_name not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `gender_name` ({0}), must be one of {1}"  # noqa: E501
                .format(gender_name, allowed_values)
            )

        self._gender_name = gender_name

    @property
    def ad_lookup_code_by_assignment_id(self):
        """Gets the ad_lookup_code_by_assignment_id of this StudyRpc.  # noqa: E501


        :return: The ad_lookup_code_by_assignment_id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._ad_lookup_code_by_assignment_id

    @ad_lookup_code_by_assignment_id.setter
    def ad_lookup_code_by_assignment_id(self, ad_lookup_code_by_assignment_id):
        """Sets the ad_lookup_code_by_assignment_id of this StudyRpc.


        :param ad_lookup_code_by_assignment_id: The ad_lookup_code_by_assignment_id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._ad_lookup_code_by_assignment_id = ad_lookup_code_by_assignment_id

    @property
    def assignment_type(self):
        """Gets the assignment_type of this StudyRpc.  # noqa: E501

        Study Assignment. Please use it if 'adLookupCodeByAssignmentId' not available.  # noqa: E501

        :return: The assignment_type of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._assignment_type

    @assignment_type.setter
    def assignment_type(self, assignment_type):
        """Sets the assignment_type of this StudyRpc.

        Study Assignment. Please use it if 'adLookupCodeByAssignmentId' not available.  # noqa: E501

        :param assignment_type: The assignment_type of this StudyRpc.  # noqa: E501
        :type: str
        """
        allowed_values = ["Single Group", "Parallel", "Cross-over", "Factorial", "Expanded Access"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and assignment_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `assignment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(assignment_type, allowed_values)
            )

        self._assignment_type = assignment_type

    @property
    def ad_lookup_code_by_duration_id(self):
        """Gets the ad_lookup_code_by_duration_id of this StudyRpc.  # noqa: E501


        :return: The ad_lookup_code_by_duration_id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._ad_lookup_code_by_duration_id

    @ad_lookup_code_by_duration_id.setter
    def ad_lookup_code_by_duration_id(self, ad_lookup_code_by_duration_id):
        """Sets the ad_lookup_code_by_duration_id of this StudyRpc.


        :param ad_lookup_code_by_duration_id: The ad_lookup_code_by_duration_id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._ad_lookup_code_by_duration_id = ad_lookup_code_by_duration_id

    @property
    def duration_type(self):
        """Gets the duration_type of this StudyRpc.  # noqa: E501

        Study Duration. Please use it if 'adLookupCodeByDurationId' not available.  # noqa: E501

        :return: The duration_type of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._duration_type

    @duration_type.setter
    def duration_type(self, duration_type):
        """Sets the duration_type of this StudyRpc.

        Study Duration. Please use it if 'adLookupCodeByDurationId' not available.  # noqa: E501

        :param duration_type: The duration_type of this StudyRpc.  # noqa: E501
        :type: str
        """
        allowed_values = ["Longitudinal", "Cross-sectional"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and duration_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `duration_type` ({0}), must be one of {1}"  # noqa: E501
                .format(duration_type, allowed_values)
            )

        self._duration_type = duration_type

    @property
    def ad_lookup_code_by_selection_id(self):
        """Gets the ad_lookup_code_by_selection_id of this StudyRpc.  # noqa: E501


        :return: The ad_lookup_code_by_selection_id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._ad_lookup_code_by_selection_id

    @ad_lookup_code_by_selection_id.setter
    def ad_lookup_code_by_selection_id(self, ad_lookup_code_by_selection_id):
        """Sets the ad_lookup_code_by_selection_id of this StudyRpc.


        :param ad_lookup_code_by_selection_id: The ad_lookup_code_by_selection_id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._ad_lookup_code_by_selection_id = ad_lookup_code_by_selection_id

    @property
    def selection_type(self):
        """Gets the selection_type of this StudyRpc.  # noqa: E501

        Study Selection. Please use it if 'adLookupCodeBySelectionId' not available.  # noqa: E501

        :return: The selection_type of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._selection_type

    @selection_type.setter
    def selection_type(self, selection_type):
        """Sets the selection_type of this StudyRpc.

        Study Selection. Please use it if 'adLookupCodeBySelectionId' not available.  # noqa: E501

        :param selection_type: The selection_type of this StudyRpc.  # noqa: E501
        :type: str
        """
        allowed_values = ["Convenience Sample", "Defined Population", "Random Sample", "Case Control"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and selection_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `selection_type` ({0}), must be one of {1}"  # noqa: E501
                .format(selection_type, allowed_values)
            )

        self._selection_type = selection_type

    @property
    def ad_lookup_code_by_timing_id(self):
        """Gets the ad_lookup_code_by_timing_id of this StudyRpc.  # noqa: E501


        :return: The ad_lookup_code_by_timing_id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._ad_lookup_code_by_timing_id

    @ad_lookup_code_by_timing_id.setter
    def ad_lookup_code_by_timing_id(self, ad_lookup_code_by_timing_id):
        """Sets the ad_lookup_code_by_timing_id of this StudyRpc.


        :param ad_lookup_code_by_timing_id: The ad_lookup_code_by_timing_id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._ad_lookup_code_by_timing_id = ad_lookup_code_by_timing_id

    @property
    def timing_type(self):
        """Gets the timing_type of this StudyRpc.  # noqa: E501

        Study Timing. Please use it if 'adLookupCodeByTimingId' not available.  # noqa: E501

        :return: The timing_type of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._timing_type

    @timing_type.setter
    def timing_type(self, timing_type):
        """Sets the timing_type of this StudyRpc.

        Study Timing. Please use it if 'adLookupCodeByTimingId' not available.  # noqa: E501

        :param timing_type: The timing_type of this StudyRpc.  # noqa: E501
        :type: str
        """
        allowed_values = ["Retrospective", "Prospective"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and timing_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `timing_type` ({0}), must be one of {1}"  # noqa: E501
                .format(timing_type, allowed_values)
            )

        self._timing_type = timing_type

    @property
    def ad_lookup_code_by_study_type_id(self):
        """Gets the ad_lookup_code_by_study_type_id of this StudyRpc.  # noqa: E501


        :return: The ad_lookup_code_by_study_type_id of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._ad_lookup_code_by_study_type_id

    @ad_lookup_code_by_study_type_id.setter
    def ad_lookup_code_by_study_type_id(self, ad_lookup_code_by_study_type_id):
        """Sets the ad_lookup_code_by_study_type_id of this StudyRpc.


        :param ad_lookup_code_by_study_type_id: The ad_lookup_code_by_study_type_id of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._ad_lookup_code_by_study_type_id = ad_lookup_code_by_study_type_id

    @property
    def study_type(self):
        """Gets the study_type of this StudyRpc.  # noqa: E501

        Study Type. Please use it if 'adLookupCodeByStudyTypeId' not available.  # noqa: E501

        :return: The study_type of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._study_type

    @study_type.setter
    def study_type(self, study_type):
        """Sets the study_type of this StudyRpc.

        Study Type. Please use it if 'adLookupCodeByStudyTypeId' not available.  # noqa: E501

        :param study_type: The study_type of this StudyRpc.  # noqa: E501
        :type: str
        """
        allowed_values = ["genetic", "non-genetic"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and study_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `study_type` ({0}), must be one of {1}"  # noqa: E501
                .format(study_type, allowed_values)
            )

        self._study_type = study_type

    @property
    def conditions(self):
        """Gets the conditions of this StudyRpc.  # noqa: E501


        :return: The conditions of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this StudyRpc.


        :param conditions: The conditions of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._conditions = conditions

    @property
    def keywords(self):
        """Gets the keywords of this StudyRpc.  # noqa: E501


        :return: The keywords of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this StudyRpc.


        :param keywords: The keywords of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._keywords = keywords

    @property
    def eligibility(self):
        """Gets the eligibility of this StudyRpc.  # noqa: E501


        :return: The eligibility of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._eligibility

    @eligibility.setter
    def eligibility(self, eligibility):
        """Sets the eligibility of this StudyRpc.


        :param eligibility: The eligibility of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._eligibility = eligibility

    @property
    def study_category(self):
        """Gets the study_category of this StudyRpc.  # noqa: E501


        :return: The study_category of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._study_category

    @study_category.setter
    def study_category(self, study_category):
        """Sets the study_category of this StudyRpc.


        :param study_category: The study_category of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._study_category = study_category

    @property
    def study_status(self):
        """Gets the study_status of this StudyRpc.  # noqa: E501


        :return: The study_status of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._study_status

    @study_status.setter
    def study_status(self, study_status):
        """Sets the study_status of this StudyRpc.


        :param study_status: The study_status of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._study_status = study_status

    @property
    def age_min(self):
        """Gets the age_min of this StudyRpc.  # noqa: E501


        :return: The age_min of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._age_min

    @age_min.setter
    def age_min(self, age_min):
        """Sets the age_min of this StudyRpc.


        :param age_min: The age_min of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._age_min = age_min

    @property
    def age_max(self):
        """Gets the age_max of this StudyRpc.  # noqa: E501


        :return: The age_max of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._age_max

    @age_max.setter
    def age_max(self, age_max):
        """Sets the age_max of this StudyRpc.


        :param age_max: The age_max of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._age_max = age_max

    @property
    def healthy_volunteer_accepted(self):
        """Gets the healthy_volunteer_accepted of this StudyRpc.  # noqa: E501


        :return: The healthy_volunteer_accepted of this StudyRpc.  # noqa: E501
        :rtype: bool
        """
        return self._healthy_volunteer_accepted

    @healthy_volunteer_accepted.setter
    def healthy_volunteer_accepted(self, healthy_volunteer_accepted):
        """Sets the healthy_volunteer_accepted of this StudyRpc.


        :param healthy_volunteer_accepted: The healthy_volunteer_accepted of this StudyRpc.  # noqa: E501
        :type: bool
        """

        self._healthy_volunteer_accepted = healthy_volunteer_accepted

    @property
    def expected_total_enrollment(self):
        """Gets the expected_total_enrollment of this StudyRpc.  # noqa: E501


        :return: The expected_total_enrollment of this StudyRpc.  # noqa: E501
        :rtype: int
        """
        return self._expected_total_enrollment

    @expected_total_enrollment.setter
    def expected_total_enrollment(self, expected_total_enrollment):
        """Sets the expected_total_enrollment of this StudyRpc.


        :param expected_total_enrollment: The expected_total_enrollment of this StudyRpc.  # noqa: E501
        :type: int
        """

        self._expected_total_enrollment = expected_total_enrollment

    @property
    def facility_name(self):
        """Gets the facility_name of this StudyRpc.  # noqa: E501


        :return: The facility_name of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._facility_name

    @facility_name.setter
    def facility_name(self, facility_name):
        """Sets the facility_name of this StudyRpc.


        :param facility_name: The facility_name of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._facility_name = facility_name

    @property
    def facility_city(self):
        """Gets the facility_city of this StudyRpc.  # noqa: E501


        :return: The facility_city of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._facility_city

    @facility_city.setter
    def facility_city(self, facility_city):
        """Sets the facility_city of this StudyRpc.


        :param facility_city: The facility_city of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._facility_city = facility_city

    @property
    def facility_state(self):
        """Gets the facility_state of this StudyRpc.  # noqa: E501


        :return: The facility_state of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._facility_state

    @facility_state.setter
    def facility_state(self, facility_state):
        """Sets the facility_state of this StudyRpc.


        :param facility_state: The facility_state of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._facility_state = facility_state

    @property
    def facility_zip(self):
        """Gets the facility_zip of this StudyRpc.  # noqa: E501


        :return: The facility_zip of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._facility_zip

    @facility_zip.setter
    def facility_zip(self, facility_zip):
        """Sets the facility_zip of this StudyRpc.


        :param facility_zip: The facility_zip of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._facility_zip = facility_zip

    @property
    def facility_country(self):
        """Gets the facility_country of this StudyRpc.  # noqa: E501


        :return: The facility_country of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._facility_country

    @facility_country.setter
    def facility_country(self, facility_country):
        """Sets the facility_country of this StudyRpc.


        :param facility_country: The facility_country of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._facility_country = facility_country

    @property
    def facility_contact_name(self):
        """Gets the facility_contact_name of this StudyRpc.  # noqa: E501


        :return: The facility_contact_name of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._facility_contact_name

    @facility_contact_name.setter
    def facility_contact_name(self, facility_contact_name):
        """Sets the facility_contact_name of this StudyRpc.


        :param facility_contact_name: The facility_contact_name of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._facility_contact_name = facility_contact_name

    @property
    def facility_contact_degree(self):
        """Gets the facility_contact_degree of this StudyRpc.  # noqa: E501


        :return: The facility_contact_degree of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._facility_contact_degree

    @facility_contact_degree.setter
    def facility_contact_degree(self, facility_contact_degree):
        """Sets the facility_contact_degree of this StudyRpc.


        :param facility_contact_degree: The facility_contact_degree of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._facility_contact_degree = facility_contact_degree

    @property
    def facility_phone(self):
        """Gets the facility_phone of this StudyRpc.  # noqa: E501


        :return: The facility_phone of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._facility_phone

    @facility_phone.setter
    def facility_phone(self, facility_phone):
        """Sets the facility_phone of this StudyRpc.


        :param facility_phone: The facility_phone of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._facility_phone = facility_phone

    @property
    def facility_email(self):
        """Gets the facility_email of this StudyRpc.  # noqa: E501


        :return: The facility_email of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._facility_email

    @facility_email.setter
    def facility_email(self, facility_email):
        """Sets the facility_email of this StudyRpc.


        :param facility_email: The facility_email of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._facility_email = facility_email

    @property
    def medline(self):
        """Gets the medline of this StudyRpc.  # noqa: E501


        :return: The medline of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._medline

    @medline.setter
    def medline(self, medline):
        """Sets the medline of this StudyRpc.


        :param medline: The medline of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._medline = medline

    @property
    def result_reference(self):
        """Gets the result_reference of this StudyRpc.  # noqa: E501


        :return: The result_reference of this StudyRpc.  # noqa: E501
        :rtype: bool
        """
        return self._result_reference

    @result_reference.setter
    def result_reference(self, result_reference):
        """Sets the result_reference of this StudyRpc.


        :param result_reference: The result_reference of this StudyRpc.  # noqa: E501
        :type: bool
        """

        self._result_reference = result_reference

    @property
    def url_reference(self):
        """Gets the url_reference of this StudyRpc.  # noqa: E501


        :return: The url_reference of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._url_reference

    @url_reference.setter
    def url_reference(self, url_reference):
        """Sets the url_reference of this StudyRpc.


        :param url_reference: The url_reference of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._url_reference = url_reference

    @property
    def url_description(self):
        """Gets the url_description of this StudyRpc.  # noqa: E501


        :return: The url_description of this StudyRpc.  # noqa: E501
        :rtype: str
        """
        return self._url_description

    @url_description.setter
    def url_description(self, url_description):
        """Sets the url_description of this StudyRpc.


        :param url_description: The url_description of this StudyRpc.  # noqa: E501
        :type: str
        """

        self._url_description = url_description

    @property
    def is_not_using_sites(self):
        """Gets the is_not_using_sites of this StudyRpc.  # noqa: E501


        :return: The is_not_using_sites of this StudyRpc.  # noqa: E501
        :rtype: bool
        """
        return self._is_not_using_sites

    @is_not_using_sites.setter
    def is_not_using_sites(self, is_not_using_sites):
        """Sets the is_not_using_sites of this StudyRpc.


        :param is_not_using_sites: The is_not_using_sites of this StudyRpc.  # noqa: E501
        :type: bool
        """

        self._is_not_using_sites = is_not_using_sites

    @property
    def copy_from_template(self):
        """Gets the copy_from_template of this StudyRpc.  # noqa: E501


        :return: The copy_from_template of this StudyRpc.  # noqa: E501
        :rtype: bool
        """
        return self._copy_from_template

    @copy_from_template.setter
    def copy_from_template(self, copy_from_template):
        """Sets the copy_from_template of this StudyRpc.


        :param copy_from_template: The copy_from_template of this StudyRpc.  # noqa: E501
        :type: bool
        """

        self._copy_from_template = copy_from_template

    @property
    def settings(self):
        """Gets the settings of this StudyRpc.  # noqa: E501


        :return: The settings of this StudyRpc.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this StudyRpc.


        :param settings: The settings of this StudyRpc.  # noqa: E501
        :type: dict(str, str)
        """

        self._settings = settings

    @property
    def other_category(self):
        """Gets the other_category of this StudyRpc.  # noqa: E501


        :return: The other_category of this StudyRpc.  # noqa: E501
        :rtype: bool
        """
        return self._other_category

    @other_category.setter
    def other_category(self, other_category):
        """Sets the other_category of this StudyRpc.


        :param other_category: The other_category of this StudyRpc.  # noqa: E501
        :type: bool
        """

        self._other_category = other_category

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudyRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StudyRpc):
            return True

        return self.to_dict() != other.to_dict()
