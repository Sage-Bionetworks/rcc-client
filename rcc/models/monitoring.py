# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class Monitoring(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'partial_item': 'list[PartialItem]',
        'type': 'str',
        'crf_type': 'str',
        'display_sequence': 'int',
        'comment_required': 'bool',
        'optional': 'bool'
    }

    attribute_map = {
        'partial_item': 'partialItem',
        'type': 'type',
        'crf_type': 'crfType',
        'display_sequence': 'displaySequence',
        'comment_required': 'commentRequired',
        'optional': 'optional'
    }

    def __init__(self, partial_item=None, type=None, crf_type=None, display_sequence=None, comment_required=None, optional=None, local_vars_configuration=None):  # noqa: E501
        """Monitoring - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._partial_item = None
        self._type = None
        self._crf_type = None
        self._display_sequence = None
        self._comment_required = None
        self._optional = None
        self.discriminator = None

        if partial_item is not None:
            self.partial_item = partial_item
        if type is not None:
            self.type = type
        if crf_type is not None:
            self.crf_type = crf_type
        if display_sequence is not None:
            self.display_sequence = display_sequence
        if comment_required is not None:
            self.comment_required = comment_required
        if optional is not None:
            self.optional = optional

    @property
    def partial_item(self):
        """Gets the partial_item of this Monitoring.  # noqa: E501


        :return: The partial_item of this Monitoring.  # noqa: E501
        :rtype: list[PartialItem]
        """
        return self._partial_item

    @partial_item.setter
    def partial_item(self, partial_item):
        """Sets the partial_item of this Monitoring.


        :param partial_item: The partial_item of this Monitoring.  # noqa: E501
        :type: list[PartialItem]
        """

        self._partial_item = partial_item

    @property
    def type(self):
        """Gets the type of this Monitoring.  # noqa: E501


        :return: The type of this Monitoring.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Monitoring.


        :param type: The type of this Monitoring.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def crf_type(self):
        """Gets the crf_type of this Monitoring.  # noqa: E501


        :return: The crf_type of this Monitoring.  # noqa: E501
        :rtype: str
        """
        return self._crf_type

    @crf_type.setter
    def crf_type(self, crf_type):
        """Sets the crf_type of this Monitoring.


        :param crf_type: The crf_type of this Monitoring.  # noqa: E501
        :type: str
        """

        self._crf_type = crf_type

    @property
    def display_sequence(self):
        """Gets the display_sequence of this Monitoring.  # noqa: E501


        :return: The display_sequence of this Monitoring.  # noqa: E501
        :rtype: int
        """
        return self._display_sequence

    @display_sequence.setter
    def display_sequence(self, display_sequence):
        """Sets the display_sequence of this Monitoring.


        :param display_sequence: The display_sequence of this Monitoring.  # noqa: E501
        :type: int
        """

        self._display_sequence = display_sequence

    @property
    def comment_required(self):
        """Gets the comment_required of this Monitoring.  # noqa: E501


        :return: The comment_required of this Monitoring.  # noqa: E501
        :rtype: bool
        """
        return self._comment_required

    @comment_required.setter
    def comment_required(self, comment_required):
        """Sets the comment_required of this Monitoring.


        :param comment_required: The comment_required of this Monitoring.  # noqa: E501
        :type: bool
        """

        self._comment_required = comment_required

    @property
    def optional(self):
        """Gets the optional of this Monitoring.  # noqa: E501


        :return: The optional of this Monitoring.  # noqa: E501
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this Monitoring.


        :param optional: The optional of this Monitoring.  # noqa: E501
        :type: bool
        """

        self._optional = optional

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Monitoring):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Monitoring):
            return True

        return self.to_dict() != other.to_dict()
