# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class StudySiteRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'study_id': 'int',
        'site_name': 'str',
        'site_id': 'int',
        'protocol_id': 'str',
        'secondary_ids': 'str',
        'principal_investigator': 'str',
        'facility_name': 'str',
        'summary': 'str',
        'protocol_date': 'str',
        'completion_date': 'str',
        'start_date': 'str',
        'expected_enrollment': 'int',
        'interview_date_editable': 'bool',
        'interview_date_default': 'int',
        'collect_interview_date': 'int',
        'interviewer_name_editable': 'bool',
        'interviewer_name_default': 'int',
        'collect_interviewer_name': 'int',
        'collect_person_id': 'int',
        'enabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'study_id': 'studyId',
        'site_name': 'siteName',
        'site_id': 'siteId',
        'protocol_id': 'protocolId',
        'secondary_ids': 'secondaryIds',
        'principal_investigator': 'principalInvestigator',
        'facility_name': 'facilityName',
        'summary': 'summary',
        'protocol_date': 'protocolDate',
        'completion_date': 'completionDate',
        'start_date': 'startDate',
        'expected_enrollment': 'expectedEnrollment',
        'interview_date_editable': 'interviewDateEditable',
        'interview_date_default': 'interviewDateDefault',
        'collect_interview_date': 'collectInterviewDate',
        'interviewer_name_editable': 'interviewerNameEditable',
        'interviewer_name_default': 'interviewerNameDefault',
        'collect_interviewer_name': 'collectInterviewerName',
        'collect_person_id': 'collectPersonId',
        'enabled': 'enabled'
    }

    def __init__(self, id=None, study_id=None, site_name=None, site_id=None, protocol_id=None, secondary_ids=None, principal_investigator=None, facility_name=None, summary=None, protocol_date=None, completion_date=None, start_date=None, expected_enrollment=None, interview_date_editable=None, interview_date_default=None, collect_interview_date=None, interviewer_name_editable=None, interviewer_name_default=None, collect_interviewer_name=None, collect_person_id=None, enabled=None, local_vars_configuration=None):  # noqa: E501
        """StudySiteRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._study_id = None
        self._site_name = None
        self._site_id = None
        self._protocol_id = None
        self._secondary_ids = None
        self._principal_investigator = None
        self._facility_name = None
        self._summary = None
        self._protocol_date = None
        self._completion_date = None
        self._start_date = None
        self._expected_enrollment = None
        self._interview_date_editable = None
        self._interview_date_default = None
        self._collect_interview_date = None
        self._interviewer_name_editable = None
        self._interviewer_name_default = None
        self._collect_interviewer_name = None
        self._collect_person_id = None
        self._enabled = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if study_id is not None:
            self.study_id = study_id
        if site_name is not None:
            self.site_name = site_name
        if site_id is not None:
            self.site_id = site_id
        if protocol_id is not None:
            self.protocol_id = protocol_id
        if secondary_ids is not None:
            self.secondary_ids = secondary_ids
        if principal_investigator is not None:
            self.principal_investigator = principal_investigator
        if facility_name is not None:
            self.facility_name = facility_name
        if summary is not None:
            self.summary = summary
        if protocol_date is not None:
            self.protocol_date = protocol_date
        if completion_date is not None:
            self.completion_date = completion_date
        if start_date is not None:
            self.start_date = start_date
        if expected_enrollment is not None:
            self.expected_enrollment = expected_enrollment
        if interview_date_editable is not None:
            self.interview_date_editable = interview_date_editable
        if interview_date_default is not None:
            self.interview_date_default = interview_date_default
        if collect_interview_date is not None:
            self.collect_interview_date = collect_interview_date
        if interviewer_name_editable is not None:
            self.interviewer_name_editable = interviewer_name_editable
        if interviewer_name_default is not None:
            self.interviewer_name_default = interviewer_name_default
        if collect_interviewer_name is not None:
            self.collect_interviewer_name = collect_interviewer_name
        if collect_person_id is not None:
            self.collect_person_id = collect_person_id
        if enabled is not None:
            self.enabled = enabled

    @property
    def id(self):
        """Gets the id of this StudySiteRpc.  # noqa: E501


        :return: The id of this StudySiteRpc.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StudySiteRpc.


        :param id: The id of this StudySiteRpc.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def study_id(self):
        """Gets the study_id of this StudySiteRpc.  # noqa: E501


        :return: The study_id of this StudySiteRpc.  # noqa: E501
        :rtype: int
        """
        return self._study_id

    @study_id.setter
    def study_id(self, study_id):
        """Sets the study_id of this StudySiteRpc.


        :param study_id: The study_id of this StudySiteRpc.  # noqa: E501
        :type: int
        """

        self._study_id = study_id

    @property
    def site_name(self):
        """Gets the site_name of this StudySiteRpc.  # noqa: E501


        :return: The site_name of this StudySiteRpc.  # noqa: E501
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this StudySiteRpc.


        :param site_name: The site_name of this StudySiteRpc.  # noqa: E501
        :type: str
        """

        self._site_name = site_name

    @property
    def site_id(self):
        """Gets the site_id of this StudySiteRpc.  # noqa: E501


        :return: The site_id of this StudySiteRpc.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this StudySiteRpc.


        :param site_id: The site_id of this StudySiteRpc.  # noqa: E501
        :type: int
        """

        self._site_id = site_id

    @property
    def protocol_id(self):
        """Gets the protocol_id of this StudySiteRpc.  # noqa: E501


        :return: The protocol_id of this StudySiteRpc.  # noqa: E501
        :rtype: str
        """
        return self._protocol_id

    @protocol_id.setter
    def protocol_id(self, protocol_id):
        """Sets the protocol_id of this StudySiteRpc.


        :param protocol_id: The protocol_id of this StudySiteRpc.  # noqa: E501
        :type: str
        """

        self._protocol_id = protocol_id

    @property
    def secondary_ids(self):
        """Gets the secondary_ids of this StudySiteRpc.  # noqa: E501


        :return: The secondary_ids of this StudySiteRpc.  # noqa: E501
        :rtype: str
        """
        return self._secondary_ids

    @secondary_ids.setter
    def secondary_ids(self, secondary_ids):
        """Sets the secondary_ids of this StudySiteRpc.


        :param secondary_ids: The secondary_ids of this StudySiteRpc.  # noqa: E501
        :type: str
        """

        self._secondary_ids = secondary_ids

    @property
    def principal_investigator(self):
        """Gets the principal_investigator of this StudySiteRpc.  # noqa: E501


        :return: The principal_investigator of this StudySiteRpc.  # noqa: E501
        :rtype: str
        """
        return self._principal_investigator

    @principal_investigator.setter
    def principal_investigator(self, principal_investigator):
        """Sets the principal_investigator of this StudySiteRpc.


        :param principal_investigator: The principal_investigator of this StudySiteRpc.  # noqa: E501
        :type: str
        """

        self._principal_investigator = principal_investigator

    @property
    def facility_name(self):
        """Gets the facility_name of this StudySiteRpc.  # noqa: E501


        :return: The facility_name of this StudySiteRpc.  # noqa: E501
        :rtype: str
        """
        return self._facility_name

    @facility_name.setter
    def facility_name(self, facility_name):
        """Sets the facility_name of this StudySiteRpc.


        :param facility_name: The facility_name of this StudySiteRpc.  # noqa: E501
        :type: str
        """

        self._facility_name = facility_name

    @property
    def summary(self):
        """Gets the summary of this StudySiteRpc.  # noqa: E501


        :return: The summary of this StudySiteRpc.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this StudySiteRpc.


        :param summary: The summary of this StudySiteRpc.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def protocol_date(self):
        """Gets the protocol_date of this StudySiteRpc.  # noqa: E501


        :return: The protocol_date of this StudySiteRpc.  # noqa: E501
        :rtype: str
        """
        return self._protocol_date

    @protocol_date.setter
    def protocol_date(self, protocol_date):
        """Sets the protocol_date of this StudySiteRpc.


        :param protocol_date: The protocol_date of this StudySiteRpc.  # noqa: E501
        :type: str
        """

        self._protocol_date = protocol_date

    @property
    def completion_date(self):
        """Gets the completion_date of this StudySiteRpc.  # noqa: E501


        :return: The completion_date of this StudySiteRpc.  # noqa: E501
        :rtype: str
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this StudySiteRpc.


        :param completion_date: The completion_date of this StudySiteRpc.  # noqa: E501
        :type: str
        """

        self._completion_date = completion_date

    @property
    def start_date(self):
        """Gets the start_date of this StudySiteRpc.  # noqa: E501


        :return: The start_date of this StudySiteRpc.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this StudySiteRpc.


        :param start_date: The start_date of this StudySiteRpc.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def expected_enrollment(self):
        """Gets the expected_enrollment of this StudySiteRpc.  # noqa: E501


        :return: The expected_enrollment of this StudySiteRpc.  # noqa: E501
        :rtype: int
        """
        return self._expected_enrollment

    @expected_enrollment.setter
    def expected_enrollment(self, expected_enrollment):
        """Sets the expected_enrollment of this StudySiteRpc.


        :param expected_enrollment: The expected_enrollment of this StudySiteRpc.  # noqa: E501
        :type: int
        """

        self._expected_enrollment = expected_enrollment

    @property
    def interview_date_editable(self):
        """Gets the interview_date_editable of this StudySiteRpc.  # noqa: E501


        :return: The interview_date_editable of this StudySiteRpc.  # noqa: E501
        :rtype: bool
        """
        return self._interview_date_editable

    @interview_date_editable.setter
    def interview_date_editable(self, interview_date_editable):
        """Sets the interview_date_editable of this StudySiteRpc.


        :param interview_date_editable: The interview_date_editable of this StudySiteRpc.  # noqa: E501
        :type: bool
        """

        self._interview_date_editable = interview_date_editable

    @property
    def interview_date_default(self):
        """Gets the interview_date_default of this StudySiteRpc.  # noqa: E501


        :return: The interview_date_default of this StudySiteRpc.  # noqa: E501
        :rtype: int
        """
        return self._interview_date_default

    @interview_date_default.setter
    def interview_date_default(self, interview_date_default):
        """Sets the interview_date_default of this StudySiteRpc.


        :param interview_date_default: The interview_date_default of this StudySiteRpc.  # noqa: E501
        :type: int
        """

        self._interview_date_default = interview_date_default

    @property
    def collect_interview_date(self):
        """Gets the collect_interview_date of this StudySiteRpc.  # noqa: E501


        :return: The collect_interview_date of this StudySiteRpc.  # noqa: E501
        :rtype: int
        """
        return self._collect_interview_date

    @collect_interview_date.setter
    def collect_interview_date(self, collect_interview_date):
        """Sets the collect_interview_date of this StudySiteRpc.


        :param collect_interview_date: The collect_interview_date of this StudySiteRpc.  # noqa: E501
        :type: int
        """

        self._collect_interview_date = collect_interview_date

    @property
    def interviewer_name_editable(self):
        """Gets the interviewer_name_editable of this StudySiteRpc.  # noqa: E501


        :return: The interviewer_name_editable of this StudySiteRpc.  # noqa: E501
        :rtype: bool
        """
        return self._interviewer_name_editable

    @interviewer_name_editable.setter
    def interviewer_name_editable(self, interviewer_name_editable):
        """Sets the interviewer_name_editable of this StudySiteRpc.


        :param interviewer_name_editable: The interviewer_name_editable of this StudySiteRpc.  # noqa: E501
        :type: bool
        """

        self._interviewer_name_editable = interviewer_name_editable

    @property
    def interviewer_name_default(self):
        """Gets the interviewer_name_default of this StudySiteRpc.  # noqa: E501


        :return: The interviewer_name_default of this StudySiteRpc.  # noqa: E501
        :rtype: int
        """
        return self._interviewer_name_default

    @interviewer_name_default.setter
    def interviewer_name_default(self, interviewer_name_default):
        """Sets the interviewer_name_default of this StudySiteRpc.


        :param interviewer_name_default: The interviewer_name_default of this StudySiteRpc.  # noqa: E501
        :type: int
        """

        self._interviewer_name_default = interviewer_name_default

    @property
    def collect_interviewer_name(self):
        """Gets the collect_interviewer_name of this StudySiteRpc.  # noqa: E501


        :return: The collect_interviewer_name of this StudySiteRpc.  # noqa: E501
        :rtype: int
        """
        return self._collect_interviewer_name

    @collect_interviewer_name.setter
    def collect_interviewer_name(self, collect_interviewer_name):
        """Sets the collect_interviewer_name of this StudySiteRpc.


        :param collect_interviewer_name: The collect_interviewer_name of this StudySiteRpc.  # noqa: E501
        :type: int
        """

        self._collect_interviewer_name = collect_interviewer_name

    @property
    def collect_person_id(self):
        """Gets the collect_person_id of this StudySiteRpc.  # noqa: E501


        :return: The collect_person_id of this StudySiteRpc.  # noqa: E501
        :rtype: int
        """
        return self._collect_person_id

    @collect_person_id.setter
    def collect_person_id(self, collect_person_id):
        """Sets the collect_person_id of this StudySiteRpc.


        :param collect_person_id: The collect_person_id of this StudySiteRpc.  # noqa: E501
        :type: int
        """

        self._collect_person_id = collect_person_id

    @property
    def enabled(self):
        """Gets the enabled of this StudySiteRpc.  # noqa: E501


        :return: The enabled of this StudySiteRpc.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this StudySiteRpc.


        :param enabled: The enabled of this StudySiteRpc.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudySiteRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StudySiteRpc):
            return True

        return self.to_dict() != other.to_dict()
