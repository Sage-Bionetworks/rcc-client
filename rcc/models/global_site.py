# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class GlobalSite(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'global_site_parent': 'GlobalSiteParent',
        'source_site_initial_id': 'int',
        'name': 'str',
        'site_oid': 'str',
        'site_type_oid': 'str',
        'enabled': 'bool',
        'data_collection_enabled': 'bool',
        'facility_name': 'str',
        'facility_city': 'str',
        'facility_state': 'str',
        'facility_zip': 'str',
        'facility_country': 'str',
        'facility_contact_name': 'str',
        'facility_contact_degree': 'str',
        'facility_phone': 'str',
        'facility_email': 'str'
    }

    attribute_map = {
        'global_site_parent': 'globalSiteParent',
        'source_site_initial_id': 'sourceSiteInitialId',
        'name': 'name',
        'site_oid': 'siteOID',
        'site_type_oid': 'siteTypeOID',
        'enabled': 'enabled',
        'data_collection_enabled': 'dataCollectionEnabled',
        'facility_name': 'facilityName',
        'facility_city': 'facilityCity',
        'facility_state': 'facilityState',
        'facility_zip': 'facilityZip',
        'facility_country': 'facilityCountry',
        'facility_contact_name': 'facilityContactName',
        'facility_contact_degree': 'facilityContactDegree',
        'facility_phone': 'facilityPhone',
        'facility_email': 'facilityEmail'
    }

    def __init__(self, global_site_parent=None, source_site_initial_id=None, name=None, site_oid=None, site_type_oid=None, enabled=None, data_collection_enabled=None, facility_name=None, facility_city=None, facility_state=None, facility_zip=None, facility_country=None, facility_contact_name=None, facility_contact_degree=None, facility_phone=None, facility_email=None, local_vars_configuration=None):  # noqa: E501
        """GlobalSite - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._global_site_parent = None
        self._source_site_initial_id = None
        self._name = None
        self._site_oid = None
        self._site_type_oid = None
        self._enabled = None
        self._data_collection_enabled = None
        self._facility_name = None
        self._facility_city = None
        self._facility_state = None
        self._facility_zip = None
        self._facility_country = None
        self._facility_contact_name = None
        self._facility_contact_degree = None
        self._facility_phone = None
        self._facility_email = None
        self.discriminator = None

        self.global_site_parent = global_site_parent
        if source_site_initial_id is not None:
            self.source_site_initial_id = source_site_initial_id
        if name is not None:
            self.name = name
        if site_oid is not None:
            self.site_oid = site_oid
        if site_type_oid is not None:
            self.site_type_oid = site_type_oid
        if enabled is not None:
            self.enabled = enabled
        if data_collection_enabled is not None:
            self.data_collection_enabled = data_collection_enabled
        if facility_name is not None:
            self.facility_name = facility_name
        if facility_city is not None:
            self.facility_city = facility_city
        if facility_state is not None:
            self.facility_state = facility_state
        if facility_zip is not None:
            self.facility_zip = facility_zip
        if facility_country is not None:
            self.facility_country = facility_country
        if facility_contact_name is not None:
            self.facility_contact_name = facility_contact_name
        if facility_contact_degree is not None:
            self.facility_contact_degree = facility_contact_degree
        if facility_phone is not None:
            self.facility_phone = facility_phone
        if facility_email is not None:
            self.facility_email = facility_email

    @property
    def global_site_parent(self):
        """Gets the global_site_parent of this GlobalSite.  # noqa: E501


        :return: The global_site_parent of this GlobalSite.  # noqa: E501
        :rtype: GlobalSiteParent
        """
        return self._global_site_parent

    @global_site_parent.setter
    def global_site_parent(self, global_site_parent):
        """Sets the global_site_parent of this GlobalSite.


        :param global_site_parent: The global_site_parent of this GlobalSite.  # noqa: E501
        :type: GlobalSiteParent
        """
        if self.local_vars_configuration.client_side_validation and global_site_parent is None:  # noqa: E501
            raise ValueError("Invalid value for `global_site_parent`, must not be `None`")  # noqa: E501

        self._global_site_parent = global_site_parent

    @property
    def source_site_initial_id(self):
        """Gets the source_site_initial_id of this GlobalSite.  # noqa: E501


        :return: The source_site_initial_id of this GlobalSite.  # noqa: E501
        :rtype: int
        """
        return self._source_site_initial_id

    @source_site_initial_id.setter
    def source_site_initial_id(self, source_site_initial_id):
        """Sets the source_site_initial_id of this GlobalSite.


        :param source_site_initial_id: The source_site_initial_id of this GlobalSite.  # noqa: E501
        :type: int
        """

        self._source_site_initial_id = source_site_initial_id

    @property
    def name(self):
        """Gets the name of this GlobalSite.  # noqa: E501


        :return: The name of this GlobalSite.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GlobalSite.


        :param name: The name of this GlobalSite.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def site_oid(self):
        """Gets the site_oid of this GlobalSite.  # noqa: E501


        :return: The site_oid of this GlobalSite.  # noqa: E501
        :rtype: str
        """
        return self._site_oid

    @site_oid.setter
    def site_oid(self, site_oid):
        """Sets the site_oid of this GlobalSite.


        :param site_oid: The site_oid of this GlobalSite.  # noqa: E501
        :type: str
        """

        self._site_oid = site_oid

    @property
    def site_type_oid(self):
        """Gets the site_type_oid of this GlobalSite.  # noqa: E501


        :return: The site_type_oid of this GlobalSite.  # noqa: E501
        :rtype: str
        """
        return self._site_type_oid

    @site_type_oid.setter
    def site_type_oid(self, site_type_oid):
        """Sets the site_type_oid of this GlobalSite.


        :param site_type_oid: The site_type_oid of this GlobalSite.  # noqa: E501
        :type: str
        """

        self._site_type_oid = site_type_oid

    @property
    def enabled(self):
        """Gets the enabled of this GlobalSite.  # noqa: E501


        :return: The enabled of this GlobalSite.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this GlobalSite.


        :param enabled: The enabled of this GlobalSite.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def data_collection_enabled(self):
        """Gets the data_collection_enabled of this GlobalSite.  # noqa: E501


        :return: The data_collection_enabled of this GlobalSite.  # noqa: E501
        :rtype: bool
        """
        return self._data_collection_enabled

    @data_collection_enabled.setter
    def data_collection_enabled(self, data_collection_enabled):
        """Sets the data_collection_enabled of this GlobalSite.


        :param data_collection_enabled: The data_collection_enabled of this GlobalSite.  # noqa: E501
        :type: bool
        """

        self._data_collection_enabled = data_collection_enabled

    @property
    def facility_name(self):
        """Gets the facility_name of this GlobalSite.  # noqa: E501


        :return: The facility_name of this GlobalSite.  # noqa: E501
        :rtype: str
        """
        return self._facility_name

    @facility_name.setter
    def facility_name(self, facility_name):
        """Sets the facility_name of this GlobalSite.


        :param facility_name: The facility_name of this GlobalSite.  # noqa: E501
        :type: str
        """

        self._facility_name = facility_name

    @property
    def facility_city(self):
        """Gets the facility_city of this GlobalSite.  # noqa: E501


        :return: The facility_city of this GlobalSite.  # noqa: E501
        :rtype: str
        """
        return self._facility_city

    @facility_city.setter
    def facility_city(self, facility_city):
        """Sets the facility_city of this GlobalSite.


        :param facility_city: The facility_city of this GlobalSite.  # noqa: E501
        :type: str
        """

        self._facility_city = facility_city

    @property
    def facility_state(self):
        """Gets the facility_state of this GlobalSite.  # noqa: E501


        :return: The facility_state of this GlobalSite.  # noqa: E501
        :rtype: str
        """
        return self._facility_state

    @facility_state.setter
    def facility_state(self, facility_state):
        """Sets the facility_state of this GlobalSite.


        :param facility_state: The facility_state of this GlobalSite.  # noqa: E501
        :type: str
        """

        self._facility_state = facility_state

    @property
    def facility_zip(self):
        """Gets the facility_zip of this GlobalSite.  # noqa: E501


        :return: The facility_zip of this GlobalSite.  # noqa: E501
        :rtype: str
        """
        return self._facility_zip

    @facility_zip.setter
    def facility_zip(self, facility_zip):
        """Sets the facility_zip of this GlobalSite.


        :param facility_zip: The facility_zip of this GlobalSite.  # noqa: E501
        :type: str
        """

        self._facility_zip = facility_zip

    @property
    def facility_country(self):
        """Gets the facility_country of this GlobalSite.  # noqa: E501


        :return: The facility_country of this GlobalSite.  # noqa: E501
        :rtype: str
        """
        return self._facility_country

    @facility_country.setter
    def facility_country(self, facility_country):
        """Sets the facility_country of this GlobalSite.


        :param facility_country: The facility_country of this GlobalSite.  # noqa: E501
        :type: str
        """

        self._facility_country = facility_country

    @property
    def facility_contact_name(self):
        """Gets the facility_contact_name of this GlobalSite.  # noqa: E501


        :return: The facility_contact_name of this GlobalSite.  # noqa: E501
        :rtype: str
        """
        return self._facility_contact_name

    @facility_contact_name.setter
    def facility_contact_name(self, facility_contact_name):
        """Sets the facility_contact_name of this GlobalSite.


        :param facility_contact_name: The facility_contact_name of this GlobalSite.  # noqa: E501
        :type: str
        """

        self._facility_contact_name = facility_contact_name

    @property
    def facility_contact_degree(self):
        """Gets the facility_contact_degree of this GlobalSite.  # noqa: E501


        :return: The facility_contact_degree of this GlobalSite.  # noqa: E501
        :rtype: str
        """
        return self._facility_contact_degree

    @facility_contact_degree.setter
    def facility_contact_degree(self, facility_contact_degree):
        """Sets the facility_contact_degree of this GlobalSite.


        :param facility_contact_degree: The facility_contact_degree of this GlobalSite.  # noqa: E501
        :type: str
        """

        self._facility_contact_degree = facility_contact_degree

    @property
    def facility_phone(self):
        """Gets the facility_phone of this GlobalSite.  # noqa: E501


        :return: The facility_phone of this GlobalSite.  # noqa: E501
        :rtype: str
        """
        return self._facility_phone

    @facility_phone.setter
    def facility_phone(self, facility_phone):
        """Sets the facility_phone of this GlobalSite.


        :param facility_phone: The facility_phone of this GlobalSite.  # noqa: E501
        :type: str
        """

        self._facility_phone = facility_phone

    @property
    def facility_email(self):
        """Gets the facility_email of this GlobalSite.  # noqa: E501


        :return: The facility_email of this GlobalSite.  # noqa: E501
        :rtype: str
        """
        return self._facility_email

    @facility_email.setter
    def facility_email(self, facility_email):
        """Sets the facility_email of this GlobalSite.


        :param facility_email: The facility_email of this GlobalSite.  # noqa: E501
        :type: str
        """

        self._facility_email = facility_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalSite):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GlobalSite):
            return True

        return self.to_dict() != other.to_dict()
