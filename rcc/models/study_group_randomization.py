# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class StudyGroupRandomization(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'randomization_oid': 'str',
        'subject': 'str',
        'study_group_class': 'str',
        'properties': 'str',
        'index': 'int'
    }

    attribute_map = {
        'randomization_oid': 'randomizationOID',
        'subject': 'subject',
        'study_group_class': 'studyGroupClass',
        'properties': 'properties',
        'index': 'index'
    }

    def __init__(self, randomization_oid=None, subject=None, study_group_class=None, properties=None, index=None, local_vars_configuration=None):  # noqa: E501
        """StudyGroupRandomization - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._randomization_oid = None
        self._subject = None
        self._study_group_class = None
        self._properties = None
        self._index = None
        self.discriminator = None

        if randomization_oid is not None:
            self.randomization_oid = randomization_oid
        if subject is not None:
            self.subject = subject
        if study_group_class is not None:
            self.study_group_class = study_group_class
        if properties is not None:
            self.properties = properties
        if index is not None:
            self.index = index

    @property
    def randomization_oid(self):
        """Gets the randomization_oid of this StudyGroupRandomization.  # noqa: E501


        :return: The randomization_oid of this StudyGroupRandomization.  # noqa: E501
        :rtype: str
        """
        return self._randomization_oid

    @randomization_oid.setter
    def randomization_oid(self, randomization_oid):
        """Sets the randomization_oid of this StudyGroupRandomization.


        :param randomization_oid: The randomization_oid of this StudyGroupRandomization.  # noqa: E501
        :type: str
        """

        self._randomization_oid = randomization_oid

    @property
    def subject(self):
        """Gets the subject of this StudyGroupRandomization.  # noqa: E501


        :return: The subject of this StudyGroupRandomization.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this StudyGroupRandomization.


        :param subject: The subject of this StudyGroupRandomization.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def study_group_class(self):
        """Gets the study_group_class of this StudyGroupRandomization.  # noqa: E501


        :return: The study_group_class of this StudyGroupRandomization.  # noqa: E501
        :rtype: str
        """
        return self._study_group_class

    @study_group_class.setter
    def study_group_class(self, study_group_class):
        """Sets the study_group_class of this StudyGroupRandomization.


        :param study_group_class: The study_group_class of this StudyGroupRandomization.  # noqa: E501
        :type: str
        """

        self._study_group_class = study_group_class

    @property
    def properties(self):
        """Gets the properties of this StudyGroupRandomization.  # noqa: E501


        :return: The properties of this StudyGroupRandomization.  # noqa: E501
        :rtype: str
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this StudyGroupRandomization.


        :param properties: The properties of this StudyGroupRandomization.  # noqa: E501
        :type: str
        """

        self._properties = properties

    @property
    def index(self):
        """Gets the index of this StudyGroupRandomization.  # noqa: E501


        :return: The index of this StudyGroupRandomization.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this StudyGroupRandomization.


        :param index: The index of this StudyGroupRandomization.  # noqa: E501
        :type: int
        """

        self._index = index

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudyGroupRandomization):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StudyGroupRandomization):
            return True

        return self.to_dict() != other.to_dict()
