# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ODMcomplexTypeDefinitionItemDef(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'ODMcomplexTypeDefinitionDescription',
        'question': 'ODMcomplexTypeDefinitionQuestion',
        'external_question': 'ODMcomplexTypeDefinitionExternalQuestion',
        'measurement_unit_ref': 'list[ODMcomplexTypeDefinitionMeasurementUnitRef]',
        'range_check': 'list[ODMcomplexTypeDefinitionRangeCheck]',
        'code_list_ref': 'ODMcomplexTypeDefinitionCodeListRef',
        'role': 'list[ODMcomplexTypeDefinitionRole]',
        'alias': 'list[ODMcomplexTypeDefinitionAlias]',
        'response_type': 'str',
        'oid': 'str',
        'name': 'str',
        'data_type': 'str',
        'length': 'int',
        'significant_digits': 'int',
        'origin': 'str',
        'comment': 'str',
        'crfitem_definition': 'CRFItemDefinition',
        'sasfield_name': 'str',
        'sdsvar_name': 'str'
    }

    attribute_map = {
        'description': 'description',
        'question': 'question',
        'external_question': 'externalQuestion',
        'measurement_unit_ref': 'measurementUnitRef',
        'range_check': 'rangeCheck',
        'code_list_ref': 'codeListRef',
        'role': 'role',
        'alias': 'alias',
        'response_type': 'responseType',
        'oid': 'oid',
        'name': 'name',
        'data_type': 'dataType',
        'length': 'length',
        'significant_digits': 'significantDigits',
        'origin': 'origin',
        'comment': 'comment',
        'crfitem_definition': 'crfitemDefinition',
        'sasfield_name': 'sasfieldName',
        'sdsvar_name': 'sdsvarName'
    }

    def __init__(self, description=None, question=None, external_question=None, measurement_unit_ref=None, range_check=None, code_list_ref=None, role=None, alias=None, response_type=None, oid=None, name=None, data_type=None, length=None, significant_digits=None, origin=None, comment=None, crfitem_definition=None, sasfield_name=None, sdsvar_name=None, local_vars_configuration=None):  # noqa: E501
        """ODMcomplexTypeDefinitionItemDef - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._question = None
        self._external_question = None
        self._measurement_unit_ref = None
        self._range_check = None
        self._code_list_ref = None
        self._role = None
        self._alias = None
        self._response_type = None
        self._oid = None
        self._name = None
        self._data_type = None
        self._length = None
        self._significant_digits = None
        self._origin = None
        self._comment = None
        self._crfitem_definition = None
        self._sasfield_name = None
        self._sdsvar_name = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if question is not None:
            self.question = question
        if external_question is not None:
            self.external_question = external_question
        if measurement_unit_ref is not None:
            self.measurement_unit_ref = measurement_unit_ref
        if range_check is not None:
            self.range_check = range_check
        if code_list_ref is not None:
            self.code_list_ref = code_list_ref
        if role is not None:
            self.role = role
        if alias is not None:
            self.alias = alias
        if response_type is not None:
            self.response_type = response_type
        if oid is not None:
            self.oid = oid
        if name is not None:
            self.name = name
        if data_type is not None:
            self.data_type = data_type
        if length is not None:
            self.length = length
        if significant_digits is not None:
            self.significant_digits = significant_digits
        if origin is not None:
            self.origin = origin
        if comment is not None:
            self.comment = comment
        if crfitem_definition is not None:
            self.crfitem_definition = crfitem_definition
        if sasfield_name is not None:
            self.sasfield_name = sasfield_name
        if sdsvar_name is not None:
            self.sdsvar_name = sdsvar_name

    @property
    def description(self):
        """Gets the description of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The description of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ODMcomplexTypeDefinitionItemDef.


        :param description: The description of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: ODMcomplexTypeDefinitionDescription
        """

        self._description = description

    @property
    def question(self):
        """Gets the question of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The question of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionQuestion
        """
        return self._question

    @question.setter
    def question(self, question):
        """Sets the question of this ODMcomplexTypeDefinitionItemDef.


        :param question: The question of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: ODMcomplexTypeDefinitionQuestion
        """

        self._question = question

    @property
    def external_question(self):
        """Gets the external_question of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The external_question of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionExternalQuestion
        """
        return self._external_question

    @external_question.setter
    def external_question(self, external_question):
        """Sets the external_question of this ODMcomplexTypeDefinitionItemDef.


        :param external_question: The external_question of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: ODMcomplexTypeDefinitionExternalQuestion
        """

        self._external_question = external_question

    @property
    def measurement_unit_ref(self):
        """Gets the measurement_unit_ref of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The measurement_unit_ref of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionMeasurementUnitRef]
        """
        return self._measurement_unit_ref

    @measurement_unit_ref.setter
    def measurement_unit_ref(self, measurement_unit_ref):
        """Sets the measurement_unit_ref of this ODMcomplexTypeDefinitionItemDef.


        :param measurement_unit_ref: The measurement_unit_ref of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionMeasurementUnitRef]
        """

        self._measurement_unit_ref = measurement_unit_ref

    @property
    def range_check(self):
        """Gets the range_check of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The range_check of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionRangeCheck]
        """
        return self._range_check

    @range_check.setter
    def range_check(self, range_check):
        """Sets the range_check of this ODMcomplexTypeDefinitionItemDef.


        :param range_check: The range_check of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionRangeCheck]
        """

        self._range_check = range_check

    @property
    def code_list_ref(self):
        """Gets the code_list_ref of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The code_list_ref of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionCodeListRef
        """
        return self._code_list_ref

    @code_list_ref.setter
    def code_list_ref(self, code_list_ref):
        """Sets the code_list_ref of this ODMcomplexTypeDefinitionItemDef.


        :param code_list_ref: The code_list_ref of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: ODMcomplexTypeDefinitionCodeListRef
        """

        self._code_list_ref = code_list_ref

    @property
    def role(self):
        """Gets the role of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The role of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionRole]
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ODMcomplexTypeDefinitionItemDef.


        :param role: The role of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionRole]
        """

        self._role = role

    @property
    def alias(self):
        """Gets the alias of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The alias of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionAlias]
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ODMcomplexTypeDefinitionItemDef.


        :param alias: The alias of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionAlias]
        """

        self._alias = alias

    @property
    def response_type(self):
        """Gets the response_type of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The response_type of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: str
        """
        return self._response_type

    @response_type.setter
    def response_type(self, response_type):
        """Sets the response_type of this ODMcomplexTypeDefinitionItemDef.


        :param response_type: The response_type of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: str
        """

        self._response_type = response_type

    @property
    def oid(self):
        """Gets the oid of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The oid of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this ODMcomplexTypeDefinitionItemDef.


        :param oid: The oid of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: str
        """

        self._oid = oid

    @property
    def name(self):
        """Gets the name of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The name of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ODMcomplexTypeDefinitionItemDef.


        :param name: The name of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def data_type(self):
        """Gets the data_type of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The data_type of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ODMcomplexTypeDefinitionItemDef.


        :param data_type: The data_type of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: str
        """
        allowed_values = ["INTEGER", "FLOAT", "DATE", "DATETIME", "TIME", "TEXT", "STRING", "DOUBLE", "URI", "BOOLEAN", "HEX_BINARY", "BASE_64_BINARY", "HEX_FLOAT", "BASE_64_FLOAT", "PARTIAL_DATE", "PARTIAL_TIME", "PARTIAL_DATETIME", "DURATION_DATETIME", "INTERVAL_DATETIME", "INCOMPLETE_DATETIME", "INCOMPLETE_DATE", "INCOMPLETE_TIME"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and data_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `data_type` ({0}), must be one of {1}"  # noqa: E501
                .format(data_type, allowed_values)
            )

        self._data_type = data_type

    @property
    def length(self):
        """Gets the length of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The length of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this ODMcomplexTypeDefinitionItemDef.


        :param length: The length of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: int
        """

        self._length = length

    @property
    def significant_digits(self):
        """Gets the significant_digits of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The significant_digits of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: int
        """
        return self._significant_digits

    @significant_digits.setter
    def significant_digits(self, significant_digits):
        """Sets the significant_digits of this ODMcomplexTypeDefinitionItemDef.


        :param significant_digits: The significant_digits of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: int
        """

        self._significant_digits = significant_digits

    @property
    def origin(self):
        """Gets the origin of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The origin of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this ODMcomplexTypeDefinitionItemDef.


        :param origin: The origin of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def comment(self):
        """Gets the comment of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The comment of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ODMcomplexTypeDefinitionItemDef.


        :param comment: The comment of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def crfitem_definition(self):
        """Gets the crfitem_definition of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The crfitem_definition of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: CRFItemDefinition
        """
        return self._crfitem_definition

    @crfitem_definition.setter
    def crfitem_definition(self, crfitem_definition):
        """Sets the crfitem_definition of this ODMcomplexTypeDefinitionItemDef.


        :param crfitem_definition: The crfitem_definition of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: CRFItemDefinition
        """

        self._crfitem_definition = crfitem_definition

    @property
    def sasfield_name(self):
        """Gets the sasfield_name of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The sasfield_name of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: str
        """
        return self._sasfield_name

    @sasfield_name.setter
    def sasfield_name(self, sasfield_name):
        """Sets the sasfield_name of this ODMcomplexTypeDefinitionItemDef.


        :param sasfield_name: The sasfield_name of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: str
        """

        self._sasfield_name = sasfield_name

    @property
    def sdsvar_name(self):
        """Gets the sdsvar_name of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501


        :return: The sdsvar_name of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :rtype: str
        """
        return self._sdsvar_name

    @sdsvar_name.setter
    def sdsvar_name(self, sdsvar_name):
        """Sets the sdsvar_name of this ODMcomplexTypeDefinitionItemDef.


        :param sdsvar_name: The sdsvar_name of this ODMcomplexTypeDefinitionItemDef.  # noqa: E501
        :type: str
        """

        self._sdsvar_name = sdsvar_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionItemDef):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionItemDef):
            return True

        return self.to_dict() != other.to_dict()
