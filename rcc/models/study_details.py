# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class StudyDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'unique_identifier': 'str',
        'category': 'str',
        'brief_title': 'str',
        'status': 'str',
        'study_version': 'str',
        'official_title': 'str',
        'secondary_ids': 'str',
        'summary': 'str',
        'protocol_id': 'str',
        'detailed_description': 'str',
        'sponsor': 'str',
        'collaborators': 'str',
        'screening_start_date': 'datetime',
        'study_phase': 'str',
        'protocol_verification_date': 'datetime',
        'study_start_date': 'datetime',
        'study_completion_date': 'datetime',
        'purpose': 'str',
        'allocation': 'str',
        'masking': 'str',
        'control': 'str',
        'intervention_model': 'str',
        'study_classification': 'str',
        'duration': 'str',
        'selection': 'str',
        'timing': 'str',
        'study_type': 'str',
        'gender': 'str',
        'principal_investigator': 'str',
        'info': 'str',
        'conditions': 'str',
        'keywords': 'str',
        'eligibility_criteria': 'str',
        'minimum_age': 'int',
        'maximum_age': 'int',
        'healthy_volunteer_accepted': 'bool',
        'expected_total_enrollment': 'int',
        'facility_name': 'str',
        'facility_city': 'str',
        'facility_state': 'str',
        'facility_zip': 'str',
        'facility_country': 'str',
        'facility_contact_name': 'str',
        'facility_contact_degree': 'str',
        'facility_contact_phone': 'str',
        'facility_contact_email': 'str',
        'medline_identifier': 'str',
        'result_referense': 'bool',
        'url_reference': 'str',
        'url_description': 'str',
        'branding_logo': 'str',
        'branding_logo_file_name': 'str',
        'branding_logo_content_type': 'str',
        'pdf_footnote': 'str',
        'help_desk': 'str'
    }

    attribute_map = {
        'name': 'name',
        'unique_identifier': 'uniqueIdentifier',
        'category': 'category',
        'brief_title': 'briefTitle',
        'status': 'status',
        'study_version': 'studyVersion',
        'official_title': 'officialTitle',
        'secondary_ids': 'secondaryIds',
        'summary': 'summary',
        'protocol_id': 'protocolId',
        'detailed_description': 'detailedDescription',
        'sponsor': 'sponsor',
        'collaborators': 'collaborators',
        'screening_start_date': 'screeningStartDate',
        'study_phase': 'studyPhase',
        'protocol_verification_date': 'protocolVerificationDate',
        'study_start_date': 'studyStartDate',
        'study_completion_date': 'studyCompletionDate',
        'purpose': 'purpose',
        'allocation': 'allocation',
        'masking': 'masking',
        'control': 'control',
        'intervention_model': 'interventionModel',
        'study_classification': 'studyClassification',
        'duration': 'duration',
        'selection': 'selection',
        'timing': 'timing',
        'study_type': 'studyType',
        'gender': 'gender',
        'principal_investigator': 'principalInvestigator',
        'info': 'info',
        'conditions': 'conditions',
        'keywords': 'keywords',
        'eligibility_criteria': 'eligibilityCriteria',
        'minimum_age': 'minimumAge',
        'maximum_age': 'maximumAge',
        'healthy_volunteer_accepted': 'healthyVolunteerAccepted',
        'expected_total_enrollment': 'expectedTotalEnrollment',
        'facility_name': 'facilityName',
        'facility_city': 'facilityCity',
        'facility_state': 'facilityState',
        'facility_zip': 'facilityZip',
        'facility_country': 'facilityCountry',
        'facility_contact_name': 'facilityContactName',
        'facility_contact_degree': 'facilityContactDegree',
        'facility_contact_phone': 'facilityContactPhone',
        'facility_contact_email': 'facilityContactEmail',
        'medline_identifier': 'medlineIdentifier',
        'result_referense': 'resultReferense',
        'url_reference': 'urlReference',
        'url_description': 'urlDescription',
        'branding_logo': 'brandingLogo',
        'branding_logo_file_name': 'brandingLogoFileName',
        'branding_logo_content_type': 'brandingLogoContentType',
        'pdf_footnote': 'pdfFootnote',
        'help_desk': 'helpDesk'
    }

    def __init__(self, name=None, unique_identifier=None, category=None, brief_title=None, status=None, study_version=None, official_title=None, secondary_ids=None, summary=None, protocol_id=None, detailed_description=None, sponsor=None, collaborators=None, screening_start_date=None, study_phase=None, protocol_verification_date=None, study_start_date=None, study_completion_date=None, purpose=None, allocation=None, masking=None, control=None, intervention_model=None, study_classification=None, duration=None, selection=None, timing=None, study_type=None, gender=None, principal_investigator=None, info=None, conditions=None, keywords=None, eligibility_criteria=None, minimum_age=None, maximum_age=None, healthy_volunteer_accepted=None, expected_total_enrollment=None, facility_name=None, facility_city=None, facility_state=None, facility_zip=None, facility_country=None, facility_contact_name=None, facility_contact_degree=None, facility_contact_phone=None, facility_contact_email=None, medline_identifier=None, result_referense=None, url_reference=None, url_description=None, branding_logo=None, branding_logo_file_name=None, branding_logo_content_type=None, pdf_footnote=None, help_desk=None, local_vars_configuration=None):  # noqa: E501
        """StudyDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._unique_identifier = None
        self._category = None
        self._brief_title = None
        self._status = None
        self._study_version = None
        self._official_title = None
        self._secondary_ids = None
        self._summary = None
        self._protocol_id = None
        self._detailed_description = None
        self._sponsor = None
        self._collaborators = None
        self._screening_start_date = None
        self._study_phase = None
        self._protocol_verification_date = None
        self._study_start_date = None
        self._study_completion_date = None
        self._purpose = None
        self._allocation = None
        self._masking = None
        self._control = None
        self._intervention_model = None
        self._study_classification = None
        self._duration = None
        self._selection = None
        self._timing = None
        self._study_type = None
        self._gender = None
        self._principal_investigator = None
        self._info = None
        self._conditions = None
        self._keywords = None
        self._eligibility_criteria = None
        self._minimum_age = None
        self._maximum_age = None
        self._healthy_volunteer_accepted = None
        self._expected_total_enrollment = None
        self._facility_name = None
        self._facility_city = None
        self._facility_state = None
        self._facility_zip = None
        self._facility_country = None
        self._facility_contact_name = None
        self._facility_contact_degree = None
        self._facility_contact_phone = None
        self._facility_contact_email = None
        self._medline_identifier = None
        self._result_referense = None
        self._url_reference = None
        self._url_description = None
        self._branding_logo = None
        self._branding_logo_file_name = None
        self._branding_logo_content_type = None
        self._pdf_footnote = None
        self._help_desk = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if unique_identifier is not None:
            self.unique_identifier = unique_identifier
        if category is not None:
            self.category = category
        if brief_title is not None:
            self.brief_title = brief_title
        if status is not None:
            self.status = status
        if study_version is not None:
            self.study_version = study_version
        if official_title is not None:
            self.official_title = official_title
        if secondary_ids is not None:
            self.secondary_ids = secondary_ids
        if summary is not None:
            self.summary = summary
        if protocol_id is not None:
            self.protocol_id = protocol_id
        if detailed_description is not None:
            self.detailed_description = detailed_description
        if sponsor is not None:
            self.sponsor = sponsor
        if collaborators is not None:
            self.collaborators = collaborators
        if screening_start_date is not None:
            self.screening_start_date = screening_start_date
        if study_phase is not None:
            self.study_phase = study_phase
        if protocol_verification_date is not None:
            self.protocol_verification_date = protocol_verification_date
        if study_start_date is not None:
            self.study_start_date = study_start_date
        if study_completion_date is not None:
            self.study_completion_date = study_completion_date
        if purpose is not None:
            self.purpose = purpose
        if allocation is not None:
            self.allocation = allocation
        if masking is not None:
            self.masking = masking
        if control is not None:
            self.control = control
        if intervention_model is not None:
            self.intervention_model = intervention_model
        if study_classification is not None:
            self.study_classification = study_classification
        if duration is not None:
            self.duration = duration
        if selection is not None:
            self.selection = selection
        if timing is not None:
            self.timing = timing
        if study_type is not None:
            self.study_type = study_type
        if gender is not None:
            self.gender = gender
        if principal_investigator is not None:
            self.principal_investigator = principal_investigator
        if info is not None:
            self.info = info
        if conditions is not None:
            self.conditions = conditions
        if keywords is not None:
            self.keywords = keywords
        if eligibility_criteria is not None:
            self.eligibility_criteria = eligibility_criteria
        if minimum_age is not None:
            self.minimum_age = minimum_age
        if maximum_age is not None:
            self.maximum_age = maximum_age
        if healthy_volunteer_accepted is not None:
            self.healthy_volunteer_accepted = healthy_volunteer_accepted
        if expected_total_enrollment is not None:
            self.expected_total_enrollment = expected_total_enrollment
        if facility_name is not None:
            self.facility_name = facility_name
        if facility_city is not None:
            self.facility_city = facility_city
        if facility_state is not None:
            self.facility_state = facility_state
        if facility_zip is not None:
            self.facility_zip = facility_zip
        if facility_country is not None:
            self.facility_country = facility_country
        if facility_contact_name is not None:
            self.facility_contact_name = facility_contact_name
        if facility_contact_degree is not None:
            self.facility_contact_degree = facility_contact_degree
        if facility_contact_phone is not None:
            self.facility_contact_phone = facility_contact_phone
        if facility_contact_email is not None:
            self.facility_contact_email = facility_contact_email
        if medline_identifier is not None:
            self.medline_identifier = medline_identifier
        if result_referense is not None:
            self.result_referense = result_referense
        if url_reference is not None:
            self.url_reference = url_reference
        if url_description is not None:
            self.url_description = url_description
        if branding_logo is not None:
            self.branding_logo = branding_logo
        if branding_logo_file_name is not None:
            self.branding_logo_file_name = branding_logo_file_name
        if branding_logo_content_type is not None:
            self.branding_logo_content_type = branding_logo_content_type
        if pdf_footnote is not None:
            self.pdf_footnote = pdf_footnote
        if help_desk is not None:
            self.help_desk = help_desk

    @property
    def name(self):
        """Gets the name of this StudyDetails.  # noqa: E501


        :return: The name of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StudyDetails.


        :param name: The name of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def unique_identifier(self):
        """Gets the unique_identifier of this StudyDetails.  # noqa: E501


        :return: The unique_identifier of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._unique_identifier

    @unique_identifier.setter
    def unique_identifier(self, unique_identifier):
        """Sets the unique_identifier of this StudyDetails.


        :param unique_identifier: The unique_identifier of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._unique_identifier = unique_identifier

    @property
    def category(self):
        """Gets the category of this StudyDetails.  # noqa: E501


        :return: The category of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this StudyDetails.


        :param category: The category of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def brief_title(self):
        """Gets the brief_title of this StudyDetails.  # noqa: E501


        :return: The brief_title of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._brief_title

    @brief_title.setter
    def brief_title(self, brief_title):
        """Sets the brief_title of this StudyDetails.


        :param brief_title: The brief_title of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._brief_title = brief_title

    @property
    def status(self):
        """Gets the status of this StudyDetails.  # noqa: E501


        :return: The status of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StudyDetails.


        :param status: The status of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def study_version(self):
        """Gets the study_version of this StudyDetails.  # noqa: E501


        :return: The study_version of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._study_version

    @study_version.setter
    def study_version(self, study_version):
        """Sets the study_version of this StudyDetails.


        :param study_version: The study_version of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._study_version = study_version

    @property
    def official_title(self):
        """Gets the official_title of this StudyDetails.  # noqa: E501


        :return: The official_title of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._official_title

    @official_title.setter
    def official_title(self, official_title):
        """Sets the official_title of this StudyDetails.


        :param official_title: The official_title of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._official_title = official_title

    @property
    def secondary_ids(self):
        """Gets the secondary_ids of this StudyDetails.  # noqa: E501


        :return: The secondary_ids of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._secondary_ids

    @secondary_ids.setter
    def secondary_ids(self, secondary_ids):
        """Sets the secondary_ids of this StudyDetails.


        :param secondary_ids: The secondary_ids of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._secondary_ids = secondary_ids

    @property
    def summary(self):
        """Gets the summary of this StudyDetails.  # noqa: E501


        :return: The summary of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this StudyDetails.


        :param summary: The summary of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def protocol_id(self):
        """Gets the protocol_id of this StudyDetails.  # noqa: E501


        :return: The protocol_id of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._protocol_id

    @protocol_id.setter
    def protocol_id(self, protocol_id):
        """Sets the protocol_id of this StudyDetails.


        :param protocol_id: The protocol_id of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._protocol_id = protocol_id

    @property
    def detailed_description(self):
        """Gets the detailed_description of this StudyDetails.  # noqa: E501


        :return: The detailed_description of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._detailed_description

    @detailed_description.setter
    def detailed_description(self, detailed_description):
        """Sets the detailed_description of this StudyDetails.


        :param detailed_description: The detailed_description of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._detailed_description = detailed_description

    @property
    def sponsor(self):
        """Gets the sponsor of this StudyDetails.  # noqa: E501


        :return: The sponsor of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._sponsor

    @sponsor.setter
    def sponsor(self, sponsor):
        """Sets the sponsor of this StudyDetails.


        :param sponsor: The sponsor of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._sponsor = sponsor

    @property
    def collaborators(self):
        """Gets the collaborators of this StudyDetails.  # noqa: E501


        :return: The collaborators of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._collaborators

    @collaborators.setter
    def collaborators(self, collaborators):
        """Sets the collaborators of this StudyDetails.


        :param collaborators: The collaborators of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._collaborators = collaborators

    @property
    def screening_start_date(self):
        """Gets the screening_start_date of this StudyDetails.  # noqa: E501


        :return: The screening_start_date of this StudyDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._screening_start_date

    @screening_start_date.setter
    def screening_start_date(self, screening_start_date):
        """Sets the screening_start_date of this StudyDetails.


        :param screening_start_date: The screening_start_date of this StudyDetails.  # noqa: E501
        :type: datetime
        """

        self._screening_start_date = screening_start_date

    @property
    def study_phase(self):
        """Gets the study_phase of this StudyDetails.  # noqa: E501


        :return: The study_phase of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._study_phase

    @study_phase.setter
    def study_phase(self, study_phase):
        """Sets the study_phase of this StudyDetails.


        :param study_phase: The study_phase of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._study_phase = study_phase

    @property
    def protocol_verification_date(self):
        """Gets the protocol_verification_date of this StudyDetails.  # noqa: E501


        :return: The protocol_verification_date of this StudyDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._protocol_verification_date

    @protocol_verification_date.setter
    def protocol_verification_date(self, protocol_verification_date):
        """Sets the protocol_verification_date of this StudyDetails.


        :param protocol_verification_date: The protocol_verification_date of this StudyDetails.  # noqa: E501
        :type: datetime
        """

        self._protocol_verification_date = protocol_verification_date

    @property
    def study_start_date(self):
        """Gets the study_start_date of this StudyDetails.  # noqa: E501


        :return: The study_start_date of this StudyDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._study_start_date

    @study_start_date.setter
    def study_start_date(self, study_start_date):
        """Sets the study_start_date of this StudyDetails.


        :param study_start_date: The study_start_date of this StudyDetails.  # noqa: E501
        :type: datetime
        """

        self._study_start_date = study_start_date

    @property
    def study_completion_date(self):
        """Gets the study_completion_date of this StudyDetails.  # noqa: E501


        :return: The study_completion_date of this StudyDetails.  # noqa: E501
        :rtype: datetime
        """
        return self._study_completion_date

    @study_completion_date.setter
    def study_completion_date(self, study_completion_date):
        """Sets the study_completion_date of this StudyDetails.


        :param study_completion_date: The study_completion_date of this StudyDetails.  # noqa: E501
        :type: datetime
        """

        self._study_completion_date = study_completion_date

    @property
    def purpose(self):
        """Gets the purpose of this StudyDetails.  # noqa: E501


        :return: The purpose of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this StudyDetails.


        :param purpose: The purpose of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def allocation(self):
        """Gets the allocation of this StudyDetails.  # noqa: E501


        :return: The allocation of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._allocation

    @allocation.setter
    def allocation(self, allocation):
        """Sets the allocation of this StudyDetails.


        :param allocation: The allocation of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._allocation = allocation

    @property
    def masking(self):
        """Gets the masking of this StudyDetails.  # noqa: E501


        :return: The masking of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._masking

    @masking.setter
    def masking(self, masking):
        """Sets the masking of this StudyDetails.


        :param masking: The masking of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._masking = masking

    @property
    def control(self):
        """Gets the control of this StudyDetails.  # noqa: E501


        :return: The control of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._control

    @control.setter
    def control(self, control):
        """Sets the control of this StudyDetails.


        :param control: The control of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._control = control

    @property
    def intervention_model(self):
        """Gets the intervention_model of this StudyDetails.  # noqa: E501


        :return: The intervention_model of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._intervention_model

    @intervention_model.setter
    def intervention_model(self, intervention_model):
        """Sets the intervention_model of this StudyDetails.


        :param intervention_model: The intervention_model of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._intervention_model = intervention_model

    @property
    def study_classification(self):
        """Gets the study_classification of this StudyDetails.  # noqa: E501


        :return: The study_classification of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._study_classification

    @study_classification.setter
    def study_classification(self, study_classification):
        """Sets the study_classification of this StudyDetails.


        :param study_classification: The study_classification of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._study_classification = study_classification

    @property
    def duration(self):
        """Gets the duration of this StudyDetails.  # noqa: E501


        :return: The duration of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this StudyDetails.


        :param duration: The duration of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def selection(self):
        """Gets the selection of this StudyDetails.  # noqa: E501


        :return: The selection of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._selection

    @selection.setter
    def selection(self, selection):
        """Sets the selection of this StudyDetails.


        :param selection: The selection of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._selection = selection

    @property
    def timing(self):
        """Gets the timing of this StudyDetails.  # noqa: E501


        :return: The timing of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._timing

    @timing.setter
    def timing(self, timing):
        """Sets the timing of this StudyDetails.


        :param timing: The timing of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._timing = timing

    @property
    def study_type(self):
        """Gets the study_type of this StudyDetails.  # noqa: E501


        :return: The study_type of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._study_type

    @study_type.setter
    def study_type(self, study_type):
        """Sets the study_type of this StudyDetails.


        :param study_type: The study_type of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._study_type = study_type

    @property
    def gender(self):
        """Gets the gender of this StudyDetails.  # noqa: E501


        :return: The gender of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this StudyDetails.


        :param gender: The gender of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def principal_investigator(self):
        """Gets the principal_investigator of this StudyDetails.  # noqa: E501


        :return: The principal_investigator of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._principal_investigator

    @principal_investigator.setter
    def principal_investigator(self, principal_investigator):
        """Sets the principal_investigator of this StudyDetails.


        :param principal_investigator: The principal_investigator of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._principal_investigator = principal_investigator

    @property
    def info(self):
        """Gets the info of this StudyDetails.  # noqa: E501


        :return: The info of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this StudyDetails.


        :param info: The info of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._info = info

    @property
    def conditions(self):
        """Gets the conditions of this StudyDetails.  # noqa: E501


        :return: The conditions of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this StudyDetails.


        :param conditions: The conditions of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._conditions = conditions

    @property
    def keywords(self):
        """Gets the keywords of this StudyDetails.  # noqa: E501


        :return: The keywords of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this StudyDetails.


        :param keywords: The keywords of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._keywords = keywords

    @property
    def eligibility_criteria(self):
        """Gets the eligibility_criteria of this StudyDetails.  # noqa: E501


        :return: The eligibility_criteria of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._eligibility_criteria

    @eligibility_criteria.setter
    def eligibility_criteria(self, eligibility_criteria):
        """Sets the eligibility_criteria of this StudyDetails.


        :param eligibility_criteria: The eligibility_criteria of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._eligibility_criteria = eligibility_criteria

    @property
    def minimum_age(self):
        """Gets the minimum_age of this StudyDetails.  # noqa: E501


        :return: The minimum_age of this StudyDetails.  # noqa: E501
        :rtype: int
        """
        return self._minimum_age

    @minimum_age.setter
    def minimum_age(self, minimum_age):
        """Sets the minimum_age of this StudyDetails.


        :param minimum_age: The minimum_age of this StudyDetails.  # noqa: E501
        :type: int
        """

        self._minimum_age = minimum_age

    @property
    def maximum_age(self):
        """Gets the maximum_age of this StudyDetails.  # noqa: E501


        :return: The maximum_age of this StudyDetails.  # noqa: E501
        :rtype: int
        """
        return self._maximum_age

    @maximum_age.setter
    def maximum_age(self, maximum_age):
        """Sets the maximum_age of this StudyDetails.


        :param maximum_age: The maximum_age of this StudyDetails.  # noqa: E501
        :type: int
        """

        self._maximum_age = maximum_age

    @property
    def healthy_volunteer_accepted(self):
        """Gets the healthy_volunteer_accepted of this StudyDetails.  # noqa: E501


        :return: The healthy_volunteer_accepted of this StudyDetails.  # noqa: E501
        :rtype: bool
        """
        return self._healthy_volunteer_accepted

    @healthy_volunteer_accepted.setter
    def healthy_volunteer_accepted(self, healthy_volunteer_accepted):
        """Sets the healthy_volunteer_accepted of this StudyDetails.


        :param healthy_volunteer_accepted: The healthy_volunteer_accepted of this StudyDetails.  # noqa: E501
        :type: bool
        """

        self._healthy_volunteer_accepted = healthy_volunteer_accepted

    @property
    def expected_total_enrollment(self):
        """Gets the expected_total_enrollment of this StudyDetails.  # noqa: E501


        :return: The expected_total_enrollment of this StudyDetails.  # noqa: E501
        :rtype: int
        """
        return self._expected_total_enrollment

    @expected_total_enrollment.setter
    def expected_total_enrollment(self, expected_total_enrollment):
        """Sets the expected_total_enrollment of this StudyDetails.


        :param expected_total_enrollment: The expected_total_enrollment of this StudyDetails.  # noqa: E501
        :type: int
        """

        self._expected_total_enrollment = expected_total_enrollment

    @property
    def facility_name(self):
        """Gets the facility_name of this StudyDetails.  # noqa: E501


        :return: The facility_name of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._facility_name

    @facility_name.setter
    def facility_name(self, facility_name):
        """Sets the facility_name of this StudyDetails.


        :param facility_name: The facility_name of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._facility_name = facility_name

    @property
    def facility_city(self):
        """Gets the facility_city of this StudyDetails.  # noqa: E501


        :return: The facility_city of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._facility_city

    @facility_city.setter
    def facility_city(self, facility_city):
        """Sets the facility_city of this StudyDetails.


        :param facility_city: The facility_city of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._facility_city = facility_city

    @property
    def facility_state(self):
        """Gets the facility_state of this StudyDetails.  # noqa: E501


        :return: The facility_state of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._facility_state

    @facility_state.setter
    def facility_state(self, facility_state):
        """Sets the facility_state of this StudyDetails.


        :param facility_state: The facility_state of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._facility_state = facility_state

    @property
    def facility_zip(self):
        """Gets the facility_zip of this StudyDetails.  # noqa: E501


        :return: The facility_zip of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._facility_zip

    @facility_zip.setter
    def facility_zip(self, facility_zip):
        """Sets the facility_zip of this StudyDetails.


        :param facility_zip: The facility_zip of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._facility_zip = facility_zip

    @property
    def facility_country(self):
        """Gets the facility_country of this StudyDetails.  # noqa: E501


        :return: The facility_country of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._facility_country

    @facility_country.setter
    def facility_country(self, facility_country):
        """Sets the facility_country of this StudyDetails.


        :param facility_country: The facility_country of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._facility_country = facility_country

    @property
    def facility_contact_name(self):
        """Gets the facility_contact_name of this StudyDetails.  # noqa: E501


        :return: The facility_contact_name of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._facility_contact_name

    @facility_contact_name.setter
    def facility_contact_name(self, facility_contact_name):
        """Sets the facility_contact_name of this StudyDetails.


        :param facility_contact_name: The facility_contact_name of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._facility_contact_name = facility_contact_name

    @property
    def facility_contact_degree(self):
        """Gets the facility_contact_degree of this StudyDetails.  # noqa: E501


        :return: The facility_contact_degree of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._facility_contact_degree

    @facility_contact_degree.setter
    def facility_contact_degree(self, facility_contact_degree):
        """Sets the facility_contact_degree of this StudyDetails.


        :param facility_contact_degree: The facility_contact_degree of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._facility_contact_degree = facility_contact_degree

    @property
    def facility_contact_phone(self):
        """Gets the facility_contact_phone of this StudyDetails.  # noqa: E501


        :return: The facility_contact_phone of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._facility_contact_phone

    @facility_contact_phone.setter
    def facility_contact_phone(self, facility_contact_phone):
        """Sets the facility_contact_phone of this StudyDetails.


        :param facility_contact_phone: The facility_contact_phone of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._facility_contact_phone = facility_contact_phone

    @property
    def facility_contact_email(self):
        """Gets the facility_contact_email of this StudyDetails.  # noqa: E501


        :return: The facility_contact_email of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._facility_contact_email

    @facility_contact_email.setter
    def facility_contact_email(self, facility_contact_email):
        """Sets the facility_contact_email of this StudyDetails.


        :param facility_contact_email: The facility_contact_email of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._facility_contact_email = facility_contact_email

    @property
    def medline_identifier(self):
        """Gets the medline_identifier of this StudyDetails.  # noqa: E501


        :return: The medline_identifier of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._medline_identifier

    @medline_identifier.setter
    def medline_identifier(self, medline_identifier):
        """Sets the medline_identifier of this StudyDetails.


        :param medline_identifier: The medline_identifier of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._medline_identifier = medline_identifier

    @property
    def result_referense(self):
        """Gets the result_referense of this StudyDetails.  # noqa: E501


        :return: The result_referense of this StudyDetails.  # noqa: E501
        :rtype: bool
        """
        return self._result_referense

    @result_referense.setter
    def result_referense(self, result_referense):
        """Sets the result_referense of this StudyDetails.


        :param result_referense: The result_referense of this StudyDetails.  # noqa: E501
        :type: bool
        """

        self._result_referense = result_referense

    @property
    def url_reference(self):
        """Gets the url_reference of this StudyDetails.  # noqa: E501


        :return: The url_reference of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._url_reference

    @url_reference.setter
    def url_reference(self, url_reference):
        """Sets the url_reference of this StudyDetails.


        :param url_reference: The url_reference of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._url_reference = url_reference

    @property
    def url_description(self):
        """Gets the url_description of this StudyDetails.  # noqa: E501


        :return: The url_description of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._url_description

    @url_description.setter
    def url_description(self, url_description):
        """Sets the url_description of this StudyDetails.


        :param url_description: The url_description of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._url_description = url_description

    @property
    def branding_logo(self):
        """Gets the branding_logo of this StudyDetails.  # noqa: E501


        :return: The branding_logo of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._branding_logo

    @branding_logo.setter
    def branding_logo(self, branding_logo):
        """Sets the branding_logo of this StudyDetails.


        :param branding_logo: The branding_logo of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._branding_logo = branding_logo

    @property
    def branding_logo_file_name(self):
        """Gets the branding_logo_file_name of this StudyDetails.  # noqa: E501


        :return: The branding_logo_file_name of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._branding_logo_file_name

    @branding_logo_file_name.setter
    def branding_logo_file_name(self, branding_logo_file_name):
        """Sets the branding_logo_file_name of this StudyDetails.


        :param branding_logo_file_name: The branding_logo_file_name of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._branding_logo_file_name = branding_logo_file_name

    @property
    def branding_logo_content_type(self):
        """Gets the branding_logo_content_type of this StudyDetails.  # noqa: E501


        :return: The branding_logo_content_type of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._branding_logo_content_type

    @branding_logo_content_type.setter
    def branding_logo_content_type(self, branding_logo_content_type):
        """Sets the branding_logo_content_type of this StudyDetails.


        :param branding_logo_content_type: The branding_logo_content_type of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._branding_logo_content_type = branding_logo_content_type

    @property
    def pdf_footnote(self):
        """Gets the pdf_footnote of this StudyDetails.  # noqa: E501


        :return: The pdf_footnote of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._pdf_footnote

    @pdf_footnote.setter
    def pdf_footnote(self, pdf_footnote):
        """Sets the pdf_footnote of this StudyDetails.


        :param pdf_footnote: The pdf_footnote of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._pdf_footnote = pdf_footnote

    @property
    def help_desk(self):
        """Gets the help_desk of this StudyDetails.  # noqa: E501


        :return: The help_desk of this StudyDetails.  # noqa: E501
        :rtype: str
        """
        return self._help_desk

    @help_desk.setter
    def help_desk(self, help_desk):
        """Sets the help_desk of this StudyDetails.


        :param help_desk: The help_desk of this StudyDetails.  # noqa: E501
        :type: str
        """

        self._help_desk = help_desk

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudyDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StudyDetails):
            return True

        return self.to_dict() != other.to_dict()
