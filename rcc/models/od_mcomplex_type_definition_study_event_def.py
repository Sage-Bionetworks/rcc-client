# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ODMcomplexTypeDefinitionStudyEventDef(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'ODMcomplexTypeDefinitionDescription',
        'form_ref': 'list[ODMcomplexTypeDefinitionFormRef]',
        'alias': 'list[ODMcomplexTypeDefinitionAlias]',
        'unique_event_name': 'str',
        'study_event_definition_type': 'str',
        'display_sequence': 'int',
        'day_schedule': 'int',
        'day_min': 'int',
        'day_max': 'int',
        'grace_hour_min': 'int',
        'grace_hour_max': 'int',
        'grace_minute_min': 'int',
        'grace_minute_max': 'int',
        'can_edit_before': 'bool',
        'can_edit_after': 'bool',
        'weekdays_only': 'bool',
        'dynamic_event': 'bool',
        'repeat_frequency': 'int',
        'repeat_for_how_many_days': 'int',
        'created_by_rule': 'bool',
        'oid': 'str',
        'name': 'str',
        'repeating': 'str',
        'type': 'str',
        'category': 'str',
        'econsent_event': 'bool'
    }

    attribute_map = {
        'description': 'description',
        'form_ref': 'formRef',
        'alias': 'alias',
        'unique_event_name': 'uniqueEventName',
        'study_event_definition_type': 'studyEventDefinitionType',
        'display_sequence': 'displaySequence',
        'day_schedule': 'daySchedule',
        'day_min': 'dayMin',
        'day_max': 'dayMax',
        'grace_hour_min': 'graceHourMin',
        'grace_hour_max': 'graceHourMax',
        'grace_minute_min': 'graceMinuteMin',
        'grace_minute_max': 'graceMinuteMax',
        'can_edit_before': 'canEditBefore',
        'can_edit_after': 'canEditAfter',
        'weekdays_only': 'weekdaysOnly',
        'dynamic_event': 'dynamicEvent',
        'repeat_frequency': 'repeatFrequency',
        'repeat_for_how_many_days': 'repeatForHowManyDays',
        'created_by_rule': 'createdByRule',
        'oid': 'oid',
        'name': 'name',
        'repeating': 'repeating',
        'type': 'type',
        'category': 'category',
        'econsent_event': 'econsentEvent'
    }

    def __init__(self, description=None, form_ref=None, alias=None, unique_event_name=None, study_event_definition_type=None, display_sequence=None, day_schedule=None, day_min=None, day_max=None, grace_hour_min=None, grace_hour_max=None, grace_minute_min=None, grace_minute_max=None, can_edit_before=None, can_edit_after=None, weekdays_only=None, dynamic_event=None, repeat_frequency=None, repeat_for_how_many_days=None, created_by_rule=None, oid=None, name=None, repeating=None, type=None, category=None, econsent_event=None, local_vars_configuration=None):  # noqa: E501
        """ODMcomplexTypeDefinitionStudyEventDef - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._form_ref = None
        self._alias = None
        self._unique_event_name = None
        self._study_event_definition_type = None
        self._display_sequence = None
        self._day_schedule = None
        self._day_min = None
        self._day_max = None
        self._grace_hour_min = None
        self._grace_hour_max = None
        self._grace_minute_min = None
        self._grace_minute_max = None
        self._can_edit_before = None
        self._can_edit_after = None
        self._weekdays_only = None
        self._dynamic_event = None
        self._repeat_frequency = None
        self._repeat_for_how_many_days = None
        self._created_by_rule = None
        self._oid = None
        self._name = None
        self._repeating = None
        self._type = None
        self._category = None
        self._econsent_event = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if form_ref is not None:
            self.form_ref = form_ref
        if alias is not None:
            self.alias = alias
        if unique_event_name is not None:
            self.unique_event_name = unique_event_name
        if study_event_definition_type is not None:
            self.study_event_definition_type = study_event_definition_type
        if display_sequence is not None:
            self.display_sequence = display_sequence
        if day_schedule is not None:
            self.day_schedule = day_schedule
        if day_min is not None:
            self.day_min = day_min
        if day_max is not None:
            self.day_max = day_max
        if grace_hour_min is not None:
            self.grace_hour_min = grace_hour_min
        if grace_hour_max is not None:
            self.grace_hour_max = grace_hour_max
        if grace_minute_min is not None:
            self.grace_minute_min = grace_minute_min
        if grace_minute_max is not None:
            self.grace_minute_max = grace_minute_max
        if can_edit_before is not None:
            self.can_edit_before = can_edit_before
        if can_edit_after is not None:
            self.can_edit_after = can_edit_after
        if weekdays_only is not None:
            self.weekdays_only = weekdays_only
        if dynamic_event is not None:
            self.dynamic_event = dynamic_event
        if repeat_frequency is not None:
            self.repeat_frequency = repeat_frequency
        if repeat_for_how_many_days is not None:
            self.repeat_for_how_many_days = repeat_for_how_many_days
        if created_by_rule is not None:
            self.created_by_rule = created_by_rule
        if oid is not None:
            self.oid = oid
        if name is not None:
            self.name = name
        if repeating is not None:
            self.repeating = repeating
        if type is not None:
            self.type = type
        if category is not None:
            self.category = category
        if econsent_event is not None:
            self.econsent_event = econsent_event

    @property
    def description(self):
        """Gets the description of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The description of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ODMcomplexTypeDefinitionStudyEventDef.


        :param description: The description of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: ODMcomplexTypeDefinitionDescription
        """

        self._description = description

    @property
    def form_ref(self):
        """Gets the form_ref of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The form_ref of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionFormRef]
        """
        return self._form_ref

    @form_ref.setter
    def form_ref(self, form_ref):
        """Sets the form_ref of this ODMcomplexTypeDefinitionStudyEventDef.


        :param form_ref: The form_ref of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionFormRef]
        """

        self._form_ref = form_ref

    @property
    def alias(self):
        """Gets the alias of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The alias of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionAlias]
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ODMcomplexTypeDefinitionStudyEventDef.


        :param alias: The alias of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionAlias]
        """

        self._alias = alias

    @property
    def unique_event_name(self):
        """Gets the unique_event_name of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The unique_event_name of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: str
        """
        return self._unique_event_name

    @unique_event_name.setter
    def unique_event_name(self, unique_event_name):
        """Sets the unique_event_name of this ODMcomplexTypeDefinitionStudyEventDef.


        :param unique_event_name: The unique_event_name of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: str
        """

        self._unique_event_name = unique_event_name

    @property
    def study_event_definition_type(self):
        """Gets the study_event_definition_type of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The study_event_definition_type of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: str
        """
        return self._study_event_definition_type

    @study_event_definition_type.setter
    def study_event_definition_type(self, study_event_definition_type):
        """Sets the study_event_definition_type of this ODMcomplexTypeDefinitionStudyEventDef.


        :param study_event_definition_type: The study_event_definition_type of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: str
        """

        self._study_event_definition_type = study_event_definition_type

    @property
    def display_sequence(self):
        """Gets the display_sequence of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The display_sequence of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: int
        """
        return self._display_sequence

    @display_sequence.setter
    def display_sequence(self, display_sequence):
        """Sets the display_sequence of this ODMcomplexTypeDefinitionStudyEventDef.


        :param display_sequence: The display_sequence of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: int
        """

        self._display_sequence = display_sequence

    @property
    def day_schedule(self):
        """Gets the day_schedule of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The day_schedule of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: int
        """
        return self._day_schedule

    @day_schedule.setter
    def day_schedule(self, day_schedule):
        """Sets the day_schedule of this ODMcomplexTypeDefinitionStudyEventDef.


        :param day_schedule: The day_schedule of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: int
        """

        self._day_schedule = day_schedule

    @property
    def day_min(self):
        """Gets the day_min of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The day_min of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: int
        """
        return self._day_min

    @day_min.setter
    def day_min(self, day_min):
        """Sets the day_min of this ODMcomplexTypeDefinitionStudyEventDef.


        :param day_min: The day_min of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: int
        """

        self._day_min = day_min

    @property
    def day_max(self):
        """Gets the day_max of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The day_max of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: int
        """
        return self._day_max

    @day_max.setter
    def day_max(self, day_max):
        """Sets the day_max of this ODMcomplexTypeDefinitionStudyEventDef.


        :param day_max: The day_max of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: int
        """

        self._day_max = day_max

    @property
    def grace_hour_min(self):
        """Gets the grace_hour_min of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The grace_hour_min of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: int
        """
        return self._grace_hour_min

    @grace_hour_min.setter
    def grace_hour_min(self, grace_hour_min):
        """Sets the grace_hour_min of this ODMcomplexTypeDefinitionStudyEventDef.


        :param grace_hour_min: The grace_hour_min of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: int
        """

        self._grace_hour_min = grace_hour_min

    @property
    def grace_hour_max(self):
        """Gets the grace_hour_max of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The grace_hour_max of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: int
        """
        return self._grace_hour_max

    @grace_hour_max.setter
    def grace_hour_max(self, grace_hour_max):
        """Sets the grace_hour_max of this ODMcomplexTypeDefinitionStudyEventDef.


        :param grace_hour_max: The grace_hour_max of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: int
        """

        self._grace_hour_max = grace_hour_max

    @property
    def grace_minute_min(self):
        """Gets the grace_minute_min of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The grace_minute_min of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: int
        """
        return self._grace_minute_min

    @grace_minute_min.setter
    def grace_minute_min(self, grace_minute_min):
        """Sets the grace_minute_min of this ODMcomplexTypeDefinitionStudyEventDef.


        :param grace_minute_min: The grace_minute_min of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: int
        """

        self._grace_minute_min = grace_minute_min

    @property
    def grace_minute_max(self):
        """Gets the grace_minute_max of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The grace_minute_max of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: int
        """
        return self._grace_minute_max

    @grace_minute_max.setter
    def grace_minute_max(self, grace_minute_max):
        """Sets the grace_minute_max of this ODMcomplexTypeDefinitionStudyEventDef.


        :param grace_minute_max: The grace_minute_max of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: int
        """

        self._grace_minute_max = grace_minute_max

    @property
    def can_edit_before(self):
        """Gets the can_edit_before of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The can_edit_before of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_before

    @can_edit_before.setter
    def can_edit_before(self, can_edit_before):
        """Sets the can_edit_before of this ODMcomplexTypeDefinitionStudyEventDef.


        :param can_edit_before: The can_edit_before of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: bool
        """

        self._can_edit_before = can_edit_before

    @property
    def can_edit_after(self):
        """Gets the can_edit_after of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The can_edit_after of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: bool
        """
        return self._can_edit_after

    @can_edit_after.setter
    def can_edit_after(self, can_edit_after):
        """Sets the can_edit_after of this ODMcomplexTypeDefinitionStudyEventDef.


        :param can_edit_after: The can_edit_after of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: bool
        """

        self._can_edit_after = can_edit_after

    @property
    def weekdays_only(self):
        """Gets the weekdays_only of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The weekdays_only of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: bool
        """
        return self._weekdays_only

    @weekdays_only.setter
    def weekdays_only(self, weekdays_only):
        """Sets the weekdays_only of this ODMcomplexTypeDefinitionStudyEventDef.


        :param weekdays_only: The weekdays_only of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: bool
        """

        self._weekdays_only = weekdays_only

    @property
    def dynamic_event(self):
        """Gets the dynamic_event of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The dynamic_event of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: bool
        """
        return self._dynamic_event

    @dynamic_event.setter
    def dynamic_event(self, dynamic_event):
        """Sets the dynamic_event of this ODMcomplexTypeDefinitionStudyEventDef.


        :param dynamic_event: The dynamic_event of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: bool
        """

        self._dynamic_event = dynamic_event

    @property
    def repeat_frequency(self):
        """Gets the repeat_frequency of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The repeat_frequency of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: int
        """
        return self._repeat_frequency

    @repeat_frequency.setter
    def repeat_frequency(self, repeat_frequency):
        """Sets the repeat_frequency of this ODMcomplexTypeDefinitionStudyEventDef.


        :param repeat_frequency: The repeat_frequency of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: int
        """

        self._repeat_frequency = repeat_frequency

    @property
    def repeat_for_how_many_days(self):
        """Gets the repeat_for_how_many_days of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The repeat_for_how_many_days of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: int
        """
        return self._repeat_for_how_many_days

    @repeat_for_how_many_days.setter
    def repeat_for_how_many_days(self, repeat_for_how_many_days):
        """Sets the repeat_for_how_many_days of this ODMcomplexTypeDefinitionStudyEventDef.


        :param repeat_for_how_many_days: The repeat_for_how_many_days of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: int
        """

        self._repeat_for_how_many_days = repeat_for_how_many_days

    @property
    def created_by_rule(self):
        """Gets the created_by_rule of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The created_by_rule of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: bool
        """
        return self._created_by_rule

    @created_by_rule.setter
    def created_by_rule(self, created_by_rule):
        """Sets the created_by_rule of this ODMcomplexTypeDefinitionStudyEventDef.


        :param created_by_rule: The created_by_rule of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: bool
        """

        self._created_by_rule = created_by_rule

    @property
    def oid(self):
        """Gets the oid of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The oid of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this ODMcomplexTypeDefinitionStudyEventDef.


        :param oid: The oid of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: str
        """

        self._oid = oid

    @property
    def name(self):
        """Gets the name of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The name of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ODMcomplexTypeDefinitionStudyEventDef.


        :param name: The name of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def repeating(self):
        """Gets the repeating of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The repeating of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: str
        """
        return self._repeating

    @repeating.setter
    def repeating(self, repeating):
        """Sets the repeating of this ODMcomplexTypeDefinitionStudyEventDef.


        :param repeating: The repeating of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and repeating not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `repeating` ({0}), must be one of {1}"  # noqa: E501
                .format(repeating, allowed_values)
            )

        self._repeating = repeating

    @property
    def type(self):
        """Gets the type of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The type of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ODMcomplexTypeDefinitionStudyEventDef.


        :param type: The type of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: str
        """
        allowed_values = ["SCHEDULED", "UNSCHEDULED", "COMMON"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def category(self):
        """Gets the category of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The category of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ODMcomplexTypeDefinitionStudyEventDef.


        :param category: The category of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def econsent_event(self):
        """Gets the econsent_event of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501


        :return: The econsent_event of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :rtype: bool
        """
        return self._econsent_event

    @econsent_event.setter
    def econsent_event(self, econsent_event):
        """Sets the econsent_event of this ODMcomplexTypeDefinitionStudyEventDef.


        :param econsent_event: The econsent_event of this ODMcomplexTypeDefinitionStudyEventDef.  # noqa: E501
        :type: bool
        """

        self._econsent_event = econsent_event

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionStudyEventDef):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionStudyEventDef):
            return True

        return self.to_dict() != other.to_dict()
