# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class CrfViewRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'study_id': 'int',
        'name': 'str',
        'description': 'str',
        'custom_text': 'str',
        'screening_flag': 'bool',
        'custom_enroll_flag': 'bool',
        'randomization_flag': 'bool',
        'enable_survey': 'bool',
        'show_lock_option': 'bool',
        'show_esignature_option': 'bool',
        'available_on_mobile_flag': 'bool',
        'econsent_screening': 'bool',
        'ise_consent': 'bool',
        'irb_approval_date': 'int',
        'valid_from': 'int',
        'valid_to': 'int'
    }

    attribute_map = {
        'id': 'id',
        'study_id': 'studyId',
        'name': 'name',
        'description': 'description',
        'custom_text': 'customText',
        'screening_flag': 'screeningFlag',
        'custom_enroll_flag': 'customEnrollFlag',
        'randomization_flag': 'randomizationFlag',
        'enable_survey': 'enableSurvey',
        'show_lock_option': 'showLockOption',
        'show_esignature_option': 'showEsignatureOption',
        'available_on_mobile_flag': 'availableOnMobileFlag',
        'econsent_screening': 'econsentScreening',
        'ise_consent': 'iseConsent',
        'irb_approval_date': 'irbApprovalDate',
        'valid_from': 'validFrom',
        'valid_to': 'validTo'
    }

    def __init__(self, id=None, study_id=None, name=None, description=None, custom_text=None, screening_flag=None, custom_enroll_flag=None, randomization_flag=None, enable_survey=None, show_lock_option=None, show_esignature_option=None, available_on_mobile_flag=None, econsent_screening=None, ise_consent=None, irb_approval_date=None, valid_from=None, valid_to=None, local_vars_configuration=None):  # noqa: E501
        """CrfViewRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._study_id = None
        self._name = None
        self._description = None
        self._custom_text = None
        self._screening_flag = None
        self._custom_enroll_flag = None
        self._randomization_flag = None
        self._enable_survey = None
        self._show_lock_option = None
        self._show_esignature_option = None
        self._available_on_mobile_flag = None
        self._econsent_screening = None
        self._ise_consent = None
        self._irb_approval_date = None
        self._valid_from = None
        self._valid_to = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if study_id is not None:
            self.study_id = study_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if custom_text is not None:
            self.custom_text = custom_text
        if screening_flag is not None:
            self.screening_flag = screening_flag
        if custom_enroll_flag is not None:
            self.custom_enroll_flag = custom_enroll_flag
        if randomization_flag is not None:
            self.randomization_flag = randomization_flag
        if enable_survey is not None:
            self.enable_survey = enable_survey
        if show_lock_option is not None:
            self.show_lock_option = show_lock_option
        if show_esignature_option is not None:
            self.show_esignature_option = show_esignature_option
        if available_on_mobile_flag is not None:
            self.available_on_mobile_flag = available_on_mobile_flag
        if econsent_screening is not None:
            self.econsent_screening = econsent_screening
        if ise_consent is not None:
            self.ise_consent = ise_consent
        if irb_approval_date is not None:
            self.irb_approval_date = irb_approval_date
        if valid_from is not None:
            self.valid_from = valid_from
        if valid_to is not None:
            self.valid_to = valid_to

    @property
    def id(self):
        """Gets the id of this CrfViewRpc.  # noqa: E501


        :return: The id of this CrfViewRpc.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CrfViewRpc.


        :param id: The id of this CrfViewRpc.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def study_id(self):
        """Gets the study_id of this CrfViewRpc.  # noqa: E501


        :return: The study_id of this CrfViewRpc.  # noqa: E501
        :rtype: int
        """
        return self._study_id

    @study_id.setter
    def study_id(self, study_id):
        """Sets the study_id of this CrfViewRpc.


        :param study_id: The study_id of this CrfViewRpc.  # noqa: E501
        :type: int
        """

        self._study_id = study_id

    @property
    def name(self):
        """Gets the name of this CrfViewRpc.  # noqa: E501


        :return: The name of this CrfViewRpc.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CrfViewRpc.


        :param name: The name of this CrfViewRpc.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CrfViewRpc.  # noqa: E501


        :return: The description of this CrfViewRpc.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CrfViewRpc.


        :param description: The description of this CrfViewRpc.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def custom_text(self):
        """Gets the custom_text of this CrfViewRpc.  # noqa: E501


        :return: The custom_text of this CrfViewRpc.  # noqa: E501
        :rtype: str
        """
        return self._custom_text

    @custom_text.setter
    def custom_text(self, custom_text):
        """Sets the custom_text of this CrfViewRpc.


        :param custom_text: The custom_text of this CrfViewRpc.  # noqa: E501
        :type: str
        """

        self._custom_text = custom_text

    @property
    def screening_flag(self):
        """Gets the screening_flag of this CrfViewRpc.  # noqa: E501


        :return: The screening_flag of this CrfViewRpc.  # noqa: E501
        :rtype: bool
        """
        return self._screening_flag

    @screening_flag.setter
    def screening_flag(self, screening_flag):
        """Sets the screening_flag of this CrfViewRpc.


        :param screening_flag: The screening_flag of this CrfViewRpc.  # noqa: E501
        :type: bool
        """

        self._screening_flag = screening_flag

    @property
    def custom_enroll_flag(self):
        """Gets the custom_enroll_flag of this CrfViewRpc.  # noqa: E501


        :return: The custom_enroll_flag of this CrfViewRpc.  # noqa: E501
        :rtype: bool
        """
        return self._custom_enroll_flag

    @custom_enroll_flag.setter
    def custom_enroll_flag(self, custom_enroll_flag):
        """Sets the custom_enroll_flag of this CrfViewRpc.


        :param custom_enroll_flag: The custom_enroll_flag of this CrfViewRpc.  # noqa: E501
        :type: bool
        """

        self._custom_enroll_flag = custom_enroll_flag

    @property
    def randomization_flag(self):
        """Gets the randomization_flag of this CrfViewRpc.  # noqa: E501


        :return: The randomization_flag of this CrfViewRpc.  # noqa: E501
        :rtype: bool
        """
        return self._randomization_flag

    @randomization_flag.setter
    def randomization_flag(self, randomization_flag):
        """Sets the randomization_flag of this CrfViewRpc.


        :param randomization_flag: The randomization_flag of this CrfViewRpc.  # noqa: E501
        :type: bool
        """

        self._randomization_flag = randomization_flag

    @property
    def enable_survey(self):
        """Gets the enable_survey of this CrfViewRpc.  # noqa: E501


        :return: The enable_survey of this CrfViewRpc.  # noqa: E501
        :rtype: bool
        """
        return self._enable_survey

    @enable_survey.setter
    def enable_survey(self, enable_survey):
        """Sets the enable_survey of this CrfViewRpc.


        :param enable_survey: The enable_survey of this CrfViewRpc.  # noqa: E501
        :type: bool
        """

        self._enable_survey = enable_survey

    @property
    def show_lock_option(self):
        """Gets the show_lock_option of this CrfViewRpc.  # noqa: E501


        :return: The show_lock_option of this CrfViewRpc.  # noqa: E501
        :rtype: bool
        """
        return self._show_lock_option

    @show_lock_option.setter
    def show_lock_option(self, show_lock_option):
        """Sets the show_lock_option of this CrfViewRpc.


        :param show_lock_option: The show_lock_option of this CrfViewRpc.  # noqa: E501
        :type: bool
        """

        self._show_lock_option = show_lock_option

    @property
    def show_esignature_option(self):
        """Gets the show_esignature_option of this CrfViewRpc.  # noqa: E501


        :return: The show_esignature_option of this CrfViewRpc.  # noqa: E501
        :rtype: bool
        """
        return self._show_esignature_option

    @show_esignature_option.setter
    def show_esignature_option(self, show_esignature_option):
        """Sets the show_esignature_option of this CrfViewRpc.


        :param show_esignature_option: The show_esignature_option of this CrfViewRpc.  # noqa: E501
        :type: bool
        """

        self._show_esignature_option = show_esignature_option

    @property
    def available_on_mobile_flag(self):
        """Gets the available_on_mobile_flag of this CrfViewRpc.  # noqa: E501


        :return: The available_on_mobile_flag of this CrfViewRpc.  # noqa: E501
        :rtype: bool
        """
        return self._available_on_mobile_flag

    @available_on_mobile_flag.setter
    def available_on_mobile_flag(self, available_on_mobile_flag):
        """Sets the available_on_mobile_flag of this CrfViewRpc.


        :param available_on_mobile_flag: The available_on_mobile_flag of this CrfViewRpc.  # noqa: E501
        :type: bool
        """

        self._available_on_mobile_flag = available_on_mobile_flag

    @property
    def econsent_screening(self):
        """Gets the econsent_screening of this CrfViewRpc.  # noqa: E501


        :return: The econsent_screening of this CrfViewRpc.  # noqa: E501
        :rtype: bool
        """
        return self._econsent_screening

    @econsent_screening.setter
    def econsent_screening(self, econsent_screening):
        """Sets the econsent_screening of this CrfViewRpc.


        :param econsent_screening: The econsent_screening of this CrfViewRpc.  # noqa: E501
        :type: bool
        """

        self._econsent_screening = econsent_screening

    @property
    def ise_consent(self):
        """Gets the ise_consent of this CrfViewRpc.  # noqa: E501


        :return: The ise_consent of this CrfViewRpc.  # noqa: E501
        :rtype: bool
        """
        return self._ise_consent

    @ise_consent.setter
    def ise_consent(self, ise_consent):
        """Sets the ise_consent of this CrfViewRpc.


        :param ise_consent: The ise_consent of this CrfViewRpc.  # noqa: E501
        :type: bool
        """

        self._ise_consent = ise_consent

    @property
    def irb_approval_date(self):
        """Gets the irb_approval_date of this CrfViewRpc.  # noqa: E501


        :return: The irb_approval_date of this CrfViewRpc.  # noqa: E501
        :rtype: int
        """
        return self._irb_approval_date

    @irb_approval_date.setter
    def irb_approval_date(self, irb_approval_date):
        """Sets the irb_approval_date of this CrfViewRpc.


        :param irb_approval_date: The irb_approval_date of this CrfViewRpc.  # noqa: E501
        :type: int
        """

        self._irb_approval_date = irb_approval_date

    @property
    def valid_from(self):
        """Gets the valid_from of this CrfViewRpc.  # noqa: E501


        :return: The valid_from of this CrfViewRpc.  # noqa: E501
        :rtype: int
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """Sets the valid_from of this CrfViewRpc.


        :param valid_from: The valid_from of this CrfViewRpc.  # noqa: E501
        :type: int
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """Gets the valid_to of this CrfViewRpc.  # noqa: E501


        :return: The valid_to of this CrfViewRpc.  # noqa: E501
        :rtype: int
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """Sets the valid_to of this CrfViewRpc.


        :param valid_to: The valid_to of this CrfViewRpc.  # noqa: E501
        :type: int
        """

        self._valid_to = valid_to

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrfViewRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CrfViewRpc):
            return True

        return self.to_dict() != other.to_dict()
