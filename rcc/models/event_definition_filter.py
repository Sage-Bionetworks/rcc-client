# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class EventDefinitionFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'study_site_ids': 'list[int]',
        'crf_ids': 'list[int]',
        'crf_version_ids': 'list[int]',
        'start_date': 'int',
        'end_date': 'int'
    }

    attribute_map = {
        'study_site_ids': 'studySiteIds',
        'crf_ids': 'crfIds',
        'crf_version_ids': 'crfVersionIds',
        'start_date': 'startDate',
        'end_date': 'endDate'
    }

    def __init__(self, study_site_ids=None, crf_ids=None, crf_version_ids=None, start_date=None, end_date=None, local_vars_configuration=None):  # noqa: E501
        """EventDefinitionFilter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._study_site_ids = None
        self._crf_ids = None
        self._crf_version_ids = None
        self._start_date = None
        self._end_date = None
        self.discriminator = None

        if study_site_ids is not None:
            self.study_site_ids = study_site_ids
        if crf_ids is not None:
            self.crf_ids = crf_ids
        if crf_version_ids is not None:
            self.crf_version_ids = crf_version_ids
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date

    @property
    def study_site_ids(self):
        """Gets the study_site_ids of this EventDefinitionFilter.  # noqa: E501


        :return: The study_site_ids of this EventDefinitionFilter.  # noqa: E501
        :rtype: list[int]
        """
        return self._study_site_ids

    @study_site_ids.setter
    def study_site_ids(self, study_site_ids):
        """Sets the study_site_ids of this EventDefinitionFilter.


        :param study_site_ids: The study_site_ids of this EventDefinitionFilter.  # noqa: E501
        :type: list[int]
        """

        self._study_site_ids = study_site_ids

    @property
    def crf_ids(self):
        """Gets the crf_ids of this EventDefinitionFilter.  # noqa: E501


        :return: The crf_ids of this EventDefinitionFilter.  # noqa: E501
        :rtype: list[int]
        """
        return self._crf_ids

    @crf_ids.setter
    def crf_ids(self, crf_ids):
        """Sets the crf_ids of this EventDefinitionFilter.


        :param crf_ids: The crf_ids of this EventDefinitionFilter.  # noqa: E501
        :type: list[int]
        """

        self._crf_ids = crf_ids

    @property
    def crf_version_ids(self):
        """Gets the crf_version_ids of this EventDefinitionFilter.  # noqa: E501


        :return: The crf_version_ids of this EventDefinitionFilter.  # noqa: E501
        :rtype: list[int]
        """
        return self._crf_version_ids

    @crf_version_ids.setter
    def crf_version_ids(self, crf_version_ids):
        """Sets the crf_version_ids of this EventDefinitionFilter.


        :param crf_version_ids: The crf_version_ids of this EventDefinitionFilter.  # noqa: E501
        :type: list[int]
        """

        self._crf_version_ids = crf_version_ids

    @property
    def start_date(self):
        """Gets the start_date of this EventDefinitionFilter.  # noqa: E501


        :return: The start_date of this EventDefinitionFilter.  # noqa: E501
        :rtype: int
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this EventDefinitionFilter.


        :param start_date: The start_date of this EventDefinitionFilter.  # noqa: E501
        :type: int
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this EventDefinitionFilter.  # noqa: E501


        :return: The end_date of this EventDefinitionFilter.  # noqa: E501
        :rtype: int
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this EventDefinitionFilter.


        :param end_date: The end_date of this EventDefinitionFilter.  # noqa: E501
        :type: int
        """

        self._end_date = end_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventDefinitionFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventDefinitionFilter):
            return True

        return self.to_dict() != other.to_dict()
