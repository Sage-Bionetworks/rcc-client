# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class StudyRole(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'role_component_permission': 'list[RoleComponentPermission]',
        'name': 'str',
        'description': 'str',
        'object_data': 'str',
        'enabled': 'bool',
        'use_classical_menu': 'bool'
    }

    attribute_map = {
        'role_component_permission': 'roleComponentPermission',
        'name': 'name',
        'description': 'description',
        'object_data': 'objectData',
        'enabled': 'enabled',
        'use_classical_menu': 'useClassicalMenu'
    }

    def __init__(self, role_component_permission=None, name=None, description=None, object_data=None, enabled=None, use_classical_menu=None, local_vars_configuration=None):  # noqa: E501
        """StudyRole - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._role_component_permission = None
        self._name = None
        self._description = None
        self._object_data = None
        self._enabled = None
        self._use_classical_menu = None
        self.discriminator = None

        if role_component_permission is not None:
            self.role_component_permission = role_component_permission
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if object_data is not None:
            self.object_data = object_data
        if enabled is not None:
            self.enabled = enabled
        if use_classical_menu is not None:
            self.use_classical_menu = use_classical_menu

    @property
    def role_component_permission(self):
        """Gets the role_component_permission of this StudyRole.  # noqa: E501


        :return: The role_component_permission of this StudyRole.  # noqa: E501
        :rtype: list[RoleComponentPermission]
        """
        return self._role_component_permission

    @role_component_permission.setter
    def role_component_permission(self, role_component_permission):
        """Sets the role_component_permission of this StudyRole.


        :param role_component_permission: The role_component_permission of this StudyRole.  # noqa: E501
        :type: list[RoleComponentPermission]
        """

        self._role_component_permission = role_component_permission

    @property
    def name(self):
        """Gets the name of this StudyRole.  # noqa: E501


        :return: The name of this StudyRole.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StudyRole.


        :param name: The name of this StudyRole.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this StudyRole.  # noqa: E501


        :return: The description of this StudyRole.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StudyRole.


        :param description: The description of this StudyRole.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def object_data(self):
        """Gets the object_data of this StudyRole.  # noqa: E501


        :return: The object_data of this StudyRole.  # noqa: E501
        :rtype: str
        """
        return self._object_data

    @object_data.setter
    def object_data(self, object_data):
        """Sets the object_data of this StudyRole.


        :param object_data: The object_data of this StudyRole.  # noqa: E501
        :type: str
        """

        self._object_data = object_data

    @property
    def enabled(self):
        """Gets the enabled of this StudyRole.  # noqa: E501


        :return: The enabled of this StudyRole.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this StudyRole.


        :param enabled: The enabled of this StudyRole.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def use_classical_menu(self):
        """Gets the use_classical_menu of this StudyRole.  # noqa: E501


        :return: The use_classical_menu of this StudyRole.  # noqa: E501
        :rtype: bool
        """
        return self._use_classical_menu

    @use_classical_menu.setter
    def use_classical_menu(self, use_classical_menu):
        """Sets the use_classical_menu of this StudyRole.


        :param use_classical_menu: The use_classical_menu of this StudyRole.  # noqa: E501
        :type: bool
        """

        self._use_classical_menu = use_classical_menu

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudyRole):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StudyRole):
            return True

        return self.to_dict() != other.to_dict()
