# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class CustomScheduleRandomizationValues(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'mapping_oid': 'str',
        'randomization_oid': 'str',
        'value': 'str',
        'index': 'int',
        'processed': 'bool'
    }

    attribute_map = {
        'mapping_oid': 'mappingOID',
        'randomization_oid': 'randomizationOID',
        'value': 'value',
        'index': 'index',
        'processed': 'processed'
    }

    def __init__(self, mapping_oid=None, randomization_oid=None, value=None, index=None, processed=None, local_vars_configuration=None):  # noqa: E501
        """CustomScheduleRandomizationValues - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._mapping_oid = None
        self._randomization_oid = None
        self._value = None
        self._index = None
        self._processed = None
        self.discriminator = None

        if mapping_oid is not None:
            self.mapping_oid = mapping_oid
        if randomization_oid is not None:
            self.randomization_oid = randomization_oid
        if value is not None:
            self.value = value
        if index is not None:
            self.index = index
        if processed is not None:
            self.processed = processed

    @property
    def mapping_oid(self):
        """Gets the mapping_oid of this CustomScheduleRandomizationValues.  # noqa: E501


        :return: The mapping_oid of this CustomScheduleRandomizationValues.  # noqa: E501
        :rtype: str
        """
        return self._mapping_oid

    @mapping_oid.setter
    def mapping_oid(self, mapping_oid):
        """Sets the mapping_oid of this CustomScheduleRandomizationValues.


        :param mapping_oid: The mapping_oid of this CustomScheduleRandomizationValues.  # noqa: E501
        :type: str
        """

        self._mapping_oid = mapping_oid

    @property
    def randomization_oid(self):
        """Gets the randomization_oid of this CustomScheduleRandomizationValues.  # noqa: E501


        :return: The randomization_oid of this CustomScheduleRandomizationValues.  # noqa: E501
        :rtype: str
        """
        return self._randomization_oid

    @randomization_oid.setter
    def randomization_oid(self, randomization_oid):
        """Sets the randomization_oid of this CustomScheduleRandomizationValues.


        :param randomization_oid: The randomization_oid of this CustomScheduleRandomizationValues.  # noqa: E501
        :type: str
        """

        self._randomization_oid = randomization_oid

    @property
    def value(self):
        """Gets the value of this CustomScheduleRandomizationValues.  # noqa: E501


        :return: The value of this CustomScheduleRandomizationValues.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this CustomScheduleRandomizationValues.


        :param value: The value of this CustomScheduleRandomizationValues.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def index(self):
        """Gets the index of this CustomScheduleRandomizationValues.  # noqa: E501


        :return: The index of this CustomScheduleRandomizationValues.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this CustomScheduleRandomizationValues.


        :param index: The index of this CustomScheduleRandomizationValues.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def processed(self):
        """Gets the processed of this CustomScheduleRandomizationValues.  # noqa: E501


        :return: The processed of this CustomScheduleRandomizationValues.  # noqa: E501
        :rtype: bool
        """
        return self._processed

    @processed.setter
    def processed(self, processed):
        """Sets the processed of this CustomScheduleRandomizationValues.


        :param processed: The processed of this CustomScheduleRandomizationValues.  # noqa: E501
        :type: bool
        """

        self._processed = processed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomScheduleRandomizationValues):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomScheduleRandomizationValues):
            return True

        return self.to_dict() != other.to_dict()
