# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class CrfItemRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'study_id': 'int',
        'crf_id': 'int',
        'crf_version_id': 'int',
        'variable_name': 'str',
        'rc_response_sets_id': 'int',
        'ad_lookup_code_by_item_data_type_id': 'str',
        'data_type_id': 'int',
        'data_type_string': 'str',
        'label': 'str',
        'label_plain_text': 'str',
        'rc_oid': 'str',
        'field_width': 'int',
        'info_text': 'str',
        'min_value': 'str',
        'max_value': 'str',
        'default_value': 'str',
        'phi_status': 'bool',
        'left_alignment': 'bool',
        'show_validator': 'bool',
        'soft_validation': 'bool',
        'calc_field_equation': 'str',
        'custom_info1': 'str',
        'custom_info2': 'str',
        'group_id': 'int',
        'item_form_metadata_id': 'int',
        'section_id': 'int',
        'measurement_unit': 'int',
        'measurement_unit_string': 'str'
    }

    attribute_map = {
        'id': 'id',
        'study_id': 'studyId',
        'crf_id': 'crfId',
        'crf_version_id': 'crfVersionId',
        'variable_name': 'variableName',
        'rc_response_sets_id': 'rcResponseSetsId',
        'ad_lookup_code_by_item_data_type_id': 'adLookupCodeByItemDataTypeId',
        'data_type_id': 'dataTypeId',
        'data_type_string': 'dataTypeString',
        'label': 'label',
        'label_plain_text': 'labelPlainText',
        'rc_oid': 'rcOid',
        'field_width': 'fieldWidth',
        'info_text': 'infoText',
        'min_value': 'minValue',
        'max_value': 'maxValue',
        'default_value': 'defaultValue',
        'phi_status': 'phiStatus',
        'left_alignment': 'leftAlignment',
        'show_validator': 'showValidator',
        'soft_validation': 'softValidation',
        'calc_field_equation': 'calcFieldEquation',
        'custom_info1': 'customInfo1',
        'custom_info2': 'customInfo2',
        'group_id': 'groupId',
        'item_form_metadata_id': 'itemFormMetadataId',
        'section_id': 'sectionId',
        'measurement_unit': 'measurementUnit',
        'measurement_unit_string': 'measurementUnitString'
    }

    def __init__(self, id=None, study_id=None, crf_id=None, crf_version_id=None, variable_name=None, rc_response_sets_id=None, ad_lookup_code_by_item_data_type_id=None, data_type_id=None, data_type_string=None, label=None, label_plain_text=None, rc_oid=None, field_width=None, info_text=None, min_value=None, max_value=None, default_value=None, phi_status=None, left_alignment=None, show_validator=None, soft_validation=None, calc_field_equation=None, custom_info1=None, custom_info2=None, group_id=None, item_form_metadata_id=None, section_id=None, measurement_unit=None, measurement_unit_string=None, local_vars_configuration=None):  # noqa: E501
        """CrfItemRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._study_id = None
        self._crf_id = None
        self._crf_version_id = None
        self._variable_name = None
        self._rc_response_sets_id = None
        self._ad_lookup_code_by_item_data_type_id = None
        self._data_type_id = None
        self._data_type_string = None
        self._label = None
        self._label_plain_text = None
        self._rc_oid = None
        self._field_width = None
        self._info_text = None
        self._min_value = None
        self._max_value = None
        self._default_value = None
        self._phi_status = None
        self._left_alignment = None
        self._show_validator = None
        self._soft_validation = None
        self._calc_field_equation = None
        self._custom_info1 = None
        self._custom_info2 = None
        self._group_id = None
        self._item_form_metadata_id = None
        self._section_id = None
        self._measurement_unit = None
        self._measurement_unit_string = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if study_id is not None:
            self.study_id = study_id
        if crf_id is not None:
            self.crf_id = crf_id
        if crf_version_id is not None:
            self.crf_version_id = crf_version_id
        if variable_name is not None:
            self.variable_name = variable_name
        if rc_response_sets_id is not None:
            self.rc_response_sets_id = rc_response_sets_id
        if ad_lookup_code_by_item_data_type_id is not None:
            self.ad_lookup_code_by_item_data_type_id = ad_lookup_code_by_item_data_type_id
        if data_type_id is not None:
            self.data_type_id = data_type_id
        if data_type_string is not None:
            self.data_type_string = data_type_string
        if label is not None:
            self.label = label
        if label_plain_text is not None:
            self.label_plain_text = label_plain_text
        if rc_oid is not None:
            self.rc_oid = rc_oid
        if field_width is not None:
            self.field_width = field_width
        if info_text is not None:
            self.info_text = info_text
        if min_value is not None:
            self.min_value = min_value
        if max_value is not None:
            self.max_value = max_value
        if default_value is not None:
            self.default_value = default_value
        if phi_status is not None:
            self.phi_status = phi_status
        if left_alignment is not None:
            self.left_alignment = left_alignment
        if show_validator is not None:
            self.show_validator = show_validator
        if soft_validation is not None:
            self.soft_validation = soft_validation
        if calc_field_equation is not None:
            self.calc_field_equation = calc_field_equation
        if custom_info1 is not None:
            self.custom_info1 = custom_info1
        if custom_info2 is not None:
            self.custom_info2 = custom_info2
        if group_id is not None:
            self.group_id = group_id
        if item_form_metadata_id is not None:
            self.item_form_metadata_id = item_form_metadata_id
        if section_id is not None:
            self.section_id = section_id
        if measurement_unit is not None:
            self.measurement_unit = measurement_unit
        if measurement_unit_string is not None:
            self.measurement_unit_string = measurement_unit_string

    @property
    def id(self):
        """Gets the id of this CrfItemRpc.  # noqa: E501


        :return: The id of this CrfItemRpc.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CrfItemRpc.


        :param id: The id of this CrfItemRpc.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def study_id(self):
        """Gets the study_id of this CrfItemRpc.  # noqa: E501


        :return: The study_id of this CrfItemRpc.  # noqa: E501
        :rtype: int
        """
        return self._study_id

    @study_id.setter
    def study_id(self, study_id):
        """Sets the study_id of this CrfItemRpc.


        :param study_id: The study_id of this CrfItemRpc.  # noqa: E501
        :type: int
        """

        self._study_id = study_id

    @property
    def crf_id(self):
        """Gets the crf_id of this CrfItemRpc.  # noqa: E501


        :return: The crf_id of this CrfItemRpc.  # noqa: E501
        :rtype: int
        """
        return self._crf_id

    @crf_id.setter
    def crf_id(self, crf_id):
        """Sets the crf_id of this CrfItemRpc.


        :param crf_id: The crf_id of this CrfItemRpc.  # noqa: E501
        :type: int
        """

        self._crf_id = crf_id

    @property
    def crf_version_id(self):
        """Gets the crf_version_id of this CrfItemRpc.  # noqa: E501


        :return: The crf_version_id of this CrfItemRpc.  # noqa: E501
        :rtype: int
        """
        return self._crf_version_id

    @crf_version_id.setter
    def crf_version_id(self, crf_version_id):
        """Sets the crf_version_id of this CrfItemRpc.


        :param crf_version_id: The crf_version_id of this CrfItemRpc.  # noqa: E501
        :type: int
        """

        self._crf_version_id = crf_version_id

    @property
    def variable_name(self):
        """Gets the variable_name of this CrfItemRpc.  # noqa: E501


        :return: The variable_name of this CrfItemRpc.  # noqa: E501
        :rtype: str
        """
        return self._variable_name

    @variable_name.setter
    def variable_name(self, variable_name):
        """Sets the variable_name of this CrfItemRpc.


        :param variable_name: The variable_name of this CrfItemRpc.  # noqa: E501
        :type: str
        """

        self._variable_name = variable_name

    @property
    def rc_response_sets_id(self):
        """Gets the rc_response_sets_id of this CrfItemRpc.  # noqa: E501


        :return: The rc_response_sets_id of this CrfItemRpc.  # noqa: E501
        :rtype: int
        """
        return self._rc_response_sets_id

    @rc_response_sets_id.setter
    def rc_response_sets_id(self, rc_response_sets_id):
        """Sets the rc_response_sets_id of this CrfItemRpc.


        :param rc_response_sets_id: The rc_response_sets_id of this CrfItemRpc.  # noqa: E501
        :type: int
        """

        self._rc_response_sets_id = rc_response_sets_id

    @property
    def ad_lookup_code_by_item_data_type_id(self):
        """Gets the ad_lookup_code_by_item_data_type_id of this CrfItemRpc.  # noqa: E501


        :return: The ad_lookup_code_by_item_data_type_id of this CrfItemRpc.  # noqa: E501
        :rtype: str
        """
        return self._ad_lookup_code_by_item_data_type_id

    @ad_lookup_code_by_item_data_type_id.setter
    def ad_lookup_code_by_item_data_type_id(self, ad_lookup_code_by_item_data_type_id):
        """Sets the ad_lookup_code_by_item_data_type_id of this CrfItemRpc.


        :param ad_lookup_code_by_item_data_type_id: The ad_lookup_code_by_item_data_type_id of this CrfItemRpc.  # noqa: E501
        :type: str
        """

        self._ad_lookup_code_by_item_data_type_id = ad_lookup_code_by_item_data_type_id

    @property
    def data_type_id(self):
        """Gets the data_type_id of this CrfItemRpc.  # noqa: E501


        :return: The data_type_id of this CrfItemRpc.  # noqa: E501
        :rtype: int
        """
        return self._data_type_id

    @data_type_id.setter
    def data_type_id(self, data_type_id):
        """Sets the data_type_id of this CrfItemRpc.


        :param data_type_id: The data_type_id of this CrfItemRpc.  # noqa: E501
        :type: int
        """

        self._data_type_id = data_type_id

    @property
    def data_type_string(self):
        """Gets the data_type_string of this CrfItemRpc.  # noqa: E501


        :return: The data_type_string of this CrfItemRpc.  # noqa: E501
        :rtype: str
        """
        return self._data_type_string

    @data_type_string.setter
    def data_type_string(self, data_type_string):
        """Sets the data_type_string of this CrfItemRpc.


        :param data_type_string: The data_type_string of this CrfItemRpc.  # noqa: E501
        :type: str
        """

        self._data_type_string = data_type_string

    @property
    def label(self):
        """Gets the label of this CrfItemRpc.  # noqa: E501


        :return: The label of this CrfItemRpc.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CrfItemRpc.


        :param label: The label of this CrfItemRpc.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def label_plain_text(self):
        """Gets the label_plain_text of this CrfItemRpc.  # noqa: E501


        :return: The label_plain_text of this CrfItemRpc.  # noqa: E501
        :rtype: str
        """
        return self._label_plain_text

    @label_plain_text.setter
    def label_plain_text(self, label_plain_text):
        """Sets the label_plain_text of this CrfItemRpc.


        :param label_plain_text: The label_plain_text of this CrfItemRpc.  # noqa: E501
        :type: str
        """

        self._label_plain_text = label_plain_text

    @property
    def rc_oid(self):
        """Gets the rc_oid of this CrfItemRpc.  # noqa: E501


        :return: The rc_oid of this CrfItemRpc.  # noqa: E501
        :rtype: str
        """
        return self._rc_oid

    @rc_oid.setter
    def rc_oid(self, rc_oid):
        """Sets the rc_oid of this CrfItemRpc.


        :param rc_oid: The rc_oid of this CrfItemRpc.  # noqa: E501
        :type: str
        """

        self._rc_oid = rc_oid

    @property
    def field_width(self):
        """Gets the field_width of this CrfItemRpc.  # noqa: E501


        :return: The field_width of this CrfItemRpc.  # noqa: E501
        :rtype: int
        """
        return self._field_width

    @field_width.setter
    def field_width(self, field_width):
        """Sets the field_width of this CrfItemRpc.


        :param field_width: The field_width of this CrfItemRpc.  # noqa: E501
        :type: int
        """

        self._field_width = field_width

    @property
    def info_text(self):
        """Gets the info_text of this CrfItemRpc.  # noqa: E501


        :return: The info_text of this CrfItemRpc.  # noqa: E501
        :rtype: str
        """
        return self._info_text

    @info_text.setter
    def info_text(self, info_text):
        """Sets the info_text of this CrfItemRpc.


        :param info_text: The info_text of this CrfItemRpc.  # noqa: E501
        :type: str
        """

        self._info_text = info_text

    @property
    def min_value(self):
        """Gets the min_value of this CrfItemRpc.  # noqa: E501


        :return: The min_value of this CrfItemRpc.  # noqa: E501
        :rtype: str
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this CrfItemRpc.


        :param min_value: The min_value of this CrfItemRpc.  # noqa: E501
        :type: str
        """

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this CrfItemRpc.  # noqa: E501


        :return: The max_value of this CrfItemRpc.  # noqa: E501
        :rtype: str
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this CrfItemRpc.


        :param max_value: The max_value of this CrfItemRpc.  # noqa: E501
        :type: str
        """

        self._max_value = max_value

    @property
    def default_value(self):
        """Gets the default_value of this CrfItemRpc.  # noqa: E501


        :return: The default_value of this CrfItemRpc.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this CrfItemRpc.


        :param default_value: The default_value of this CrfItemRpc.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def phi_status(self):
        """Gets the phi_status of this CrfItemRpc.  # noqa: E501


        :return: The phi_status of this CrfItemRpc.  # noqa: E501
        :rtype: bool
        """
        return self._phi_status

    @phi_status.setter
    def phi_status(self, phi_status):
        """Sets the phi_status of this CrfItemRpc.


        :param phi_status: The phi_status of this CrfItemRpc.  # noqa: E501
        :type: bool
        """

        self._phi_status = phi_status

    @property
    def left_alignment(self):
        """Gets the left_alignment of this CrfItemRpc.  # noqa: E501


        :return: The left_alignment of this CrfItemRpc.  # noqa: E501
        :rtype: bool
        """
        return self._left_alignment

    @left_alignment.setter
    def left_alignment(self, left_alignment):
        """Sets the left_alignment of this CrfItemRpc.


        :param left_alignment: The left_alignment of this CrfItemRpc.  # noqa: E501
        :type: bool
        """

        self._left_alignment = left_alignment

    @property
    def show_validator(self):
        """Gets the show_validator of this CrfItemRpc.  # noqa: E501


        :return: The show_validator of this CrfItemRpc.  # noqa: E501
        :rtype: bool
        """
        return self._show_validator

    @show_validator.setter
    def show_validator(self, show_validator):
        """Sets the show_validator of this CrfItemRpc.


        :param show_validator: The show_validator of this CrfItemRpc.  # noqa: E501
        :type: bool
        """

        self._show_validator = show_validator

    @property
    def soft_validation(self):
        """Gets the soft_validation of this CrfItemRpc.  # noqa: E501


        :return: The soft_validation of this CrfItemRpc.  # noqa: E501
        :rtype: bool
        """
        return self._soft_validation

    @soft_validation.setter
    def soft_validation(self, soft_validation):
        """Sets the soft_validation of this CrfItemRpc.


        :param soft_validation: The soft_validation of this CrfItemRpc.  # noqa: E501
        :type: bool
        """

        self._soft_validation = soft_validation

    @property
    def calc_field_equation(self):
        """Gets the calc_field_equation of this CrfItemRpc.  # noqa: E501


        :return: The calc_field_equation of this CrfItemRpc.  # noqa: E501
        :rtype: str
        """
        return self._calc_field_equation

    @calc_field_equation.setter
    def calc_field_equation(self, calc_field_equation):
        """Sets the calc_field_equation of this CrfItemRpc.


        :param calc_field_equation: The calc_field_equation of this CrfItemRpc.  # noqa: E501
        :type: str
        """

        self._calc_field_equation = calc_field_equation

    @property
    def custom_info1(self):
        """Gets the custom_info1 of this CrfItemRpc.  # noqa: E501


        :return: The custom_info1 of this CrfItemRpc.  # noqa: E501
        :rtype: str
        """
        return self._custom_info1

    @custom_info1.setter
    def custom_info1(self, custom_info1):
        """Sets the custom_info1 of this CrfItemRpc.


        :param custom_info1: The custom_info1 of this CrfItemRpc.  # noqa: E501
        :type: str
        """

        self._custom_info1 = custom_info1

    @property
    def custom_info2(self):
        """Gets the custom_info2 of this CrfItemRpc.  # noqa: E501


        :return: The custom_info2 of this CrfItemRpc.  # noqa: E501
        :rtype: str
        """
        return self._custom_info2

    @custom_info2.setter
    def custom_info2(self, custom_info2):
        """Sets the custom_info2 of this CrfItemRpc.


        :param custom_info2: The custom_info2 of this CrfItemRpc.  # noqa: E501
        :type: str
        """

        self._custom_info2 = custom_info2

    @property
    def group_id(self):
        """Gets the group_id of this CrfItemRpc.  # noqa: E501


        :return: The group_id of this CrfItemRpc.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this CrfItemRpc.


        :param group_id: The group_id of this CrfItemRpc.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def item_form_metadata_id(self):
        """Gets the item_form_metadata_id of this CrfItemRpc.  # noqa: E501


        :return: The item_form_metadata_id of this CrfItemRpc.  # noqa: E501
        :rtype: int
        """
        return self._item_form_metadata_id

    @item_form_metadata_id.setter
    def item_form_metadata_id(self, item_form_metadata_id):
        """Sets the item_form_metadata_id of this CrfItemRpc.


        :param item_form_metadata_id: The item_form_metadata_id of this CrfItemRpc.  # noqa: E501
        :type: int
        """

        self._item_form_metadata_id = item_form_metadata_id

    @property
    def section_id(self):
        """Gets the section_id of this CrfItemRpc.  # noqa: E501


        :return: The section_id of this CrfItemRpc.  # noqa: E501
        :rtype: int
        """
        return self._section_id

    @section_id.setter
    def section_id(self, section_id):
        """Sets the section_id of this CrfItemRpc.


        :param section_id: The section_id of this CrfItemRpc.  # noqa: E501
        :type: int
        """

        self._section_id = section_id

    @property
    def measurement_unit(self):
        """Gets the measurement_unit of this CrfItemRpc.  # noqa: E501


        :return: The measurement_unit of this CrfItemRpc.  # noqa: E501
        :rtype: int
        """
        return self._measurement_unit

    @measurement_unit.setter
    def measurement_unit(self, measurement_unit):
        """Sets the measurement_unit of this CrfItemRpc.


        :param measurement_unit: The measurement_unit of this CrfItemRpc.  # noqa: E501
        :type: int
        """

        self._measurement_unit = measurement_unit

    @property
    def measurement_unit_string(self):
        """Gets the measurement_unit_string of this CrfItemRpc.  # noqa: E501


        :return: The measurement_unit_string of this CrfItemRpc.  # noqa: E501
        :rtype: str
        """
        return self._measurement_unit_string

    @measurement_unit_string.setter
    def measurement_unit_string(self, measurement_unit_string):
        """Sets the measurement_unit_string of this CrfItemRpc.


        :param measurement_unit_string: The measurement_unit_string of this CrfItemRpc.  # noqa: E501
        :type: str
        """

        self._measurement_unit_string = measurement_unit_string

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrfItemRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CrfItemRpc):
            return True

        return self.to_dict() != other.to_dict()
