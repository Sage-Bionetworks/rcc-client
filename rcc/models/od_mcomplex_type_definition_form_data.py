# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ODMcomplexTypeDefinitionFormData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'audit_record': 'ODMcomplexTypeDefinitionAuditRecord',
        'signature': 'ODMcomplexTypeDefinitionSignature',
        'archive_layout_ref': 'ODMcomplexTypeDefinitionArchiveLayoutRef',
        'annotation': 'list[ODMcomplexTypeDefinitionAnnotation]',
        'item_group_data': 'list[ODMcomplexTypeDefinitionItemGroupData]',
        'updated_by': 'str',
        'updated_date': 'datetime',
        'sdv': 'bool',
        'mrv': 'bool',
        'drv': 'bool',
        'status': 'str',
        'states_history': 'str',
        'form_oid': 'str',
        'form_repeat_key': 'str',
        'transaction_type': 'str',
        'sdvby': 'str',
        'sdvdate': 'datetime',
        'mrvby': 'str',
        'mrvdate': 'datetime',
        'drvby': 'str',
        'drvdate': 'datetime',
        'desby': 'str',
        'desdate': 'datetime',
        'decby': 'str',
        'decdate': 'datetime'
    }

    attribute_map = {
        'audit_record': 'auditRecord',
        'signature': 'signature',
        'archive_layout_ref': 'archiveLayoutRef',
        'annotation': 'annotation',
        'item_group_data': 'itemGroupData',
        'updated_by': 'updatedBy',
        'updated_date': 'updatedDate',
        'sdv': 'sdv',
        'mrv': 'mrv',
        'drv': 'drv',
        'status': 'status',
        'states_history': 'statesHistory',
        'form_oid': 'formOID',
        'form_repeat_key': 'formRepeatKey',
        'transaction_type': 'transactionType',
        'sdvby': 'sdvby',
        'sdvdate': 'sdvdate',
        'mrvby': 'mrvby',
        'mrvdate': 'mrvdate',
        'drvby': 'drvby',
        'drvdate': 'drvdate',
        'desby': 'desby',
        'desdate': 'desdate',
        'decby': 'decby',
        'decdate': 'decdate'
    }

    def __init__(self, audit_record=None, signature=None, archive_layout_ref=None, annotation=None, item_group_data=None, updated_by=None, updated_date=None, sdv=None, mrv=None, drv=None, status=None, states_history=None, form_oid=None, form_repeat_key=None, transaction_type=None, sdvby=None, sdvdate=None, mrvby=None, mrvdate=None, drvby=None, drvdate=None, desby=None, desdate=None, decby=None, decdate=None, local_vars_configuration=None):  # noqa: E501
        """ODMcomplexTypeDefinitionFormData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._audit_record = None
        self._signature = None
        self._archive_layout_ref = None
        self._annotation = None
        self._item_group_data = None
        self._updated_by = None
        self._updated_date = None
        self._sdv = None
        self._mrv = None
        self._drv = None
        self._status = None
        self._states_history = None
        self._form_oid = None
        self._form_repeat_key = None
        self._transaction_type = None
        self._sdvby = None
        self._sdvdate = None
        self._mrvby = None
        self._mrvdate = None
        self._drvby = None
        self._drvdate = None
        self._desby = None
        self._desdate = None
        self._decby = None
        self._decdate = None
        self.discriminator = None

        if audit_record is not None:
            self.audit_record = audit_record
        if signature is not None:
            self.signature = signature
        if archive_layout_ref is not None:
            self.archive_layout_ref = archive_layout_ref
        if annotation is not None:
            self.annotation = annotation
        if item_group_data is not None:
            self.item_group_data = item_group_data
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_date is not None:
            self.updated_date = updated_date
        if sdv is not None:
            self.sdv = sdv
        if mrv is not None:
            self.mrv = mrv
        if drv is not None:
            self.drv = drv
        if status is not None:
            self.status = status
        if states_history is not None:
            self.states_history = states_history
        if form_oid is not None:
            self.form_oid = form_oid
        if form_repeat_key is not None:
            self.form_repeat_key = form_repeat_key
        if transaction_type is not None:
            self.transaction_type = transaction_type
        if sdvby is not None:
            self.sdvby = sdvby
        if sdvdate is not None:
            self.sdvdate = sdvdate
        if mrvby is not None:
            self.mrvby = mrvby
        if mrvdate is not None:
            self.mrvdate = mrvdate
        if drvby is not None:
            self.drvby = drvby
        if drvdate is not None:
            self.drvdate = drvdate
        if desby is not None:
            self.desby = desby
        if desdate is not None:
            self.desdate = desdate
        if decby is not None:
            self.decby = decby
        if decdate is not None:
            self.decdate = decdate

    @property
    def audit_record(self):
        """Gets the audit_record of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The audit_record of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionAuditRecord
        """
        return self._audit_record

    @audit_record.setter
    def audit_record(self, audit_record):
        """Sets the audit_record of this ODMcomplexTypeDefinitionFormData.


        :param audit_record: The audit_record of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: ODMcomplexTypeDefinitionAuditRecord
        """

        self._audit_record = audit_record

    @property
    def signature(self):
        """Gets the signature of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The signature of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionSignature
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this ODMcomplexTypeDefinitionFormData.


        :param signature: The signature of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: ODMcomplexTypeDefinitionSignature
        """

        self._signature = signature

    @property
    def archive_layout_ref(self):
        """Gets the archive_layout_ref of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The archive_layout_ref of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionArchiveLayoutRef
        """
        return self._archive_layout_ref

    @archive_layout_ref.setter
    def archive_layout_ref(self, archive_layout_ref):
        """Sets the archive_layout_ref of this ODMcomplexTypeDefinitionFormData.


        :param archive_layout_ref: The archive_layout_ref of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: ODMcomplexTypeDefinitionArchiveLayoutRef
        """

        self._archive_layout_ref = archive_layout_ref

    @property
    def annotation(self):
        """Gets the annotation of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The annotation of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionAnnotation]
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this ODMcomplexTypeDefinitionFormData.


        :param annotation: The annotation of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionAnnotation]
        """

        self._annotation = annotation

    @property
    def item_group_data(self):
        """Gets the item_group_data of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The item_group_data of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionItemGroupData]
        """
        return self._item_group_data

    @item_group_data.setter
    def item_group_data(self, item_group_data):
        """Sets the item_group_data of this ODMcomplexTypeDefinitionFormData.


        :param item_group_data: The item_group_data of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionItemGroupData]
        """

        self._item_group_data = item_group_data

    @property
    def updated_by(self):
        """Gets the updated_by of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The updated_by of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this ODMcomplexTypeDefinitionFormData.


        :param updated_by: The updated_by of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_date(self):
        """Gets the updated_date of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The updated_date of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this ODMcomplexTypeDefinitionFormData.


        :param updated_date: The updated_date of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: datetime
        """

        self._updated_date = updated_date

    @property
    def sdv(self):
        """Gets the sdv of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The sdv of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: bool
        """
        return self._sdv

    @sdv.setter
    def sdv(self, sdv):
        """Sets the sdv of this ODMcomplexTypeDefinitionFormData.


        :param sdv: The sdv of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: bool
        """

        self._sdv = sdv

    @property
    def mrv(self):
        """Gets the mrv of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The mrv of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: bool
        """
        return self._mrv

    @mrv.setter
    def mrv(self, mrv):
        """Sets the mrv of this ODMcomplexTypeDefinitionFormData.


        :param mrv: The mrv of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: bool
        """

        self._mrv = mrv

    @property
    def drv(self):
        """Gets the drv of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The drv of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: bool
        """
        return self._drv

    @drv.setter
    def drv(self, drv):
        """Sets the drv of this ODMcomplexTypeDefinitionFormData.


        :param drv: The drv of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: bool
        """

        self._drv = drv

    @property
    def status(self):
        """Gets the status of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The status of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ODMcomplexTypeDefinitionFormData.


        :param status: The status of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def states_history(self):
        """Gets the states_history of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The states_history of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: str
        """
        return self._states_history

    @states_history.setter
    def states_history(self, states_history):
        """Sets the states_history of this ODMcomplexTypeDefinitionFormData.


        :param states_history: The states_history of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: str
        """

        self._states_history = states_history

    @property
    def form_oid(self):
        """Gets the form_oid of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The form_oid of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: str
        """
        return self._form_oid

    @form_oid.setter
    def form_oid(self, form_oid):
        """Sets the form_oid of this ODMcomplexTypeDefinitionFormData.


        :param form_oid: The form_oid of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: str
        """

        self._form_oid = form_oid

    @property
    def form_repeat_key(self):
        """Gets the form_repeat_key of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The form_repeat_key of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: str
        """
        return self._form_repeat_key

    @form_repeat_key.setter
    def form_repeat_key(self, form_repeat_key):
        """Sets the form_repeat_key of this ODMcomplexTypeDefinitionFormData.


        :param form_repeat_key: The form_repeat_key of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: str
        """

        self._form_repeat_key = form_repeat_key

    @property
    def transaction_type(self):
        """Gets the transaction_type of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The transaction_type of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this ODMcomplexTypeDefinitionFormData.


        :param transaction_type: The transaction_type of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: str
        """
        allowed_values = ["INSERT", "UPDATE", "REMOVE", "UPSERT", "CONTEXT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and transaction_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `transaction_type` ({0}), must be one of {1}"  # noqa: E501
                .format(transaction_type, allowed_values)
            )

        self._transaction_type = transaction_type

    @property
    def sdvby(self):
        """Gets the sdvby of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The sdvby of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: str
        """
        return self._sdvby

    @sdvby.setter
    def sdvby(self, sdvby):
        """Sets the sdvby of this ODMcomplexTypeDefinitionFormData.


        :param sdvby: The sdvby of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: str
        """

        self._sdvby = sdvby

    @property
    def sdvdate(self):
        """Gets the sdvdate of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The sdvdate of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: datetime
        """
        return self._sdvdate

    @sdvdate.setter
    def sdvdate(self, sdvdate):
        """Sets the sdvdate of this ODMcomplexTypeDefinitionFormData.


        :param sdvdate: The sdvdate of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: datetime
        """

        self._sdvdate = sdvdate

    @property
    def mrvby(self):
        """Gets the mrvby of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The mrvby of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: str
        """
        return self._mrvby

    @mrvby.setter
    def mrvby(self, mrvby):
        """Sets the mrvby of this ODMcomplexTypeDefinitionFormData.


        :param mrvby: The mrvby of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: str
        """

        self._mrvby = mrvby

    @property
    def mrvdate(self):
        """Gets the mrvdate of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The mrvdate of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: datetime
        """
        return self._mrvdate

    @mrvdate.setter
    def mrvdate(self, mrvdate):
        """Sets the mrvdate of this ODMcomplexTypeDefinitionFormData.


        :param mrvdate: The mrvdate of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: datetime
        """

        self._mrvdate = mrvdate

    @property
    def drvby(self):
        """Gets the drvby of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The drvby of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: str
        """
        return self._drvby

    @drvby.setter
    def drvby(self, drvby):
        """Sets the drvby of this ODMcomplexTypeDefinitionFormData.


        :param drvby: The drvby of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: str
        """

        self._drvby = drvby

    @property
    def drvdate(self):
        """Gets the drvdate of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The drvdate of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: datetime
        """
        return self._drvdate

    @drvdate.setter
    def drvdate(self, drvdate):
        """Sets the drvdate of this ODMcomplexTypeDefinitionFormData.


        :param drvdate: The drvdate of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: datetime
        """

        self._drvdate = drvdate

    @property
    def desby(self):
        """Gets the desby of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The desby of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: str
        """
        return self._desby

    @desby.setter
    def desby(self, desby):
        """Sets the desby of this ODMcomplexTypeDefinitionFormData.


        :param desby: The desby of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: str
        """

        self._desby = desby

    @property
    def desdate(self):
        """Gets the desdate of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The desdate of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: datetime
        """
        return self._desdate

    @desdate.setter
    def desdate(self, desdate):
        """Sets the desdate of this ODMcomplexTypeDefinitionFormData.


        :param desdate: The desdate of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: datetime
        """

        self._desdate = desdate

    @property
    def decby(self):
        """Gets the decby of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The decby of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: str
        """
        return self._decby

    @decby.setter
    def decby(self, decby):
        """Sets the decby of this ODMcomplexTypeDefinitionFormData.


        :param decby: The decby of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: str
        """

        self._decby = decby

    @property
    def decdate(self):
        """Gets the decdate of this ODMcomplexTypeDefinitionFormData.  # noqa: E501


        :return: The decdate of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :rtype: datetime
        """
        return self._decdate

    @decdate.setter
    def decdate(self, decdate):
        """Sets the decdate of this ODMcomplexTypeDefinitionFormData.


        :param decdate: The decdate of this ODMcomplexTypeDefinitionFormData.  # noqa: E501
        :type: datetime
        """

        self._decdate = decdate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionFormData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionFormData):
            return True

        return self.to_dict() != other.to_dict()
