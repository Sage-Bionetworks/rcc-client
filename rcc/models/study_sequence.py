# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class StudySequence(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'entity_type': 'str',
        'next_available_sequence': 'int',
        'site_oid': 'str'
    }

    attribute_map = {
        'entity_type': 'entityType',
        'next_available_sequence': 'nextAvailableSequence',
        'site_oid': 'siteOID'
    }

    def __init__(self, entity_type=None, next_available_sequence=None, site_oid=None, local_vars_configuration=None):  # noqa: E501
        """StudySequence - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._entity_type = None
        self._next_available_sequence = None
        self._site_oid = None
        self.discriminator = None

        if entity_type is not None:
            self.entity_type = entity_type
        if next_available_sequence is not None:
            self.next_available_sequence = next_available_sequence
        if site_oid is not None:
            self.site_oid = site_oid

    @property
    def entity_type(self):
        """Gets the entity_type of this StudySequence.  # noqa: E501


        :return: The entity_type of this StudySequence.  # noqa: E501
        :rtype: str
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this StudySequence.


        :param entity_type: The entity_type of this StudySequence.  # noqa: E501
        :type: str
        """

        self._entity_type = entity_type

    @property
    def next_available_sequence(self):
        """Gets the next_available_sequence of this StudySequence.  # noqa: E501


        :return: The next_available_sequence of this StudySequence.  # noqa: E501
        :rtype: int
        """
        return self._next_available_sequence

    @next_available_sequence.setter
    def next_available_sequence(self, next_available_sequence):
        """Sets the next_available_sequence of this StudySequence.


        :param next_available_sequence: The next_available_sequence of this StudySequence.  # noqa: E501
        :type: int
        """

        self._next_available_sequence = next_available_sequence

    @property
    def site_oid(self):
        """Gets the site_oid of this StudySequence.  # noqa: E501


        :return: The site_oid of this StudySequence.  # noqa: E501
        :rtype: str
        """
        return self._site_oid

    @site_oid.setter
    def site_oid(self, site_oid):
        """Sets the site_oid of this StudySequence.


        :param site_oid: The site_oid of this StudySequence.  # noqa: E501
        :type: str
        """

        self._site_oid = site_oid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudySequence):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StudySequence):
            return True

        return self.to_dict() != other.to_dict()
