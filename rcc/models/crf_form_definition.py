# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class CRFFormDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'sas_name': 'str',
        'description': 'str',
        'show_lock': 'bool',
        'show_esignature': 'bool',
        'custom_text': 'str',
        'enable_survey': 'bool',
        'randomization_flag': 'bool',
        'available_on_mobile': 'bool',
        'enable_subject_source': 'bool',
        'dynamic_form': 'bool',
        'form_type': 'str',
        'promis_form_oid': 'str',
        'enable_phir_integration': 'bool',
        'available_in_patient_portal': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'sas_name': 'sasName',
        'description': 'description',
        'show_lock': 'showLock',
        'show_esignature': 'showEsignature',
        'custom_text': 'customText',
        'enable_survey': 'enableSurvey',
        'randomization_flag': 'randomizationFlag',
        'available_on_mobile': 'availableOnMobile',
        'enable_subject_source': 'enableSubjectSource',
        'dynamic_form': 'dynamicForm',
        'form_type': 'formType',
        'promis_form_oid': 'promisFormOID',
        'enable_phir_integration': 'enablePhirIntegration',
        'available_in_patient_portal': 'availableInPatientPortal'
    }

    def __init__(self, name=None, sas_name=None, description=None, show_lock=None, show_esignature=None, custom_text=None, enable_survey=None, randomization_flag=None, available_on_mobile=None, enable_subject_source=None, dynamic_form=None, form_type=None, promis_form_oid=None, enable_phir_integration=None, available_in_patient_portal=None, local_vars_configuration=None):  # noqa: E501
        """CRFFormDefinition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._sas_name = None
        self._description = None
        self._show_lock = None
        self._show_esignature = None
        self._custom_text = None
        self._enable_survey = None
        self._randomization_flag = None
        self._available_on_mobile = None
        self._enable_subject_source = None
        self._dynamic_form = None
        self._form_type = None
        self._promis_form_oid = None
        self._enable_phir_integration = None
        self._available_in_patient_portal = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if sas_name is not None:
            self.sas_name = sas_name
        if description is not None:
            self.description = description
        if show_lock is not None:
            self.show_lock = show_lock
        if show_esignature is not None:
            self.show_esignature = show_esignature
        if custom_text is not None:
            self.custom_text = custom_text
        if enable_survey is not None:
            self.enable_survey = enable_survey
        if randomization_flag is not None:
            self.randomization_flag = randomization_flag
        if available_on_mobile is not None:
            self.available_on_mobile = available_on_mobile
        if enable_subject_source is not None:
            self.enable_subject_source = enable_subject_source
        if dynamic_form is not None:
            self.dynamic_form = dynamic_form
        if form_type is not None:
            self.form_type = form_type
        if promis_form_oid is not None:
            self.promis_form_oid = promis_form_oid
        if enable_phir_integration is not None:
            self.enable_phir_integration = enable_phir_integration
        if available_in_patient_portal is not None:
            self.available_in_patient_portal = available_in_patient_portal

    @property
    def name(self):
        """Gets the name of this CRFFormDefinition.  # noqa: E501


        :return: The name of this CRFFormDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CRFFormDefinition.


        :param name: The name of this CRFFormDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def sas_name(self):
        """Gets the sas_name of this CRFFormDefinition.  # noqa: E501


        :return: The sas_name of this CRFFormDefinition.  # noqa: E501
        :rtype: str
        """
        return self._sas_name

    @sas_name.setter
    def sas_name(self, sas_name):
        """Sets the sas_name of this CRFFormDefinition.


        :param sas_name: The sas_name of this CRFFormDefinition.  # noqa: E501
        :type: str
        """

        self._sas_name = sas_name

    @property
    def description(self):
        """Gets the description of this CRFFormDefinition.  # noqa: E501


        :return: The description of this CRFFormDefinition.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CRFFormDefinition.


        :param description: The description of this CRFFormDefinition.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def show_lock(self):
        """Gets the show_lock of this CRFFormDefinition.  # noqa: E501


        :return: The show_lock of this CRFFormDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._show_lock

    @show_lock.setter
    def show_lock(self, show_lock):
        """Sets the show_lock of this CRFFormDefinition.


        :param show_lock: The show_lock of this CRFFormDefinition.  # noqa: E501
        :type: bool
        """

        self._show_lock = show_lock

    @property
    def show_esignature(self):
        """Gets the show_esignature of this CRFFormDefinition.  # noqa: E501


        :return: The show_esignature of this CRFFormDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._show_esignature

    @show_esignature.setter
    def show_esignature(self, show_esignature):
        """Sets the show_esignature of this CRFFormDefinition.


        :param show_esignature: The show_esignature of this CRFFormDefinition.  # noqa: E501
        :type: bool
        """

        self._show_esignature = show_esignature

    @property
    def custom_text(self):
        """Gets the custom_text of this CRFFormDefinition.  # noqa: E501


        :return: The custom_text of this CRFFormDefinition.  # noqa: E501
        :rtype: str
        """
        return self._custom_text

    @custom_text.setter
    def custom_text(self, custom_text):
        """Sets the custom_text of this CRFFormDefinition.


        :param custom_text: The custom_text of this CRFFormDefinition.  # noqa: E501
        :type: str
        """

        self._custom_text = custom_text

    @property
    def enable_survey(self):
        """Gets the enable_survey of this CRFFormDefinition.  # noqa: E501


        :return: The enable_survey of this CRFFormDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._enable_survey

    @enable_survey.setter
    def enable_survey(self, enable_survey):
        """Sets the enable_survey of this CRFFormDefinition.


        :param enable_survey: The enable_survey of this CRFFormDefinition.  # noqa: E501
        :type: bool
        """

        self._enable_survey = enable_survey

    @property
    def randomization_flag(self):
        """Gets the randomization_flag of this CRFFormDefinition.  # noqa: E501


        :return: The randomization_flag of this CRFFormDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._randomization_flag

    @randomization_flag.setter
    def randomization_flag(self, randomization_flag):
        """Sets the randomization_flag of this CRFFormDefinition.


        :param randomization_flag: The randomization_flag of this CRFFormDefinition.  # noqa: E501
        :type: bool
        """

        self._randomization_flag = randomization_flag

    @property
    def available_on_mobile(self):
        """Gets the available_on_mobile of this CRFFormDefinition.  # noqa: E501


        :return: The available_on_mobile of this CRFFormDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._available_on_mobile

    @available_on_mobile.setter
    def available_on_mobile(self, available_on_mobile):
        """Sets the available_on_mobile of this CRFFormDefinition.


        :param available_on_mobile: The available_on_mobile of this CRFFormDefinition.  # noqa: E501
        :type: bool
        """

        self._available_on_mobile = available_on_mobile

    @property
    def enable_subject_source(self):
        """Gets the enable_subject_source of this CRFFormDefinition.  # noqa: E501


        :return: The enable_subject_source of this CRFFormDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._enable_subject_source

    @enable_subject_source.setter
    def enable_subject_source(self, enable_subject_source):
        """Sets the enable_subject_source of this CRFFormDefinition.


        :param enable_subject_source: The enable_subject_source of this CRFFormDefinition.  # noqa: E501
        :type: bool
        """

        self._enable_subject_source = enable_subject_source

    @property
    def dynamic_form(self):
        """Gets the dynamic_form of this CRFFormDefinition.  # noqa: E501


        :return: The dynamic_form of this CRFFormDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._dynamic_form

    @dynamic_form.setter
    def dynamic_form(self, dynamic_form):
        """Sets the dynamic_form of this CRFFormDefinition.


        :param dynamic_form: The dynamic_form of this CRFFormDefinition.  # noqa: E501
        :type: bool
        """

        self._dynamic_form = dynamic_form

    @property
    def form_type(self):
        """Gets the form_type of this CRFFormDefinition.  # noqa: E501


        :return: The form_type of this CRFFormDefinition.  # noqa: E501
        :rtype: str
        """
        return self._form_type

    @form_type.setter
    def form_type(self, form_type):
        """Sets the form_type of this CRFFormDefinition.


        :param form_type: The form_type of this CRFFormDefinition.  # noqa: E501
        :type: str
        """

        self._form_type = form_type

    @property
    def promis_form_oid(self):
        """Gets the promis_form_oid of this CRFFormDefinition.  # noqa: E501


        :return: The promis_form_oid of this CRFFormDefinition.  # noqa: E501
        :rtype: str
        """
        return self._promis_form_oid

    @promis_form_oid.setter
    def promis_form_oid(self, promis_form_oid):
        """Sets the promis_form_oid of this CRFFormDefinition.


        :param promis_form_oid: The promis_form_oid of this CRFFormDefinition.  # noqa: E501
        :type: str
        """

        self._promis_form_oid = promis_form_oid

    @property
    def enable_phir_integration(self):
        """Gets the enable_phir_integration of this CRFFormDefinition.  # noqa: E501


        :return: The enable_phir_integration of this CRFFormDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._enable_phir_integration

    @enable_phir_integration.setter
    def enable_phir_integration(self, enable_phir_integration):
        """Sets the enable_phir_integration of this CRFFormDefinition.


        :param enable_phir_integration: The enable_phir_integration of this CRFFormDefinition.  # noqa: E501
        :type: bool
        """

        self._enable_phir_integration = enable_phir_integration

    @property
    def available_in_patient_portal(self):
        """Gets the available_in_patient_portal of this CRFFormDefinition.  # noqa: E501


        :return: The available_in_patient_portal of this CRFFormDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._available_in_patient_portal

    @available_in_patient_portal.setter
    def available_in_patient_portal(self, available_in_patient_portal):
        """Sets the available_in_patient_portal of this CRFFormDefinition.


        :param available_in_patient_portal: The available_in_patient_portal of this CRFFormDefinition.  # noqa: E501
        :type: bool
        """

        self._available_in_patient_portal = available_in_patient_portal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CRFFormDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CRFFormDefinition):
            return True

        return self.to_dict() != other.to_dict()
