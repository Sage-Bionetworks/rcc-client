# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class SectionRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'crf_id': 'int',
        'rc_crf_versions_id': 'int',
        'label': 'str',
        'title': 'str',
        'subtitle': 'str',
        'instructions': 'str',
        'page_number_label': 'str',
        'display_sequence': 'int',
        'parent_id': 'int',
        'borders': 'int',
        'fields_total_width': 'int',
        'field_labels_width': 'int'
    }

    attribute_map = {
        'id': 'id',
        'crf_id': 'crfId',
        'rc_crf_versions_id': 'rcCrfVersionsId',
        'label': 'label',
        'title': 'title',
        'subtitle': 'subtitle',
        'instructions': 'instructions',
        'page_number_label': 'pageNumberLabel',
        'display_sequence': 'displaySequence',
        'parent_id': 'parentId',
        'borders': 'borders',
        'fields_total_width': 'fieldsTotalWidth',
        'field_labels_width': 'fieldLabelsWidth'
    }

    def __init__(self, id=None, crf_id=None, rc_crf_versions_id=None, label=None, title=None, subtitle=None, instructions=None, page_number_label=None, display_sequence=None, parent_id=None, borders=None, fields_total_width=None, field_labels_width=None, local_vars_configuration=None):  # noqa: E501
        """SectionRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._crf_id = None
        self._rc_crf_versions_id = None
        self._label = None
        self._title = None
        self._subtitle = None
        self._instructions = None
        self._page_number_label = None
        self._display_sequence = None
        self._parent_id = None
        self._borders = None
        self._fields_total_width = None
        self._field_labels_width = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if crf_id is not None:
            self.crf_id = crf_id
        if rc_crf_versions_id is not None:
            self.rc_crf_versions_id = rc_crf_versions_id
        if label is not None:
            self.label = label
        if title is not None:
            self.title = title
        if subtitle is not None:
            self.subtitle = subtitle
        if instructions is not None:
            self.instructions = instructions
        if page_number_label is not None:
            self.page_number_label = page_number_label
        if display_sequence is not None:
            self.display_sequence = display_sequence
        if parent_id is not None:
            self.parent_id = parent_id
        if borders is not None:
            self.borders = borders
        if fields_total_width is not None:
            self.fields_total_width = fields_total_width
        if field_labels_width is not None:
            self.field_labels_width = field_labels_width

    @property
    def id(self):
        """Gets the id of this SectionRpc.  # noqa: E501


        :return: The id of this SectionRpc.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SectionRpc.


        :param id: The id of this SectionRpc.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def crf_id(self):
        """Gets the crf_id of this SectionRpc.  # noqa: E501


        :return: The crf_id of this SectionRpc.  # noqa: E501
        :rtype: int
        """
        return self._crf_id

    @crf_id.setter
    def crf_id(self, crf_id):
        """Sets the crf_id of this SectionRpc.


        :param crf_id: The crf_id of this SectionRpc.  # noqa: E501
        :type: int
        """

        self._crf_id = crf_id

    @property
    def rc_crf_versions_id(self):
        """Gets the rc_crf_versions_id of this SectionRpc.  # noqa: E501


        :return: The rc_crf_versions_id of this SectionRpc.  # noqa: E501
        :rtype: int
        """
        return self._rc_crf_versions_id

    @rc_crf_versions_id.setter
    def rc_crf_versions_id(self, rc_crf_versions_id):
        """Sets the rc_crf_versions_id of this SectionRpc.


        :param rc_crf_versions_id: The rc_crf_versions_id of this SectionRpc.  # noqa: E501
        :type: int
        """

        self._rc_crf_versions_id = rc_crf_versions_id

    @property
    def label(self):
        """Gets the label of this SectionRpc.  # noqa: E501


        :return: The label of this SectionRpc.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this SectionRpc.


        :param label: The label of this SectionRpc.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def title(self):
        """Gets the title of this SectionRpc.  # noqa: E501


        :return: The title of this SectionRpc.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SectionRpc.


        :param title: The title of this SectionRpc.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def subtitle(self):
        """Gets the subtitle of this SectionRpc.  # noqa: E501


        :return: The subtitle of this SectionRpc.  # noqa: E501
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this SectionRpc.


        :param subtitle: The subtitle of this SectionRpc.  # noqa: E501
        :type: str
        """

        self._subtitle = subtitle

    @property
    def instructions(self):
        """Gets the instructions of this SectionRpc.  # noqa: E501


        :return: The instructions of this SectionRpc.  # noqa: E501
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this SectionRpc.


        :param instructions: The instructions of this SectionRpc.  # noqa: E501
        :type: str
        """

        self._instructions = instructions

    @property
    def page_number_label(self):
        """Gets the page_number_label of this SectionRpc.  # noqa: E501


        :return: The page_number_label of this SectionRpc.  # noqa: E501
        :rtype: str
        """
        return self._page_number_label

    @page_number_label.setter
    def page_number_label(self, page_number_label):
        """Sets the page_number_label of this SectionRpc.


        :param page_number_label: The page_number_label of this SectionRpc.  # noqa: E501
        :type: str
        """

        self._page_number_label = page_number_label

    @property
    def display_sequence(self):
        """Gets the display_sequence of this SectionRpc.  # noqa: E501


        :return: The display_sequence of this SectionRpc.  # noqa: E501
        :rtype: int
        """
        return self._display_sequence

    @display_sequence.setter
    def display_sequence(self, display_sequence):
        """Sets the display_sequence of this SectionRpc.


        :param display_sequence: The display_sequence of this SectionRpc.  # noqa: E501
        :type: int
        """

        self._display_sequence = display_sequence

    @property
    def parent_id(self):
        """Gets the parent_id of this SectionRpc.  # noqa: E501


        :return: The parent_id of this SectionRpc.  # noqa: E501
        :rtype: int
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this SectionRpc.


        :param parent_id: The parent_id of this SectionRpc.  # noqa: E501
        :type: int
        """

        self._parent_id = parent_id

    @property
    def borders(self):
        """Gets the borders of this SectionRpc.  # noqa: E501


        :return: The borders of this SectionRpc.  # noqa: E501
        :rtype: int
        """
        return self._borders

    @borders.setter
    def borders(self, borders):
        """Sets the borders of this SectionRpc.


        :param borders: The borders of this SectionRpc.  # noqa: E501
        :type: int
        """

        self._borders = borders

    @property
    def fields_total_width(self):
        """Gets the fields_total_width of this SectionRpc.  # noqa: E501


        :return: The fields_total_width of this SectionRpc.  # noqa: E501
        :rtype: int
        """
        return self._fields_total_width

    @fields_total_width.setter
    def fields_total_width(self, fields_total_width):
        """Sets the fields_total_width of this SectionRpc.


        :param fields_total_width: The fields_total_width of this SectionRpc.  # noqa: E501
        :type: int
        """

        self._fields_total_width = fields_total_width

    @property
    def field_labels_width(self):
        """Gets the field_labels_width of this SectionRpc.  # noqa: E501


        :return: The field_labels_width of this SectionRpc.  # noqa: E501
        :rtype: int
        """
        return self._field_labels_width

    @field_labels_width.setter
    def field_labels_width(self, field_labels_width):
        """Sets the field_labels_width of this SectionRpc.


        :param field_labels_width: The field_labels_width of this SectionRpc.  # noqa: E501
        :type: int
        """

        self._field_labels_width = field_labels_width

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SectionRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SectionRpc):
            return True

        return self.to_dict() != other.to_dict()
