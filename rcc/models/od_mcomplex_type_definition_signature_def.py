# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ODMcomplexTypeDefinitionSignatureDef(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'meaning': 'ODMcomplexTypeDefinitionMeaning',
        'legal_reason': 'ODMcomplexTypeDefinitionLegalReason',
        'oid': 'str',
        'methodology': 'str'
    }

    attribute_map = {
        'meaning': 'meaning',
        'legal_reason': 'legalReason',
        'oid': 'oid',
        'methodology': 'methodology'
    }

    def __init__(self, meaning=None, legal_reason=None, oid=None, methodology=None, local_vars_configuration=None):  # noqa: E501
        """ODMcomplexTypeDefinitionSignatureDef - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._meaning = None
        self._legal_reason = None
        self._oid = None
        self._methodology = None
        self.discriminator = None

        self.meaning = meaning
        self.legal_reason = legal_reason
        if oid is not None:
            self.oid = oid
        if methodology is not None:
            self.methodology = methodology

    @property
    def meaning(self):
        """Gets the meaning of this ODMcomplexTypeDefinitionSignatureDef.  # noqa: E501


        :return: The meaning of this ODMcomplexTypeDefinitionSignatureDef.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionMeaning
        """
        return self._meaning

    @meaning.setter
    def meaning(self, meaning):
        """Sets the meaning of this ODMcomplexTypeDefinitionSignatureDef.


        :param meaning: The meaning of this ODMcomplexTypeDefinitionSignatureDef.  # noqa: E501
        :type: ODMcomplexTypeDefinitionMeaning
        """
        if self.local_vars_configuration.client_side_validation and meaning is None:  # noqa: E501
            raise ValueError("Invalid value for `meaning`, must not be `None`")  # noqa: E501

        self._meaning = meaning

    @property
    def legal_reason(self):
        """Gets the legal_reason of this ODMcomplexTypeDefinitionSignatureDef.  # noqa: E501


        :return: The legal_reason of this ODMcomplexTypeDefinitionSignatureDef.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionLegalReason
        """
        return self._legal_reason

    @legal_reason.setter
    def legal_reason(self, legal_reason):
        """Sets the legal_reason of this ODMcomplexTypeDefinitionSignatureDef.


        :param legal_reason: The legal_reason of this ODMcomplexTypeDefinitionSignatureDef.  # noqa: E501
        :type: ODMcomplexTypeDefinitionLegalReason
        """
        if self.local_vars_configuration.client_side_validation and legal_reason is None:  # noqa: E501
            raise ValueError("Invalid value for `legal_reason`, must not be `None`")  # noqa: E501

        self._legal_reason = legal_reason

    @property
    def oid(self):
        """Gets the oid of this ODMcomplexTypeDefinitionSignatureDef.  # noqa: E501


        :return: The oid of this ODMcomplexTypeDefinitionSignatureDef.  # noqa: E501
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this ODMcomplexTypeDefinitionSignatureDef.


        :param oid: The oid of this ODMcomplexTypeDefinitionSignatureDef.  # noqa: E501
        :type: str
        """

        self._oid = oid

    @property
    def methodology(self):
        """Gets the methodology of this ODMcomplexTypeDefinitionSignatureDef.  # noqa: E501


        :return: The methodology of this ODMcomplexTypeDefinitionSignatureDef.  # noqa: E501
        :rtype: str
        """
        return self._methodology

    @methodology.setter
    def methodology(self, methodology):
        """Sets the methodology of this ODMcomplexTypeDefinitionSignatureDef.


        :param methodology: The methodology of this ODMcomplexTypeDefinitionSignatureDef.  # noqa: E501
        :type: str
        """
        allowed_values = ["DIGITAL", "ELECTRONIC"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and methodology not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `methodology` ({0}), must be one of {1}"  # noqa: E501
                .format(methodology, allowed_values)
            )

        self._methodology = methodology

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionSignatureDef):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionSignatureDef):
            return True

        return self.to_dict() != other.to_dict()
