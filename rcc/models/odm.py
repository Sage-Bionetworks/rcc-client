# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ODM(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'study': 'list[ODMcomplexTypeDefinitionStudy]',
        'admin_data': 'list[ODMcomplexTypeDefinitionAdminData]',
        'reference_data': 'list[ODMcomplexTypeDefinitionReferenceData]',
        'clinical_data': 'list[ODMcomplexTypeDefinitionClinicalData]',
        'association': 'list[ODMcomplexTypeDefinitionAssociation]',
        'dig_signature': 'list[SignatureType]',
        'description': 'str',
        'file_type': 'str',
        'granularity': 'str',
        'archival': 'str',
        'file_oid': 'str',
        'creation_date_time': 'datetime',
        'prior_file_oid': 'str',
        'as_of_date_time': 'datetime',
        'originator': 'str',
        'source_system': 'str',
        'source_system_version': 'str',
        'id': 'str',
        'odmversion': 'str'
    }

    attribute_map = {
        'study': 'study',
        'admin_data': 'adminData',
        'reference_data': 'referenceData',
        'clinical_data': 'clinicalData',
        'association': 'association',
        'dig_signature': 'digSignature',
        'description': 'description',
        'file_type': 'fileType',
        'granularity': 'granularity',
        'archival': 'archival',
        'file_oid': 'fileOID',
        'creation_date_time': 'creationDateTime',
        'prior_file_oid': 'priorFileOID',
        'as_of_date_time': 'asOfDateTime',
        'originator': 'originator',
        'source_system': 'sourceSystem',
        'source_system_version': 'sourceSystemVersion',
        'id': 'id',
        'odmversion': 'odmversion'
    }

    def __init__(self, study=None, admin_data=None, reference_data=None, clinical_data=None, association=None, dig_signature=None, description=None, file_type=None, granularity=None, archival=None, file_oid=None, creation_date_time=None, prior_file_oid=None, as_of_date_time=None, originator=None, source_system=None, source_system_version=None, id=None, odmversion=None, local_vars_configuration=None):  # noqa: E501
        """ODM - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._study = None
        self._admin_data = None
        self._reference_data = None
        self._clinical_data = None
        self._association = None
        self._dig_signature = None
        self._description = None
        self._file_type = None
        self._granularity = None
        self._archival = None
        self._file_oid = None
        self._creation_date_time = None
        self._prior_file_oid = None
        self._as_of_date_time = None
        self._originator = None
        self._source_system = None
        self._source_system_version = None
        self._id = None
        self._odmversion = None
        self.discriminator = None

        if study is not None:
            self.study = study
        if admin_data is not None:
            self.admin_data = admin_data
        if reference_data is not None:
            self.reference_data = reference_data
        if clinical_data is not None:
            self.clinical_data = clinical_data
        if association is not None:
            self.association = association
        if dig_signature is not None:
            self.dig_signature = dig_signature
        if description is not None:
            self.description = description
        if file_type is not None:
            self.file_type = file_type
        if granularity is not None:
            self.granularity = granularity
        if archival is not None:
            self.archival = archival
        if file_oid is not None:
            self.file_oid = file_oid
        if creation_date_time is not None:
            self.creation_date_time = creation_date_time
        if prior_file_oid is not None:
            self.prior_file_oid = prior_file_oid
        if as_of_date_time is not None:
            self.as_of_date_time = as_of_date_time
        if originator is not None:
            self.originator = originator
        if source_system is not None:
            self.source_system = source_system
        if source_system_version is not None:
            self.source_system_version = source_system_version
        if id is not None:
            self.id = id
        if odmversion is not None:
            self.odmversion = odmversion

    @property
    def study(self):
        """Gets the study of this ODM.  # noqa: E501


        :return: The study of this ODM.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionStudy]
        """
        return self._study

    @study.setter
    def study(self, study):
        """Sets the study of this ODM.


        :param study: The study of this ODM.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionStudy]
        """

        self._study = study

    @property
    def admin_data(self):
        """Gets the admin_data of this ODM.  # noqa: E501


        :return: The admin_data of this ODM.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionAdminData]
        """
        return self._admin_data

    @admin_data.setter
    def admin_data(self, admin_data):
        """Sets the admin_data of this ODM.


        :param admin_data: The admin_data of this ODM.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionAdminData]
        """

        self._admin_data = admin_data

    @property
    def reference_data(self):
        """Gets the reference_data of this ODM.  # noqa: E501


        :return: The reference_data of this ODM.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionReferenceData]
        """
        return self._reference_data

    @reference_data.setter
    def reference_data(self, reference_data):
        """Sets the reference_data of this ODM.


        :param reference_data: The reference_data of this ODM.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionReferenceData]
        """

        self._reference_data = reference_data

    @property
    def clinical_data(self):
        """Gets the clinical_data of this ODM.  # noqa: E501


        :return: The clinical_data of this ODM.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionClinicalData]
        """
        return self._clinical_data

    @clinical_data.setter
    def clinical_data(self, clinical_data):
        """Sets the clinical_data of this ODM.


        :param clinical_data: The clinical_data of this ODM.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionClinicalData]
        """

        self._clinical_data = clinical_data

    @property
    def association(self):
        """Gets the association of this ODM.  # noqa: E501


        :return: The association of this ODM.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionAssociation]
        """
        return self._association

    @association.setter
    def association(self, association):
        """Sets the association of this ODM.


        :param association: The association of this ODM.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionAssociation]
        """

        self._association = association

    @property
    def dig_signature(self):
        """Gets the dig_signature of this ODM.  # noqa: E501


        :return: The dig_signature of this ODM.  # noqa: E501
        :rtype: list[SignatureType]
        """
        return self._dig_signature

    @dig_signature.setter
    def dig_signature(self, dig_signature):
        """Sets the dig_signature of this ODM.


        :param dig_signature: The dig_signature of this ODM.  # noqa: E501
        :type: list[SignatureType]
        """

        self._dig_signature = dig_signature

    @property
    def description(self):
        """Gets the description of this ODM.  # noqa: E501


        :return: The description of this ODM.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ODM.


        :param description: The description of this ODM.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def file_type(self):
        """Gets the file_type of this ODM.  # noqa: E501


        :return: The file_type of this ODM.  # noqa: E501
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this ODM.


        :param file_type: The file_type of this ODM.  # noqa: E501
        :type: str
        """
        allowed_values = ["SNAPSHOT", "TRANSACTIONAL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and file_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `file_type` ({0}), must be one of {1}"  # noqa: E501
                .format(file_type, allowed_values)
            )

        self._file_type = file_type

    @property
    def granularity(self):
        """Gets the granularity of this ODM.  # noqa: E501


        :return: The granularity of this ODM.  # noqa: E501
        :rtype: str
        """
        return self._granularity

    @granularity.setter
    def granularity(self, granularity):
        """Sets the granularity of this ODM.


        :param granularity: The granularity of this ODM.  # noqa: E501
        :type: str
        """
        allowed_values = ["ALL", "METADATA", "ADMIN_DATA", "REFERENCE_DATA", "ALL_CLINICAL_DATA", "SINGLE_SITE", "SINGLE_SUBJECT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and granularity not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `granularity` ({0}), must be one of {1}"  # noqa: E501
                .format(granularity, allowed_values)
            )

        self._granularity = granularity

    @property
    def archival(self):
        """Gets the archival of this ODM.  # noqa: E501


        :return: The archival of this ODM.  # noqa: E501
        :rtype: str
        """
        return self._archival

    @archival.setter
    def archival(self, archival):
        """Sets the archival of this ODM.


        :param archival: The archival of this ODM.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and archival not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `archival` ({0}), must be one of {1}"  # noqa: E501
                .format(archival, allowed_values)
            )

        self._archival = archival

    @property
    def file_oid(self):
        """Gets the file_oid of this ODM.  # noqa: E501


        :return: The file_oid of this ODM.  # noqa: E501
        :rtype: str
        """
        return self._file_oid

    @file_oid.setter
    def file_oid(self, file_oid):
        """Sets the file_oid of this ODM.


        :param file_oid: The file_oid of this ODM.  # noqa: E501
        :type: str
        """

        self._file_oid = file_oid

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this ODM.  # noqa: E501


        :return: The creation_date_time of this ODM.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this ODM.


        :param creation_date_time: The creation_date_time of this ODM.  # noqa: E501
        :type: datetime
        """

        self._creation_date_time = creation_date_time

    @property
    def prior_file_oid(self):
        """Gets the prior_file_oid of this ODM.  # noqa: E501


        :return: The prior_file_oid of this ODM.  # noqa: E501
        :rtype: str
        """
        return self._prior_file_oid

    @prior_file_oid.setter
    def prior_file_oid(self, prior_file_oid):
        """Sets the prior_file_oid of this ODM.


        :param prior_file_oid: The prior_file_oid of this ODM.  # noqa: E501
        :type: str
        """

        self._prior_file_oid = prior_file_oid

    @property
    def as_of_date_time(self):
        """Gets the as_of_date_time of this ODM.  # noqa: E501


        :return: The as_of_date_time of this ODM.  # noqa: E501
        :rtype: datetime
        """
        return self._as_of_date_time

    @as_of_date_time.setter
    def as_of_date_time(self, as_of_date_time):
        """Sets the as_of_date_time of this ODM.


        :param as_of_date_time: The as_of_date_time of this ODM.  # noqa: E501
        :type: datetime
        """

        self._as_of_date_time = as_of_date_time

    @property
    def originator(self):
        """Gets the originator of this ODM.  # noqa: E501


        :return: The originator of this ODM.  # noqa: E501
        :rtype: str
        """
        return self._originator

    @originator.setter
    def originator(self, originator):
        """Sets the originator of this ODM.


        :param originator: The originator of this ODM.  # noqa: E501
        :type: str
        """

        self._originator = originator

    @property
    def source_system(self):
        """Gets the source_system of this ODM.  # noqa: E501


        :return: The source_system of this ODM.  # noqa: E501
        :rtype: str
        """
        return self._source_system

    @source_system.setter
    def source_system(self, source_system):
        """Sets the source_system of this ODM.


        :param source_system: The source_system of this ODM.  # noqa: E501
        :type: str
        """

        self._source_system = source_system

    @property
    def source_system_version(self):
        """Gets the source_system_version of this ODM.  # noqa: E501


        :return: The source_system_version of this ODM.  # noqa: E501
        :rtype: str
        """
        return self._source_system_version

    @source_system_version.setter
    def source_system_version(self, source_system_version):
        """Sets the source_system_version of this ODM.


        :param source_system_version: The source_system_version of this ODM.  # noqa: E501
        :type: str
        """

        self._source_system_version = source_system_version

    @property
    def id(self):
        """Gets the id of this ODM.  # noqa: E501


        :return: The id of this ODM.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ODM.


        :param id: The id of this ODM.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def odmversion(self):
        """Gets the odmversion of this ODM.  # noqa: E501


        :return: The odmversion of this ODM.  # noqa: E501
        :rtype: str
        """
        return self._odmversion

    @odmversion.setter
    def odmversion(self, odmversion):
        """Sets the odmversion of this ODM.


        :param odmversion: The odmversion of this ODM.  # noqa: E501
        :type: str
        """

        self._odmversion = odmversion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ODM):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ODM):
            return True

        return self.to_dict() != other.to_dict()
