# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class AcademicStudyGroupClassViewRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'study_id': 'int',
        'group_class_type_id': 'int',
        'group_class_type_name': 'str',
        'subject_assignment_id': 'int',
        'subject_assignment_name': 'str',
        'name': 'str',
        'is_default': 'bool',
        'disp_sequence': 'int',
        'planned_size': 'int',
        'enabled': 'bool',
        'names': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'study_id': 'studyId',
        'group_class_type_id': 'groupClassTypeId',
        'group_class_type_name': 'groupClassTypeName',
        'subject_assignment_id': 'subjectAssignmentId',
        'subject_assignment_name': 'subjectAssignmentName',
        'name': 'name',
        'is_default': 'isDefault',
        'disp_sequence': 'dispSequence',
        'planned_size': 'plannedSize',
        'enabled': 'enabled',
        'names': 'names'
    }

    def __init__(self, id=None, study_id=None, group_class_type_id=None, group_class_type_name=None, subject_assignment_id=None, subject_assignment_name=None, name=None, is_default=None, disp_sequence=None, planned_size=None, enabled=None, names=None, local_vars_configuration=None):  # noqa: E501
        """AcademicStudyGroupClassViewRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._study_id = None
        self._group_class_type_id = None
        self._group_class_type_name = None
        self._subject_assignment_id = None
        self._subject_assignment_name = None
        self._name = None
        self._is_default = None
        self._disp_sequence = None
        self._planned_size = None
        self._enabled = None
        self._names = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if study_id is not None:
            self.study_id = study_id
        if group_class_type_id is not None:
            self.group_class_type_id = group_class_type_id
        if group_class_type_name is not None:
            self.group_class_type_name = group_class_type_name
        if subject_assignment_id is not None:
            self.subject_assignment_id = subject_assignment_id
        if subject_assignment_name is not None:
            self.subject_assignment_name = subject_assignment_name
        if name is not None:
            self.name = name
        if is_default is not None:
            self.is_default = is_default
        if disp_sequence is not None:
            self.disp_sequence = disp_sequence
        if planned_size is not None:
            self.planned_size = planned_size
        if enabled is not None:
            self.enabled = enabled
        if names is not None:
            self.names = names

    @property
    def id(self):
        """Gets the id of this AcademicStudyGroupClassViewRpc.  # noqa: E501


        :return: The id of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AcademicStudyGroupClassViewRpc.


        :param id: The id of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def study_id(self):
        """Gets the study_id of this AcademicStudyGroupClassViewRpc.  # noqa: E501


        :return: The study_id of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :rtype: int
        """
        return self._study_id

    @study_id.setter
    def study_id(self, study_id):
        """Sets the study_id of this AcademicStudyGroupClassViewRpc.


        :param study_id: The study_id of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :type: int
        """

        self._study_id = study_id

    @property
    def group_class_type_id(self):
        """Gets the group_class_type_id of this AcademicStudyGroupClassViewRpc.  # noqa: E501


        :return: The group_class_type_id of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :rtype: int
        """
        return self._group_class_type_id

    @group_class_type_id.setter
    def group_class_type_id(self, group_class_type_id):
        """Sets the group_class_type_id of this AcademicStudyGroupClassViewRpc.


        :param group_class_type_id: The group_class_type_id of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :type: int
        """

        self._group_class_type_id = group_class_type_id

    @property
    def group_class_type_name(self):
        """Gets the group_class_type_name of this AcademicStudyGroupClassViewRpc.  # noqa: E501


        :return: The group_class_type_name of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :rtype: str
        """
        return self._group_class_type_name

    @group_class_type_name.setter
    def group_class_type_name(self, group_class_type_name):
        """Sets the group_class_type_name of this AcademicStudyGroupClassViewRpc.


        :param group_class_type_name: The group_class_type_name of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :type: str
        """

        self._group_class_type_name = group_class_type_name

    @property
    def subject_assignment_id(self):
        """Gets the subject_assignment_id of this AcademicStudyGroupClassViewRpc.  # noqa: E501


        :return: The subject_assignment_id of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :rtype: int
        """
        return self._subject_assignment_id

    @subject_assignment_id.setter
    def subject_assignment_id(self, subject_assignment_id):
        """Sets the subject_assignment_id of this AcademicStudyGroupClassViewRpc.


        :param subject_assignment_id: The subject_assignment_id of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :type: int
        """

        self._subject_assignment_id = subject_assignment_id

    @property
    def subject_assignment_name(self):
        """Gets the subject_assignment_name of this AcademicStudyGroupClassViewRpc.  # noqa: E501


        :return: The subject_assignment_name of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :rtype: str
        """
        return self._subject_assignment_name

    @subject_assignment_name.setter
    def subject_assignment_name(self, subject_assignment_name):
        """Sets the subject_assignment_name of this AcademicStudyGroupClassViewRpc.


        :param subject_assignment_name: The subject_assignment_name of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :type: str
        """

        self._subject_assignment_name = subject_assignment_name

    @property
    def name(self):
        """Gets the name of this AcademicStudyGroupClassViewRpc.  # noqa: E501


        :return: The name of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AcademicStudyGroupClassViewRpc.


        :param name: The name of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def is_default(self):
        """Gets the is_default of this AcademicStudyGroupClassViewRpc.  # noqa: E501

        false  # noqa: E501

        :return: The is_default of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this AcademicStudyGroupClassViewRpc.

        false  # noqa: E501

        :param is_default: The is_default of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def disp_sequence(self):
        """Gets the disp_sequence of this AcademicStudyGroupClassViewRpc.  # noqa: E501


        :return: The disp_sequence of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :rtype: int
        """
        return self._disp_sequence

    @disp_sequence.setter
    def disp_sequence(self, disp_sequence):
        """Sets the disp_sequence of this AcademicStudyGroupClassViewRpc.


        :param disp_sequence: The disp_sequence of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :type: int
        """

        self._disp_sequence = disp_sequence

    @property
    def planned_size(self):
        """Gets the planned_size of this AcademicStudyGroupClassViewRpc.  # noqa: E501


        :return: The planned_size of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :rtype: int
        """
        return self._planned_size

    @planned_size.setter
    def planned_size(self, planned_size):
        """Sets the planned_size of this AcademicStudyGroupClassViewRpc.


        :param planned_size: The planned_size of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :type: int
        """

        self._planned_size = planned_size

    @property
    def enabled(self):
        """Gets the enabled of this AcademicStudyGroupClassViewRpc.  # noqa: E501

        true  # noqa: E501

        :return: The enabled of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this AcademicStudyGroupClassViewRpc.

        true  # noqa: E501

        :param enabled: The enabled of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def names(self):
        """Gets the names of this AcademicStudyGroupClassViewRpc.  # noqa: E501


        :return: The names of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :rtype: list[str]
        """
        return self._names

    @names.setter
    def names(self, names):
        """Sets the names of this AcademicStudyGroupClassViewRpc.


        :param names: The names of this AcademicStudyGroupClassViewRpc.  # noqa: E501
        :type: list[str]
        """

        self._names = names

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AcademicStudyGroupClassViewRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AcademicStudyGroupClassViewRpc):
            return True

        return self.to_dict() != other.to_dict()
