# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class SurveyScheduler(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'study_event_definition_oid': 'str',
        'active': 'int',
        'email_subject': 'str',
        'email_content': 'str',
        'email_sender': 'str',
        'condition_surveycomplete_survey_oid': 'str',
        'condition_surveycomplete_event_oid': 'str',
        'condition_andor_code': 'str',
        'condition_logic': 'str',
        'condition_send_time_option_code': 'str',
        'condition_send_time_lag_days': 'int',
        'condition_send_time_lag_hours': 'int',
        'condition_send_time_lag_minutes': 'int',
        'condition_send_next_day_type_code': 'str',
        'condition_send_next_time': 'datetime',
        'condition_send_next_time_exact': 'datetime',
        'delivery_type': 'str',
        'reminder_type': 'str',
        'reminder_time_lag_days': 'int',
        'reminder_time_lag_hours': 'int',
        'reminder_time_lag_minutes': 'int',
        'reminder_next_day_type': 'str',
        'reminder_next_time': 'datetime',
        'reminder_exact_time': 'datetime',
        'reminder_num': 'int',
        'survey_duration': 'int'
    }

    attribute_map = {
        'study_event_definition_oid': 'studyEventDefinitionOID',
        'active': 'active',
        'email_subject': 'emailSubject',
        'email_content': 'emailContent',
        'email_sender': 'emailSender',
        'condition_surveycomplete_survey_oid': 'conditionSurveycompleteSurveyOID',
        'condition_surveycomplete_event_oid': 'conditionSurveycompleteEventOID',
        'condition_andor_code': 'conditionAndorCode',
        'condition_logic': 'conditionLogic',
        'condition_send_time_option_code': 'conditionSendTimeOptionCode',
        'condition_send_time_lag_days': 'conditionSendTimeLagDays',
        'condition_send_time_lag_hours': 'conditionSendTimeLagHours',
        'condition_send_time_lag_minutes': 'conditionSendTimeLagMinutes',
        'condition_send_next_day_type_code': 'conditionSendNextDayTypeCode',
        'condition_send_next_time': 'conditionSendNextTime',
        'condition_send_next_time_exact': 'conditionSendNextTimeExact',
        'delivery_type': 'deliveryType',
        'reminder_type': 'reminderType',
        'reminder_time_lag_days': 'reminderTimeLagDays',
        'reminder_time_lag_hours': 'reminderTimeLagHours',
        'reminder_time_lag_minutes': 'reminderTimeLagMinutes',
        'reminder_next_day_type': 'reminderNextDayType',
        'reminder_next_time': 'reminderNextTime',
        'reminder_exact_time': 'reminderExactTime',
        'reminder_num': 'reminderNum',
        'survey_duration': 'surveyDuration'
    }

    def __init__(self, study_event_definition_oid=None, active=None, email_subject=None, email_content=None, email_sender=None, condition_surveycomplete_survey_oid=None, condition_surveycomplete_event_oid=None, condition_andor_code=None, condition_logic=None, condition_send_time_option_code=None, condition_send_time_lag_days=None, condition_send_time_lag_hours=None, condition_send_time_lag_minutes=None, condition_send_next_day_type_code=None, condition_send_next_time=None, condition_send_next_time_exact=None, delivery_type=None, reminder_type=None, reminder_time_lag_days=None, reminder_time_lag_hours=None, reminder_time_lag_minutes=None, reminder_next_day_type=None, reminder_next_time=None, reminder_exact_time=None, reminder_num=None, survey_duration=None, local_vars_configuration=None):  # noqa: E501
        """SurveyScheduler - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._study_event_definition_oid = None
        self._active = None
        self._email_subject = None
        self._email_content = None
        self._email_sender = None
        self._condition_surveycomplete_survey_oid = None
        self._condition_surveycomplete_event_oid = None
        self._condition_andor_code = None
        self._condition_logic = None
        self._condition_send_time_option_code = None
        self._condition_send_time_lag_days = None
        self._condition_send_time_lag_hours = None
        self._condition_send_time_lag_minutes = None
        self._condition_send_next_day_type_code = None
        self._condition_send_next_time = None
        self._condition_send_next_time_exact = None
        self._delivery_type = None
        self._reminder_type = None
        self._reminder_time_lag_days = None
        self._reminder_time_lag_hours = None
        self._reminder_time_lag_minutes = None
        self._reminder_next_day_type = None
        self._reminder_next_time = None
        self._reminder_exact_time = None
        self._reminder_num = None
        self._survey_duration = None
        self.discriminator = None

        if study_event_definition_oid is not None:
            self.study_event_definition_oid = study_event_definition_oid
        if active is not None:
            self.active = active
        if email_subject is not None:
            self.email_subject = email_subject
        if email_content is not None:
            self.email_content = email_content
        if email_sender is not None:
            self.email_sender = email_sender
        if condition_surveycomplete_survey_oid is not None:
            self.condition_surveycomplete_survey_oid = condition_surveycomplete_survey_oid
        if condition_surveycomplete_event_oid is not None:
            self.condition_surveycomplete_event_oid = condition_surveycomplete_event_oid
        if condition_andor_code is not None:
            self.condition_andor_code = condition_andor_code
        if condition_logic is not None:
            self.condition_logic = condition_logic
        if condition_send_time_option_code is not None:
            self.condition_send_time_option_code = condition_send_time_option_code
        if condition_send_time_lag_days is not None:
            self.condition_send_time_lag_days = condition_send_time_lag_days
        if condition_send_time_lag_hours is not None:
            self.condition_send_time_lag_hours = condition_send_time_lag_hours
        if condition_send_time_lag_minutes is not None:
            self.condition_send_time_lag_minutes = condition_send_time_lag_minutes
        if condition_send_next_day_type_code is not None:
            self.condition_send_next_day_type_code = condition_send_next_day_type_code
        if condition_send_next_time is not None:
            self.condition_send_next_time = condition_send_next_time
        if condition_send_next_time_exact is not None:
            self.condition_send_next_time_exact = condition_send_next_time_exact
        if delivery_type is not None:
            self.delivery_type = delivery_type
        if reminder_type is not None:
            self.reminder_type = reminder_type
        if reminder_time_lag_days is not None:
            self.reminder_time_lag_days = reminder_time_lag_days
        if reminder_time_lag_hours is not None:
            self.reminder_time_lag_hours = reminder_time_lag_hours
        if reminder_time_lag_minutes is not None:
            self.reminder_time_lag_minutes = reminder_time_lag_minutes
        if reminder_next_day_type is not None:
            self.reminder_next_day_type = reminder_next_day_type
        if reminder_next_time is not None:
            self.reminder_next_time = reminder_next_time
        if reminder_exact_time is not None:
            self.reminder_exact_time = reminder_exact_time
        if reminder_num is not None:
            self.reminder_num = reminder_num
        if survey_duration is not None:
            self.survey_duration = survey_duration

    @property
    def study_event_definition_oid(self):
        """Gets the study_event_definition_oid of this SurveyScheduler.  # noqa: E501


        :return: The study_event_definition_oid of this SurveyScheduler.  # noqa: E501
        :rtype: str
        """
        return self._study_event_definition_oid

    @study_event_definition_oid.setter
    def study_event_definition_oid(self, study_event_definition_oid):
        """Sets the study_event_definition_oid of this SurveyScheduler.


        :param study_event_definition_oid: The study_event_definition_oid of this SurveyScheduler.  # noqa: E501
        :type: str
        """

        self._study_event_definition_oid = study_event_definition_oid

    @property
    def active(self):
        """Gets the active of this SurveyScheduler.  # noqa: E501


        :return: The active of this SurveyScheduler.  # noqa: E501
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SurveyScheduler.


        :param active: The active of this SurveyScheduler.  # noqa: E501
        :type: int
        """

        self._active = active

    @property
    def email_subject(self):
        """Gets the email_subject of this SurveyScheduler.  # noqa: E501


        :return: The email_subject of this SurveyScheduler.  # noqa: E501
        :rtype: str
        """
        return self._email_subject

    @email_subject.setter
    def email_subject(self, email_subject):
        """Sets the email_subject of this SurveyScheduler.


        :param email_subject: The email_subject of this SurveyScheduler.  # noqa: E501
        :type: str
        """

        self._email_subject = email_subject

    @property
    def email_content(self):
        """Gets the email_content of this SurveyScheduler.  # noqa: E501


        :return: The email_content of this SurveyScheduler.  # noqa: E501
        :rtype: str
        """
        return self._email_content

    @email_content.setter
    def email_content(self, email_content):
        """Sets the email_content of this SurveyScheduler.


        :param email_content: The email_content of this SurveyScheduler.  # noqa: E501
        :type: str
        """

        self._email_content = email_content

    @property
    def email_sender(self):
        """Gets the email_sender of this SurveyScheduler.  # noqa: E501


        :return: The email_sender of this SurveyScheduler.  # noqa: E501
        :rtype: str
        """
        return self._email_sender

    @email_sender.setter
    def email_sender(self, email_sender):
        """Sets the email_sender of this SurveyScheduler.


        :param email_sender: The email_sender of this SurveyScheduler.  # noqa: E501
        :type: str
        """

        self._email_sender = email_sender

    @property
    def condition_surveycomplete_survey_oid(self):
        """Gets the condition_surveycomplete_survey_oid of this SurveyScheduler.  # noqa: E501


        :return: The condition_surveycomplete_survey_oid of this SurveyScheduler.  # noqa: E501
        :rtype: str
        """
        return self._condition_surveycomplete_survey_oid

    @condition_surveycomplete_survey_oid.setter
    def condition_surveycomplete_survey_oid(self, condition_surveycomplete_survey_oid):
        """Sets the condition_surveycomplete_survey_oid of this SurveyScheduler.


        :param condition_surveycomplete_survey_oid: The condition_surveycomplete_survey_oid of this SurveyScheduler.  # noqa: E501
        :type: str
        """

        self._condition_surveycomplete_survey_oid = condition_surveycomplete_survey_oid

    @property
    def condition_surveycomplete_event_oid(self):
        """Gets the condition_surveycomplete_event_oid of this SurveyScheduler.  # noqa: E501


        :return: The condition_surveycomplete_event_oid of this SurveyScheduler.  # noqa: E501
        :rtype: str
        """
        return self._condition_surveycomplete_event_oid

    @condition_surveycomplete_event_oid.setter
    def condition_surveycomplete_event_oid(self, condition_surveycomplete_event_oid):
        """Sets the condition_surveycomplete_event_oid of this SurveyScheduler.


        :param condition_surveycomplete_event_oid: The condition_surveycomplete_event_oid of this SurveyScheduler.  # noqa: E501
        :type: str
        """

        self._condition_surveycomplete_event_oid = condition_surveycomplete_event_oid

    @property
    def condition_andor_code(self):
        """Gets the condition_andor_code of this SurveyScheduler.  # noqa: E501


        :return: The condition_andor_code of this SurveyScheduler.  # noqa: E501
        :rtype: str
        """
        return self._condition_andor_code

    @condition_andor_code.setter
    def condition_andor_code(self, condition_andor_code):
        """Sets the condition_andor_code of this SurveyScheduler.


        :param condition_andor_code: The condition_andor_code of this SurveyScheduler.  # noqa: E501
        :type: str
        """

        self._condition_andor_code = condition_andor_code

    @property
    def condition_logic(self):
        """Gets the condition_logic of this SurveyScheduler.  # noqa: E501


        :return: The condition_logic of this SurveyScheduler.  # noqa: E501
        :rtype: str
        """
        return self._condition_logic

    @condition_logic.setter
    def condition_logic(self, condition_logic):
        """Sets the condition_logic of this SurveyScheduler.


        :param condition_logic: The condition_logic of this SurveyScheduler.  # noqa: E501
        :type: str
        """

        self._condition_logic = condition_logic

    @property
    def condition_send_time_option_code(self):
        """Gets the condition_send_time_option_code of this SurveyScheduler.  # noqa: E501


        :return: The condition_send_time_option_code of this SurveyScheduler.  # noqa: E501
        :rtype: str
        """
        return self._condition_send_time_option_code

    @condition_send_time_option_code.setter
    def condition_send_time_option_code(self, condition_send_time_option_code):
        """Sets the condition_send_time_option_code of this SurveyScheduler.


        :param condition_send_time_option_code: The condition_send_time_option_code of this SurveyScheduler.  # noqa: E501
        :type: str
        """

        self._condition_send_time_option_code = condition_send_time_option_code

    @property
    def condition_send_time_lag_days(self):
        """Gets the condition_send_time_lag_days of this SurveyScheduler.  # noqa: E501


        :return: The condition_send_time_lag_days of this SurveyScheduler.  # noqa: E501
        :rtype: int
        """
        return self._condition_send_time_lag_days

    @condition_send_time_lag_days.setter
    def condition_send_time_lag_days(self, condition_send_time_lag_days):
        """Sets the condition_send_time_lag_days of this SurveyScheduler.


        :param condition_send_time_lag_days: The condition_send_time_lag_days of this SurveyScheduler.  # noqa: E501
        :type: int
        """

        self._condition_send_time_lag_days = condition_send_time_lag_days

    @property
    def condition_send_time_lag_hours(self):
        """Gets the condition_send_time_lag_hours of this SurveyScheduler.  # noqa: E501


        :return: The condition_send_time_lag_hours of this SurveyScheduler.  # noqa: E501
        :rtype: int
        """
        return self._condition_send_time_lag_hours

    @condition_send_time_lag_hours.setter
    def condition_send_time_lag_hours(self, condition_send_time_lag_hours):
        """Sets the condition_send_time_lag_hours of this SurveyScheduler.


        :param condition_send_time_lag_hours: The condition_send_time_lag_hours of this SurveyScheduler.  # noqa: E501
        :type: int
        """

        self._condition_send_time_lag_hours = condition_send_time_lag_hours

    @property
    def condition_send_time_lag_minutes(self):
        """Gets the condition_send_time_lag_minutes of this SurveyScheduler.  # noqa: E501


        :return: The condition_send_time_lag_minutes of this SurveyScheduler.  # noqa: E501
        :rtype: int
        """
        return self._condition_send_time_lag_minutes

    @condition_send_time_lag_minutes.setter
    def condition_send_time_lag_minutes(self, condition_send_time_lag_minutes):
        """Sets the condition_send_time_lag_minutes of this SurveyScheduler.


        :param condition_send_time_lag_minutes: The condition_send_time_lag_minutes of this SurveyScheduler.  # noqa: E501
        :type: int
        """

        self._condition_send_time_lag_minutes = condition_send_time_lag_minutes

    @property
    def condition_send_next_day_type_code(self):
        """Gets the condition_send_next_day_type_code of this SurveyScheduler.  # noqa: E501


        :return: The condition_send_next_day_type_code of this SurveyScheduler.  # noqa: E501
        :rtype: str
        """
        return self._condition_send_next_day_type_code

    @condition_send_next_day_type_code.setter
    def condition_send_next_day_type_code(self, condition_send_next_day_type_code):
        """Sets the condition_send_next_day_type_code of this SurveyScheduler.


        :param condition_send_next_day_type_code: The condition_send_next_day_type_code of this SurveyScheduler.  # noqa: E501
        :type: str
        """

        self._condition_send_next_day_type_code = condition_send_next_day_type_code

    @property
    def condition_send_next_time(self):
        """Gets the condition_send_next_time of this SurveyScheduler.  # noqa: E501


        :return: The condition_send_next_time of this SurveyScheduler.  # noqa: E501
        :rtype: datetime
        """
        return self._condition_send_next_time

    @condition_send_next_time.setter
    def condition_send_next_time(self, condition_send_next_time):
        """Sets the condition_send_next_time of this SurveyScheduler.


        :param condition_send_next_time: The condition_send_next_time of this SurveyScheduler.  # noqa: E501
        :type: datetime
        """

        self._condition_send_next_time = condition_send_next_time

    @property
    def condition_send_next_time_exact(self):
        """Gets the condition_send_next_time_exact of this SurveyScheduler.  # noqa: E501


        :return: The condition_send_next_time_exact of this SurveyScheduler.  # noqa: E501
        :rtype: datetime
        """
        return self._condition_send_next_time_exact

    @condition_send_next_time_exact.setter
    def condition_send_next_time_exact(self, condition_send_next_time_exact):
        """Sets the condition_send_next_time_exact of this SurveyScheduler.


        :param condition_send_next_time_exact: The condition_send_next_time_exact of this SurveyScheduler.  # noqa: E501
        :type: datetime
        """

        self._condition_send_next_time_exact = condition_send_next_time_exact

    @property
    def delivery_type(self):
        """Gets the delivery_type of this SurveyScheduler.  # noqa: E501


        :return: The delivery_type of this SurveyScheduler.  # noqa: E501
        :rtype: str
        """
        return self._delivery_type

    @delivery_type.setter
    def delivery_type(self, delivery_type):
        """Sets the delivery_type of this SurveyScheduler.


        :param delivery_type: The delivery_type of this SurveyScheduler.  # noqa: E501
        :type: str
        """

        self._delivery_type = delivery_type

    @property
    def reminder_type(self):
        """Gets the reminder_type of this SurveyScheduler.  # noqa: E501


        :return: The reminder_type of this SurveyScheduler.  # noqa: E501
        :rtype: str
        """
        return self._reminder_type

    @reminder_type.setter
    def reminder_type(self, reminder_type):
        """Sets the reminder_type of this SurveyScheduler.


        :param reminder_type: The reminder_type of this SurveyScheduler.  # noqa: E501
        :type: str
        """

        self._reminder_type = reminder_type

    @property
    def reminder_time_lag_days(self):
        """Gets the reminder_time_lag_days of this SurveyScheduler.  # noqa: E501


        :return: The reminder_time_lag_days of this SurveyScheduler.  # noqa: E501
        :rtype: int
        """
        return self._reminder_time_lag_days

    @reminder_time_lag_days.setter
    def reminder_time_lag_days(self, reminder_time_lag_days):
        """Sets the reminder_time_lag_days of this SurveyScheduler.


        :param reminder_time_lag_days: The reminder_time_lag_days of this SurveyScheduler.  # noqa: E501
        :type: int
        """

        self._reminder_time_lag_days = reminder_time_lag_days

    @property
    def reminder_time_lag_hours(self):
        """Gets the reminder_time_lag_hours of this SurveyScheduler.  # noqa: E501


        :return: The reminder_time_lag_hours of this SurveyScheduler.  # noqa: E501
        :rtype: int
        """
        return self._reminder_time_lag_hours

    @reminder_time_lag_hours.setter
    def reminder_time_lag_hours(self, reminder_time_lag_hours):
        """Sets the reminder_time_lag_hours of this SurveyScheduler.


        :param reminder_time_lag_hours: The reminder_time_lag_hours of this SurveyScheduler.  # noqa: E501
        :type: int
        """

        self._reminder_time_lag_hours = reminder_time_lag_hours

    @property
    def reminder_time_lag_minutes(self):
        """Gets the reminder_time_lag_minutes of this SurveyScheduler.  # noqa: E501


        :return: The reminder_time_lag_minutes of this SurveyScheduler.  # noqa: E501
        :rtype: int
        """
        return self._reminder_time_lag_minutes

    @reminder_time_lag_minutes.setter
    def reminder_time_lag_minutes(self, reminder_time_lag_minutes):
        """Sets the reminder_time_lag_minutes of this SurveyScheduler.


        :param reminder_time_lag_minutes: The reminder_time_lag_minutes of this SurveyScheduler.  # noqa: E501
        :type: int
        """

        self._reminder_time_lag_minutes = reminder_time_lag_minutes

    @property
    def reminder_next_day_type(self):
        """Gets the reminder_next_day_type of this SurveyScheduler.  # noqa: E501


        :return: The reminder_next_day_type of this SurveyScheduler.  # noqa: E501
        :rtype: str
        """
        return self._reminder_next_day_type

    @reminder_next_day_type.setter
    def reminder_next_day_type(self, reminder_next_day_type):
        """Sets the reminder_next_day_type of this SurveyScheduler.


        :param reminder_next_day_type: The reminder_next_day_type of this SurveyScheduler.  # noqa: E501
        :type: str
        """

        self._reminder_next_day_type = reminder_next_day_type

    @property
    def reminder_next_time(self):
        """Gets the reminder_next_time of this SurveyScheduler.  # noqa: E501


        :return: The reminder_next_time of this SurveyScheduler.  # noqa: E501
        :rtype: datetime
        """
        return self._reminder_next_time

    @reminder_next_time.setter
    def reminder_next_time(self, reminder_next_time):
        """Sets the reminder_next_time of this SurveyScheduler.


        :param reminder_next_time: The reminder_next_time of this SurveyScheduler.  # noqa: E501
        :type: datetime
        """

        self._reminder_next_time = reminder_next_time

    @property
    def reminder_exact_time(self):
        """Gets the reminder_exact_time of this SurveyScheduler.  # noqa: E501


        :return: The reminder_exact_time of this SurveyScheduler.  # noqa: E501
        :rtype: datetime
        """
        return self._reminder_exact_time

    @reminder_exact_time.setter
    def reminder_exact_time(self, reminder_exact_time):
        """Sets the reminder_exact_time of this SurveyScheduler.


        :param reminder_exact_time: The reminder_exact_time of this SurveyScheduler.  # noqa: E501
        :type: datetime
        """

        self._reminder_exact_time = reminder_exact_time

    @property
    def reminder_num(self):
        """Gets the reminder_num of this SurveyScheduler.  # noqa: E501


        :return: The reminder_num of this SurveyScheduler.  # noqa: E501
        :rtype: int
        """
        return self._reminder_num

    @reminder_num.setter
    def reminder_num(self, reminder_num):
        """Sets the reminder_num of this SurveyScheduler.


        :param reminder_num: The reminder_num of this SurveyScheduler.  # noqa: E501
        :type: int
        """

        self._reminder_num = reminder_num

    @property
    def survey_duration(self):
        """Gets the survey_duration of this SurveyScheduler.  # noqa: E501


        :return: The survey_duration of this SurveyScheduler.  # noqa: E501
        :rtype: int
        """
        return self._survey_duration

    @survey_duration.setter
    def survey_duration(self, survey_duration):
        """Sets the survey_duration of this SurveyScheduler.


        :param survey_duration: The survey_duration of this SurveyScheduler.  # noqa: E501
        :type: int
        """

        self._survey_duration = survey_duration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SurveyScheduler):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SurveyScheduler):
            return True

        return self.to_dict() != other.to_dict()
