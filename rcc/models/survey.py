# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class Survey(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'survey_link': 'list[SurveyLink]',
        'survey_queue': 'list[SurveyQueue]',
        'survey_scheduler': 'list[SurveyScheduler]',
        'survey_logo': 'FileBase64',
        'survey_confirmation_email_attachment': 'FileBase64',
        'survey_oid': 'str',
        'crf_oid': 'str',
        'crf_name': 'str',
        'crf_version_oid': 'str',
        'title': 'str',
        'instructions': 'str',
        'acknowledgement': 'str',
        'question_by_section': 'int',
        'display_page_number': 'int',
        'question_auto_numbering': 'int',
        'survey_enabled': 'int',
        'save_and_return': 'int',
        'logo': 'int',
        'hide_title': 'int',
        'view_results': 'int',
        'min_responses_view_results': 'int',
        'check_diversity_view_results': 'int',
        'end_survey_redirect_url': 'str',
        'promis_skip_question': 'int',
        'survey_auth_enabled_single': 'int',
        'edit_completed_response': 'int',
        'hide_back_button': 'int',
        'show_required_field_text': 'int',
        'confirmation_email_subject': 'str',
        'confirmation_email_content': 'str',
        'confirmation_email_from': 'str',
        'confirmation_email_attachment': 'int',
        'identifier': 'str',
        'send_confirmation_email': 'int',
        'survey_redirect_message': 'str',
        'survey_thankyou_message': 'str',
        'survey_expiration': 'datetime',
        'close_survey_after_completion': 'int',
        'customize_time_availability': 'int',
        'availability_from_time': 'str',
        'availability_to_time': 'str',
        'calendared_invitation_enabled': 'int',
        'hide_submit': 'int'
    }

    attribute_map = {
        'survey_link': 'surveyLink',
        'survey_queue': 'surveyQueue',
        'survey_scheduler': 'surveyScheduler',
        'survey_logo': 'surveyLogo',
        'survey_confirmation_email_attachment': 'surveyConfirmationEmailAttachment',
        'survey_oid': 'surveyOID',
        'crf_oid': 'crfOID',
        'crf_name': 'crfName',
        'crf_version_oid': 'crfVersionOID',
        'title': 'title',
        'instructions': 'instructions',
        'acknowledgement': 'acknowledgement',
        'question_by_section': 'questionBySection',
        'display_page_number': 'displayPageNumber',
        'question_auto_numbering': 'questionAutoNumbering',
        'survey_enabled': 'surveyEnabled',
        'save_and_return': 'saveAndReturn',
        'logo': 'logo',
        'hide_title': 'hideTitle',
        'view_results': 'viewResults',
        'min_responses_view_results': 'minResponsesViewResults',
        'check_diversity_view_results': 'checkDiversityViewResults',
        'end_survey_redirect_url': 'endSurveyRedirectUrl',
        'promis_skip_question': 'promisSkipQuestion',
        'survey_auth_enabled_single': 'surveyAuthEnabledSingle',
        'edit_completed_response': 'editCompletedResponse',
        'hide_back_button': 'hideBackButton',
        'show_required_field_text': 'showRequiredFieldText',
        'confirmation_email_subject': 'confirmationEmailSubject',
        'confirmation_email_content': 'confirmationEmailContent',
        'confirmation_email_from': 'confirmationEmailFrom',
        'confirmation_email_attachment': 'confirmationEmailAttachment',
        'identifier': 'identifier',
        'send_confirmation_email': 'sendConfirmationEmail',
        'survey_redirect_message': 'surveyRedirectMessage',
        'survey_thankyou_message': 'surveyThankyouMessage',
        'survey_expiration': 'surveyExpiration',
        'close_survey_after_completion': 'closeSurveyAfterCompletion',
        'customize_time_availability': 'customizeTimeAvailability',
        'availability_from_time': 'availabilityFromTime',
        'availability_to_time': 'availabilityToTime',
        'calendared_invitation_enabled': 'calendaredInvitationEnabled',
        'hide_submit': 'hideSubmit'
    }

    def __init__(self, survey_link=None, survey_queue=None, survey_scheduler=None, survey_logo=None, survey_confirmation_email_attachment=None, survey_oid=None, crf_oid=None, crf_name=None, crf_version_oid=None, title=None, instructions=None, acknowledgement=None, question_by_section=None, display_page_number=None, question_auto_numbering=None, survey_enabled=None, save_and_return=None, logo=None, hide_title=None, view_results=None, min_responses_view_results=None, check_diversity_view_results=None, end_survey_redirect_url=None, promis_skip_question=None, survey_auth_enabled_single=None, edit_completed_response=None, hide_back_button=None, show_required_field_text=None, confirmation_email_subject=None, confirmation_email_content=None, confirmation_email_from=None, confirmation_email_attachment=None, identifier=None, send_confirmation_email=None, survey_redirect_message=None, survey_thankyou_message=None, survey_expiration=None, close_survey_after_completion=None, customize_time_availability=None, availability_from_time=None, availability_to_time=None, calendared_invitation_enabled=None, hide_submit=None, local_vars_configuration=None):  # noqa: E501
        """Survey - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._survey_link = None
        self._survey_queue = None
        self._survey_scheduler = None
        self._survey_logo = None
        self._survey_confirmation_email_attachment = None
        self._survey_oid = None
        self._crf_oid = None
        self._crf_name = None
        self._crf_version_oid = None
        self._title = None
        self._instructions = None
        self._acknowledgement = None
        self._question_by_section = None
        self._display_page_number = None
        self._question_auto_numbering = None
        self._survey_enabled = None
        self._save_and_return = None
        self._logo = None
        self._hide_title = None
        self._view_results = None
        self._min_responses_view_results = None
        self._check_diversity_view_results = None
        self._end_survey_redirect_url = None
        self._promis_skip_question = None
        self._survey_auth_enabled_single = None
        self._edit_completed_response = None
        self._hide_back_button = None
        self._show_required_field_text = None
        self._confirmation_email_subject = None
        self._confirmation_email_content = None
        self._confirmation_email_from = None
        self._confirmation_email_attachment = None
        self._identifier = None
        self._send_confirmation_email = None
        self._survey_redirect_message = None
        self._survey_thankyou_message = None
        self._survey_expiration = None
        self._close_survey_after_completion = None
        self._customize_time_availability = None
        self._availability_from_time = None
        self._availability_to_time = None
        self._calendared_invitation_enabled = None
        self._hide_submit = None
        self.discriminator = None

        if survey_link is not None:
            self.survey_link = survey_link
        if survey_queue is not None:
            self.survey_queue = survey_queue
        if survey_scheduler is not None:
            self.survey_scheduler = survey_scheduler
        self.survey_logo = survey_logo
        self.survey_confirmation_email_attachment = survey_confirmation_email_attachment
        if survey_oid is not None:
            self.survey_oid = survey_oid
        if crf_oid is not None:
            self.crf_oid = crf_oid
        if crf_name is not None:
            self.crf_name = crf_name
        if crf_version_oid is not None:
            self.crf_version_oid = crf_version_oid
        if title is not None:
            self.title = title
        if instructions is not None:
            self.instructions = instructions
        if acknowledgement is not None:
            self.acknowledgement = acknowledgement
        if question_by_section is not None:
            self.question_by_section = question_by_section
        if display_page_number is not None:
            self.display_page_number = display_page_number
        if question_auto_numbering is not None:
            self.question_auto_numbering = question_auto_numbering
        if survey_enabled is not None:
            self.survey_enabled = survey_enabled
        if save_and_return is not None:
            self.save_and_return = save_and_return
        if logo is not None:
            self.logo = logo
        if hide_title is not None:
            self.hide_title = hide_title
        if view_results is not None:
            self.view_results = view_results
        if min_responses_view_results is not None:
            self.min_responses_view_results = min_responses_view_results
        if check_diversity_view_results is not None:
            self.check_diversity_view_results = check_diversity_view_results
        if end_survey_redirect_url is not None:
            self.end_survey_redirect_url = end_survey_redirect_url
        if promis_skip_question is not None:
            self.promis_skip_question = promis_skip_question
        if survey_auth_enabled_single is not None:
            self.survey_auth_enabled_single = survey_auth_enabled_single
        if edit_completed_response is not None:
            self.edit_completed_response = edit_completed_response
        if hide_back_button is not None:
            self.hide_back_button = hide_back_button
        if show_required_field_text is not None:
            self.show_required_field_text = show_required_field_text
        if confirmation_email_subject is not None:
            self.confirmation_email_subject = confirmation_email_subject
        if confirmation_email_content is not None:
            self.confirmation_email_content = confirmation_email_content
        if confirmation_email_from is not None:
            self.confirmation_email_from = confirmation_email_from
        if confirmation_email_attachment is not None:
            self.confirmation_email_attachment = confirmation_email_attachment
        if identifier is not None:
            self.identifier = identifier
        if send_confirmation_email is not None:
            self.send_confirmation_email = send_confirmation_email
        if survey_redirect_message is not None:
            self.survey_redirect_message = survey_redirect_message
        if survey_thankyou_message is not None:
            self.survey_thankyou_message = survey_thankyou_message
        if survey_expiration is not None:
            self.survey_expiration = survey_expiration
        if close_survey_after_completion is not None:
            self.close_survey_after_completion = close_survey_after_completion
        if customize_time_availability is not None:
            self.customize_time_availability = customize_time_availability
        if availability_from_time is not None:
            self.availability_from_time = availability_from_time
        if availability_to_time is not None:
            self.availability_to_time = availability_to_time
        if calendared_invitation_enabled is not None:
            self.calendared_invitation_enabled = calendared_invitation_enabled
        if hide_submit is not None:
            self.hide_submit = hide_submit

    @property
    def survey_link(self):
        """Gets the survey_link of this Survey.  # noqa: E501


        :return: The survey_link of this Survey.  # noqa: E501
        :rtype: list[SurveyLink]
        """
        return self._survey_link

    @survey_link.setter
    def survey_link(self, survey_link):
        """Sets the survey_link of this Survey.


        :param survey_link: The survey_link of this Survey.  # noqa: E501
        :type: list[SurveyLink]
        """

        self._survey_link = survey_link

    @property
    def survey_queue(self):
        """Gets the survey_queue of this Survey.  # noqa: E501


        :return: The survey_queue of this Survey.  # noqa: E501
        :rtype: list[SurveyQueue]
        """
        return self._survey_queue

    @survey_queue.setter
    def survey_queue(self, survey_queue):
        """Sets the survey_queue of this Survey.


        :param survey_queue: The survey_queue of this Survey.  # noqa: E501
        :type: list[SurveyQueue]
        """

        self._survey_queue = survey_queue

    @property
    def survey_scheduler(self):
        """Gets the survey_scheduler of this Survey.  # noqa: E501


        :return: The survey_scheduler of this Survey.  # noqa: E501
        :rtype: list[SurveyScheduler]
        """
        return self._survey_scheduler

    @survey_scheduler.setter
    def survey_scheduler(self, survey_scheduler):
        """Sets the survey_scheduler of this Survey.


        :param survey_scheduler: The survey_scheduler of this Survey.  # noqa: E501
        :type: list[SurveyScheduler]
        """

        self._survey_scheduler = survey_scheduler

    @property
    def survey_logo(self):
        """Gets the survey_logo of this Survey.  # noqa: E501


        :return: The survey_logo of this Survey.  # noqa: E501
        :rtype: FileBase64
        """
        return self._survey_logo

    @survey_logo.setter
    def survey_logo(self, survey_logo):
        """Sets the survey_logo of this Survey.


        :param survey_logo: The survey_logo of this Survey.  # noqa: E501
        :type: FileBase64
        """
        if self.local_vars_configuration.client_side_validation and survey_logo is None:  # noqa: E501
            raise ValueError("Invalid value for `survey_logo`, must not be `None`")  # noqa: E501

        self._survey_logo = survey_logo

    @property
    def survey_confirmation_email_attachment(self):
        """Gets the survey_confirmation_email_attachment of this Survey.  # noqa: E501


        :return: The survey_confirmation_email_attachment of this Survey.  # noqa: E501
        :rtype: FileBase64
        """
        return self._survey_confirmation_email_attachment

    @survey_confirmation_email_attachment.setter
    def survey_confirmation_email_attachment(self, survey_confirmation_email_attachment):
        """Sets the survey_confirmation_email_attachment of this Survey.


        :param survey_confirmation_email_attachment: The survey_confirmation_email_attachment of this Survey.  # noqa: E501
        :type: FileBase64
        """
        if self.local_vars_configuration.client_side_validation and survey_confirmation_email_attachment is None:  # noqa: E501
            raise ValueError("Invalid value for `survey_confirmation_email_attachment`, must not be `None`")  # noqa: E501

        self._survey_confirmation_email_attachment = survey_confirmation_email_attachment

    @property
    def survey_oid(self):
        """Gets the survey_oid of this Survey.  # noqa: E501


        :return: The survey_oid of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._survey_oid

    @survey_oid.setter
    def survey_oid(self, survey_oid):
        """Sets the survey_oid of this Survey.


        :param survey_oid: The survey_oid of this Survey.  # noqa: E501
        :type: str
        """

        self._survey_oid = survey_oid

    @property
    def crf_oid(self):
        """Gets the crf_oid of this Survey.  # noqa: E501


        :return: The crf_oid of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._crf_oid

    @crf_oid.setter
    def crf_oid(self, crf_oid):
        """Sets the crf_oid of this Survey.


        :param crf_oid: The crf_oid of this Survey.  # noqa: E501
        :type: str
        """

        self._crf_oid = crf_oid

    @property
    def crf_name(self):
        """Gets the crf_name of this Survey.  # noqa: E501


        :return: The crf_name of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._crf_name

    @crf_name.setter
    def crf_name(self, crf_name):
        """Sets the crf_name of this Survey.


        :param crf_name: The crf_name of this Survey.  # noqa: E501
        :type: str
        """

        self._crf_name = crf_name

    @property
    def crf_version_oid(self):
        """Gets the crf_version_oid of this Survey.  # noqa: E501


        :return: The crf_version_oid of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._crf_version_oid

    @crf_version_oid.setter
    def crf_version_oid(self, crf_version_oid):
        """Sets the crf_version_oid of this Survey.


        :param crf_version_oid: The crf_version_oid of this Survey.  # noqa: E501
        :type: str
        """

        self._crf_version_oid = crf_version_oid

    @property
    def title(self):
        """Gets the title of this Survey.  # noqa: E501


        :return: The title of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Survey.


        :param title: The title of this Survey.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def instructions(self):
        """Gets the instructions of this Survey.  # noqa: E501


        :return: The instructions of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this Survey.


        :param instructions: The instructions of this Survey.  # noqa: E501
        :type: str
        """

        self._instructions = instructions

    @property
    def acknowledgement(self):
        """Gets the acknowledgement of this Survey.  # noqa: E501


        :return: The acknowledgement of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._acknowledgement

    @acknowledgement.setter
    def acknowledgement(self, acknowledgement):
        """Sets the acknowledgement of this Survey.


        :param acknowledgement: The acknowledgement of this Survey.  # noqa: E501
        :type: str
        """

        self._acknowledgement = acknowledgement

    @property
    def question_by_section(self):
        """Gets the question_by_section of this Survey.  # noqa: E501


        :return: The question_by_section of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._question_by_section

    @question_by_section.setter
    def question_by_section(self, question_by_section):
        """Sets the question_by_section of this Survey.


        :param question_by_section: The question_by_section of this Survey.  # noqa: E501
        :type: int
        """

        self._question_by_section = question_by_section

    @property
    def display_page_number(self):
        """Gets the display_page_number of this Survey.  # noqa: E501


        :return: The display_page_number of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._display_page_number

    @display_page_number.setter
    def display_page_number(self, display_page_number):
        """Sets the display_page_number of this Survey.


        :param display_page_number: The display_page_number of this Survey.  # noqa: E501
        :type: int
        """

        self._display_page_number = display_page_number

    @property
    def question_auto_numbering(self):
        """Gets the question_auto_numbering of this Survey.  # noqa: E501


        :return: The question_auto_numbering of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._question_auto_numbering

    @question_auto_numbering.setter
    def question_auto_numbering(self, question_auto_numbering):
        """Sets the question_auto_numbering of this Survey.


        :param question_auto_numbering: The question_auto_numbering of this Survey.  # noqa: E501
        :type: int
        """

        self._question_auto_numbering = question_auto_numbering

    @property
    def survey_enabled(self):
        """Gets the survey_enabled of this Survey.  # noqa: E501


        :return: The survey_enabled of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._survey_enabled

    @survey_enabled.setter
    def survey_enabled(self, survey_enabled):
        """Sets the survey_enabled of this Survey.


        :param survey_enabled: The survey_enabled of this Survey.  # noqa: E501
        :type: int
        """

        self._survey_enabled = survey_enabled

    @property
    def save_and_return(self):
        """Gets the save_and_return of this Survey.  # noqa: E501


        :return: The save_and_return of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._save_and_return

    @save_and_return.setter
    def save_and_return(self, save_and_return):
        """Sets the save_and_return of this Survey.


        :param save_and_return: The save_and_return of this Survey.  # noqa: E501
        :type: int
        """

        self._save_and_return = save_and_return

    @property
    def logo(self):
        """Gets the logo of this Survey.  # noqa: E501


        :return: The logo of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Survey.


        :param logo: The logo of this Survey.  # noqa: E501
        :type: int
        """

        self._logo = logo

    @property
    def hide_title(self):
        """Gets the hide_title of this Survey.  # noqa: E501


        :return: The hide_title of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._hide_title

    @hide_title.setter
    def hide_title(self, hide_title):
        """Sets the hide_title of this Survey.


        :param hide_title: The hide_title of this Survey.  # noqa: E501
        :type: int
        """

        self._hide_title = hide_title

    @property
    def view_results(self):
        """Gets the view_results of this Survey.  # noqa: E501


        :return: The view_results of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._view_results

    @view_results.setter
    def view_results(self, view_results):
        """Sets the view_results of this Survey.


        :param view_results: The view_results of this Survey.  # noqa: E501
        :type: int
        """

        self._view_results = view_results

    @property
    def min_responses_view_results(self):
        """Gets the min_responses_view_results of this Survey.  # noqa: E501


        :return: The min_responses_view_results of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._min_responses_view_results

    @min_responses_view_results.setter
    def min_responses_view_results(self, min_responses_view_results):
        """Sets the min_responses_view_results of this Survey.


        :param min_responses_view_results: The min_responses_view_results of this Survey.  # noqa: E501
        :type: int
        """

        self._min_responses_view_results = min_responses_view_results

    @property
    def check_diversity_view_results(self):
        """Gets the check_diversity_view_results of this Survey.  # noqa: E501


        :return: The check_diversity_view_results of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._check_diversity_view_results

    @check_diversity_view_results.setter
    def check_diversity_view_results(self, check_diversity_view_results):
        """Sets the check_diversity_view_results of this Survey.


        :param check_diversity_view_results: The check_diversity_view_results of this Survey.  # noqa: E501
        :type: int
        """

        self._check_diversity_view_results = check_diversity_view_results

    @property
    def end_survey_redirect_url(self):
        """Gets the end_survey_redirect_url of this Survey.  # noqa: E501


        :return: The end_survey_redirect_url of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._end_survey_redirect_url

    @end_survey_redirect_url.setter
    def end_survey_redirect_url(self, end_survey_redirect_url):
        """Sets the end_survey_redirect_url of this Survey.


        :param end_survey_redirect_url: The end_survey_redirect_url of this Survey.  # noqa: E501
        :type: str
        """

        self._end_survey_redirect_url = end_survey_redirect_url

    @property
    def promis_skip_question(self):
        """Gets the promis_skip_question of this Survey.  # noqa: E501


        :return: The promis_skip_question of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._promis_skip_question

    @promis_skip_question.setter
    def promis_skip_question(self, promis_skip_question):
        """Sets the promis_skip_question of this Survey.


        :param promis_skip_question: The promis_skip_question of this Survey.  # noqa: E501
        :type: int
        """

        self._promis_skip_question = promis_skip_question

    @property
    def survey_auth_enabled_single(self):
        """Gets the survey_auth_enabled_single of this Survey.  # noqa: E501


        :return: The survey_auth_enabled_single of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._survey_auth_enabled_single

    @survey_auth_enabled_single.setter
    def survey_auth_enabled_single(self, survey_auth_enabled_single):
        """Sets the survey_auth_enabled_single of this Survey.


        :param survey_auth_enabled_single: The survey_auth_enabled_single of this Survey.  # noqa: E501
        :type: int
        """

        self._survey_auth_enabled_single = survey_auth_enabled_single

    @property
    def edit_completed_response(self):
        """Gets the edit_completed_response of this Survey.  # noqa: E501


        :return: The edit_completed_response of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._edit_completed_response

    @edit_completed_response.setter
    def edit_completed_response(self, edit_completed_response):
        """Sets the edit_completed_response of this Survey.


        :param edit_completed_response: The edit_completed_response of this Survey.  # noqa: E501
        :type: int
        """

        self._edit_completed_response = edit_completed_response

    @property
    def hide_back_button(self):
        """Gets the hide_back_button of this Survey.  # noqa: E501


        :return: The hide_back_button of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._hide_back_button

    @hide_back_button.setter
    def hide_back_button(self, hide_back_button):
        """Sets the hide_back_button of this Survey.


        :param hide_back_button: The hide_back_button of this Survey.  # noqa: E501
        :type: int
        """

        self._hide_back_button = hide_back_button

    @property
    def show_required_field_text(self):
        """Gets the show_required_field_text of this Survey.  # noqa: E501


        :return: The show_required_field_text of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._show_required_field_text

    @show_required_field_text.setter
    def show_required_field_text(self, show_required_field_text):
        """Sets the show_required_field_text of this Survey.


        :param show_required_field_text: The show_required_field_text of this Survey.  # noqa: E501
        :type: int
        """

        self._show_required_field_text = show_required_field_text

    @property
    def confirmation_email_subject(self):
        """Gets the confirmation_email_subject of this Survey.  # noqa: E501


        :return: The confirmation_email_subject of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._confirmation_email_subject

    @confirmation_email_subject.setter
    def confirmation_email_subject(self, confirmation_email_subject):
        """Sets the confirmation_email_subject of this Survey.


        :param confirmation_email_subject: The confirmation_email_subject of this Survey.  # noqa: E501
        :type: str
        """

        self._confirmation_email_subject = confirmation_email_subject

    @property
    def confirmation_email_content(self):
        """Gets the confirmation_email_content of this Survey.  # noqa: E501


        :return: The confirmation_email_content of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._confirmation_email_content

    @confirmation_email_content.setter
    def confirmation_email_content(self, confirmation_email_content):
        """Sets the confirmation_email_content of this Survey.


        :param confirmation_email_content: The confirmation_email_content of this Survey.  # noqa: E501
        :type: str
        """

        self._confirmation_email_content = confirmation_email_content

    @property
    def confirmation_email_from(self):
        """Gets the confirmation_email_from of this Survey.  # noqa: E501


        :return: The confirmation_email_from of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._confirmation_email_from

    @confirmation_email_from.setter
    def confirmation_email_from(self, confirmation_email_from):
        """Sets the confirmation_email_from of this Survey.


        :param confirmation_email_from: The confirmation_email_from of this Survey.  # noqa: E501
        :type: str
        """

        self._confirmation_email_from = confirmation_email_from

    @property
    def confirmation_email_attachment(self):
        """Gets the confirmation_email_attachment of this Survey.  # noqa: E501


        :return: The confirmation_email_attachment of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._confirmation_email_attachment

    @confirmation_email_attachment.setter
    def confirmation_email_attachment(self, confirmation_email_attachment):
        """Sets the confirmation_email_attachment of this Survey.


        :param confirmation_email_attachment: The confirmation_email_attachment of this Survey.  # noqa: E501
        :type: int
        """

        self._confirmation_email_attachment = confirmation_email_attachment

    @property
    def identifier(self):
        """Gets the identifier of this Survey.  # noqa: E501


        :return: The identifier of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Survey.


        :param identifier: The identifier of this Survey.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def send_confirmation_email(self):
        """Gets the send_confirmation_email of this Survey.  # noqa: E501


        :return: The send_confirmation_email of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._send_confirmation_email

    @send_confirmation_email.setter
    def send_confirmation_email(self, send_confirmation_email):
        """Sets the send_confirmation_email of this Survey.


        :param send_confirmation_email: The send_confirmation_email of this Survey.  # noqa: E501
        :type: int
        """

        self._send_confirmation_email = send_confirmation_email

    @property
    def survey_redirect_message(self):
        """Gets the survey_redirect_message of this Survey.  # noqa: E501


        :return: The survey_redirect_message of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._survey_redirect_message

    @survey_redirect_message.setter
    def survey_redirect_message(self, survey_redirect_message):
        """Sets the survey_redirect_message of this Survey.


        :param survey_redirect_message: The survey_redirect_message of this Survey.  # noqa: E501
        :type: str
        """

        self._survey_redirect_message = survey_redirect_message

    @property
    def survey_thankyou_message(self):
        """Gets the survey_thankyou_message of this Survey.  # noqa: E501


        :return: The survey_thankyou_message of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._survey_thankyou_message

    @survey_thankyou_message.setter
    def survey_thankyou_message(self, survey_thankyou_message):
        """Sets the survey_thankyou_message of this Survey.


        :param survey_thankyou_message: The survey_thankyou_message of this Survey.  # noqa: E501
        :type: str
        """

        self._survey_thankyou_message = survey_thankyou_message

    @property
    def survey_expiration(self):
        """Gets the survey_expiration of this Survey.  # noqa: E501


        :return: The survey_expiration of this Survey.  # noqa: E501
        :rtype: datetime
        """
        return self._survey_expiration

    @survey_expiration.setter
    def survey_expiration(self, survey_expiration):
        """Sets the survey_expiration of this Survey.


        :param survey_expiration: The survey_expiration of this Survey.  # noqa: E501
        :type: datetime
        """

        self._survey_expiration = survey_expiration

    @property
    def close_survey_after_completion(self):
        """Gets the close_survey_after_completion of this Survey.  # noqa: E501


        :return: The close_survey_after_completion of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._close_survey_after_completion

    @close_survey_after_completion.setter
    def close_survey_after_completion(self, close_survey_after_completion):
        """Sets the close_survey_after_completion of this Survey.


        :param close_survey_after_completion: The close_survey_after_completion of this Survey.  # noqa: E501
        :type: int
        """

        self._close_survey_after_completion = close_survey_after_completion

    @property
    def customize_time_availability(self):
        """Gets the customize_time_availability of this Survey.  # noqa: E501


        :return: The customize_time_availability of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._customize_time_availability

    @customize_time_availability.setter
    def customize_time_availability(self, customize_time_availability):
        """Sets the customize_time_availability of this Survey.


        :param customize_time_availability: The customize_time_availability of this Survey.  # noqa: E501
        :type: int
        """

        self._customize_time_availability = customize_time_availability

    @property
    def availability_from_time(self):
        """Gets the availability_from_time of this Survey.  # noqa: E501


        :return: The availability_from_time of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._availability_from_time

    @availability_from_time.setter
    def availability_from_time(self, availability_from_time):
        """Sets the availability_from_time of this Survey.


        :param availability_from_time: The availability_from_time of this Survey.  # noqa: E501
        :type: str
        """

        self._availability_from_time = availability_from_time

    @property
    def availability_to_time(self):
        """Gets the availability_to_time of this Survey.  # noqa: E501


        :return: The availability_to_time of this Survey.  # noqa: E501
        :rtype: str
        """
        return self._availability_to_time

    @availability_to_time.setter
    def availability_to_time(self, availability_to_time):
        """Sets the availability_to_time of this Survey.


        :param availability_to_time: The availability_to_time of this Survey.  # noqa: E501
        :type: str
        """

        self._availability_to_time = availability_to_time

    @property
    def calendared_invitation_enabled(self):
        """Gets the calendared_invitation_enabled of this Survey.  # noqa: E501


        :return: The calendared_invitation_enabled of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._calendared_invitation_enabled

    @calendared_invitation_enabled.setter
    def calendared_invitation_enabled(self, calendared_invitation_enabled):
        """Sets the calendared_invitation_enabled of this Survey.


        :param calendared_invitation_enabled: The calendared_invitation_enabled of this Survey.  # noqa: E501
        :type: int
        """

        self._calendared_invitation_enabled = calendared_invitation_enabled

    @property
    def hide_submit(self):
        """Gets the hide_submit of this Survey.  # noqa: E501


        :return: The hide_submit of this Survey.  # noqa: E501
        :rtype: int
        """
        return self._hide_submit

    @hide_submit.setter
    def hide_submit(self, hide_submit):
        """Sets the hide_submit of this Survey.


        :param hide_submit: The hide_submit of this Survey.  # noqa: E501
        :type: int
        """

        self._hide_submit = hide_submit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Survey):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Survey):
            return True

        return self.to_dict() != other.to_dict()
