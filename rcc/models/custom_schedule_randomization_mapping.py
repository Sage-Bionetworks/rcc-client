# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class CustomScheduleRandomizationMapping(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'mapping_oid': 'str',
        'column_name': 'str',
        'crf_variable_name': 'str',
        'study_level_variable': 'str',
        'show_on_ui': 'bool'
    }

    attribute_map = {
        'mapping_oid': 'mappingOID',
        'column_name': 'columnName',
        'crf_variable_name': 'crfVariableName',
        'study_level_variable': 'studyLevelVariable',
        'show_on_ui': 'showOnUI'
    }

    def __init__(self, mapping_oid=None, column_name=None, crf_variable_name=None, study_level_variable=None, show_on_ui=None, local_vars_configuration=None):  # noqa: E501
        """CustomScheduleRandomizationMapping - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._mapping_oid = None
        self._column_name = None
        self._crf_variable_name = None
        self._study_level_variable = None
        self._show_on_ui = None
        self.discriminator = None

        if mapping_oid is not None:
            self.mapping_oid = mapping_oid
        if column_name is not None:
            self.column_name = column_name
        if crf_variable_name is not None:
            self.crf_variable_name = crf_variable_name
        if study_level_variable is not None:
            self.study_level_variable = study_level_variable
        if show_on_ui is not None:
            self.show_on_ui = show_on_ui

    @property
    def mapping_oid(self):
        """Gets the mapping_oid of this CustomScheduleRandomizationMapping.  # noqa: E501


        :return: The mapping_oid of this CustomScheduleRandomizationMapping.  # noqa: E501
        :rtype: str
        """
        return self._mapping_oid

    @mapping_oid.setter
    def mapping_oid(self, mapping_oid):
        """Sets the mapping_oid of this CustomScheduleRandomizationMapping.


        :param mapping_oid: The mapping_oid of this CustomScheduleRandomizationMapping.  # noqa: E501
        :type: str
        """

        self._mapping_oid = mapping_oid

    @property
    def column_name(self):
        """Gets the column_name of this CustomScheduleRandomizationMapping.  # noqa: E501


        :return: The column_name of this CustomScheduleRandomizationMapping.  # noqa: E501
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this CustomScheduleRandomizationMapping.


        :param column_name: The column_name of this CustomScheduleRandomizationMapping.  # noqa: E501
        :type: str
        """

        self._column_name = column_name

    @property
    def crf_variable_name(self):
        """Gets the crf_variable_name of this CustomScheduleRandomizationMapping.  # noqa: E501


        :return: The crf_variable_name of this CustomScheduleRandomizationMapping.  # noqa: E501
        :rtype: str
        """
        return self._crf_variable_name

    @crf_variable_name.setter
    def crf_variable_name(self, crf_variable_name):
        """Sets the crf_variable_name of this CustomScheduleRandomizationMapping.


        :param crf_variable_name: The crf_variable_name of this CustomScheduleRandomizationMapping.  # noqa: E501
        :type: str
        """

        self._crf_variable_name = crf_variable_name

    @property
    def study_level_variable(self):
        """Gets the study_level_variable of this CustomScheduleRandomizationMapping.  # noqa: E501


        :return: The study_level_variable of this CustomScheduleRandomizationMapping.  # noqa: E501
        :rtype: str
        """
        return self._study_level_variable

    @study_level_variable.setter
    def study_level_variable(self, study_level_variable):
        """Sets the study_level_variable of this CustomScheduleRandomizationMapping.


        :param study_level_variable: The study_level_variable of this CustomScheduleRandomizationMapping.  # noqa: E501
        :type: str
        """

        self._study_level_variable = study_level_variable

    @property
    def show_on_ui(self):
        """Gets the show_on_ui of this CustomScheduleRandomizationMapping.  # noqa: E501


        :return: The show_on_ui of this CustomScheduleRandomizationMapping.  # noqa: E501
        :rtype: bool
        """
        return self._show_on_ui

    @show_on_ui.setter
    def show_on_ui(self, show_on_ui):
        """Sets the show_on_ui of this CustomScheduleRandomizationMapping.


        :param show_on_ui: The show_on_ui of this CustomScheduleRandomizationMapping.  # noqa: E501
        :type: bool
        """

        self._show_on_ui = show_on_ui

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomScheduleRandomizationMapping):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CustomScheduleRandomizationMapping):
            return True

        return self.to_dict() != other.to_dict()
