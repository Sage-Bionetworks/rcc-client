# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class CrfVersionRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'rc_crf_id': 'int',
        'study_id': 'int',
        'name': 'str',
        'description': 'str',
        'version_name': 'str',
        'custom_text': 'str',
        'rc_oid': 'str',
        'revision_notes': 'str',
        'revision_date': 'str',
        'screening_expression': 'str',
        'randomization_expression': 'str',
        'sequence': 'int',
        'enabled': 'bool',
        'create_revision': 'bool',
        'primary_flag': 'bool',
        'screening_flag': 'bool',
        'screening_e_consent_flag': 'bool',
        'randomization_flag': 'bool',
        'enable_screening_validation': 'bool',
        'show_esignature_flag': 'bool',
        'show_lock_flag': 'bool',
        'enable_survey': 'bool',
        'available_on_mobile': 'bool',
        'is_enroll_custom_crf': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'rc_crf_id': 'rcCrfId',
        'study_id': 'studyId',
        'name': 'name',
        'description': 'description',
        'version_name': 'versionName',
        'custom_text': 'customText',
        'rc_oid': 'rcOid',
        'revision_notes': 'revisionNotes',
        'revision_date': 'revisionDate',
        'screening_expression': 'screeningExpression',
        'randomization_expression': 'randomizationExpression',
        'sequence': 'sequence',
        'enabled': 'enabled',
        'create_revision': 'createRevision',
        'primary_flag': 'primaryFlag',
        'screening_flag': 'screeningFlag',
        'screening_e_consent_flag': 'screeningEConsentFlag',
        'randomization_flag': 'randomizationFlag',
        'enable_screening_validation': 'enableScreeningValidation',
        'show_esignature_flag': 'showEsignatureFlag',
        'show_lock_flag': 'showLockFlag',
        'enable_survey': 'enableSurvey',
        'available_on_mobile': 'availableOnMobile',
        'is_enroll_custom_crf': 'isEnrollCustomCrf'
    }

    def __init__(self, id=None, rc_crf_id=None, study_id=None, name=None, description=None, version_name=None, custom_text=None, rc_oid=None, revision_notes=None, revision_date=None, screening_expression=None, randomization_expression=None, sequence=None, enabled=None, create_revision=None, primary_flag=None, screening_flag=None, screening_e_consent_flag=None, randomization_flag=None, enable_screening_validation=None, show_esignature_flag=None, show_lock_flag=None, enable_survey=None, available_on_mobile=None, is_enroll_custom_crf=None, local_vars_configuration=None):  # noqa: E501
        """CrfVersionRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._rc_crf_id = None
        self._study_id = None
        self._name = None
        self._description = None
        self._version_name = None
        self._custom_text = None
        self._rc_oid = None
        self._revision_notes = None
        self._revision_date = None
        self._screening_expression = None
        self._randomization_expression = None
        self._sequence = None
        self._enabled = None
        self._create_revision = None
        self._primary_flag = None
        self._screening_flag = None
        self._screening_e_consent_flag = None
        self._randomization_flag = None
        self._enable_screening_validation = None
        self._show_esignature_flag = None
        self._show_lock_flag = None
        self._enable_survey = None
        self._available_on_mobile = None
        self._is_enroll_custom_crf = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if rc_crf_id is not None:
            self.rc_crf_id = rc_crf_id
        if study_id is not None:
            self.study_id = study_id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if version_name is not None:
            self.version_name = version_name
        if custom_text is not None:
            self.custom_text = custom_text
        if rc_oid is not None:
            self.rc_oid = rc_oid
        if revision_notes is not None:
            self.revision_notes = revision_notes
        if revision_date is not None:
            self.revision_date = revision_date
        if screening_expression is not None:
            self.screening_expression = screening_expression
        if randomization_expression is not None:
            self.randomization_expression = randomization_expression
        if sequence is not None:
            self.sequence = sequence
        if enabled is not None:
            self.enabled = enabled
        if create_revision is not None:
            self.create_revision = create_revision
        if primary_flag is not None:
            self.primary_flag = primary_flag
        if screening_flag is not None:
            self.screening_flag = screening_flag
        if screening_e_consent_flag is not None:
            self.screening_e_consent_flag = screening_e_consent_flag
        if randomization_flag is not None:
            self.randomization_flag = randomization_flag
        if enable_screening_validation is not None:
            self.enable_screening_validation = enable_screening_validation
        if show_esignature_flag is not None:
            self.show_esignature_flag = show_esignature_flag
        if show_lock_flag is not None:
            self.show_lock_flag = show_lock_flag
        if enable_survey is not None:
            self.enable_survey = enable_survey
        if available_on_mobile is not None:
            self.available_on_mobile = available_on_mobile
        if is_enroll_custom_crf is not None:
            self.is_enroll_custom_crf = is_enroll_custom_crf

    @property
    def id(self):
        """Gets the id of this CrfVersionRpc.  # noqa: E501


        :return: The id of this CrfVersionRpc.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CrfVersionRpc.


        :param id: The id of this CrfVersionRpc.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def rc_crf_id(self):
        """Gets the rc_crf_id of this CrfVersionRpc.  # noqa: E501


        :return: The rc_crf_id of this CrfVersionRpc.  # noqa: E501
        :rtype: int
        """
        return self._rc_crf_id

    @rc_crf_id.setter
    def rc_crf_id(self, rc_crf_id):
        """Sets the rc_crf_id of this CrfVersionRpc.


        :param rc_crf_id: The rc_crf_id of this CrfVersionRpc.  # noqa: E501
        :type: int
        """

        self._rc_crf_id = rc_crf_id

    @property
    def study_id(self):
        """Gets the study_id of this CrfVersionRpc.  # noqa: E501


        :return: The study_id of this CrfVersionRpc.  # noqa: E501
        :rtype: int
        """
        return self._study_id

    @study_id.setter
    def study_id(self, study_id):
        """Sets the study_id of this CrfVersionRpc.


        :param study_id: The study_id of this CrfVersionRpc.  # noqa: E501
        :type: int
        """

        self._study_id = study_id

    @property
    def name(self):
        """Gets the name of this CrfVersionRpc.  # noqa: E501


        :return: The name of this CrfVersionRpc.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CrfVersionRpc.


        :param name: The name of this CrfVersionRpc.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CrfVersionRpc.  # noqa: E501


        :return: The description of this CrfVersionRpc.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CrfVersionRpc.


        :param description: The description of this CrfVersionRpc.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def version_name(self):
        """Gets the version_name of this CrfVersionRpc.  # noqa: E501


        :return: The version_name of this CrfVersionRpc.  # noqa: E501
        :rtype: str
        """
        return self._version_name

    @version_name.setter
    def version_name(self, version_name):
        """Sets the version_name of this CrfVersionRpc.


        :param version_name: The version_name of this CrfVersionRpc.  # noqa: E501
        :type: str
        """

        self._version_name = version_name

    @property
    def custom_text(self):
        """Gets the custom_text of this CrfVersionRpc.  # noqa: E501


        :return: The custom_text of this CrfVersionRpc.  # noqa: E501
        :rtype: str
        """
        return self._custom_text

    @custom_text.setter
    def custom_text(self, custom_text):
        """Sets the custom_text of this CrfVersionRpc.


        :param custom_text: The custom_text of this CrfVersionRpc.  # noqa: E501
        :type: str
        """

        self._custom_text = custom_text

    @property
    def rc_oid(self):
        """Gets the rc_oid of this CrfVersionRpc.  # noqa: E501


        :return: The rc_oid of this CrfVersionRpc.  # noqa: E501
        :rtype: str
        """
        return self._rc_oid

    @rc_oid.setter
    def rc_oid(self, rc_oid):
        """Sets the rc_oid of this CrfVersionRpc.


        :param rc_oid: The rc_oid of this CrfVersionRpc.  # noqa: E501
        :type: str
        """

        self._rc_oid = rc_oid

    @property
    def revision_notes(self):
        """Gets the revision_notes of this CrfVersionRpc.  # noqa: E501


        :return: The revision_notes of this CrfVersionRpc.  # noqa: E501
        :rtype: str
        """
        return self._revision_notes

    @revision_notes.setter
    def revision_notes(self, revision_notes):
        """Sets the revision_notes of this CrfVersionRpc.


        :param revision_notes: The revision_notes of this CrfVersionRpc.  # noqa: E501
        :type: str
        """

        self._revision_notes = revision_notes

    @property
    def revision_date(self):
        """Gets the revision_date of this CrfVersionRpc.  # noqa: E501


        :return: The revision_date of this CrfVersionRpc.  # noqa: E501
        :rtype: str
        """
        return self._revision_date

    @revision_date.setter
    def revision_date(self, revision_date):
        """Sets the revision_date of this CrfVersionRpc.


        :param revision_date: The revision_date of this CrfVersionRpc.  # noqa: E501
        :type: str
        """

        self._revision_date = revision_date

    @property
    def screening_expression(self):
        """Gets the screening_expression of this CrfVersionRpc.  # noqa: E501


        :return: The screening_expression of this CrfVersionRpc.  # noqa: E501
        :rtype: str
        """
        return self._screening_expression

    @screening_expression.setter
    def screening_expression(self, screening_expression):
        """Sets the screening_expression of this CrfVersionRpc.


        :param screening_expression: The screening_expression of this CrfVersionRpc.  # noqa: E501
        :type: str
        """

        self._screening_expression = screening_expression

    @property
    def randomization_expression(self):
        """Gets the randomization_expression of this CrfVersionRpc.  # noqa: E501


        :return: The randomization_expression of this CrfVersionRpc.  # noqa: E501
        :rtype: str
        """
        return self._randomization_expression

    @randomization_expression.setter
    def randomization_expression(self, randomization_expression):
        """Sets the randomization_expression of this CrfVersionRpc.


        :param randomization_expression: The randomization_expression of this CrfVersionRpc.  # noqa: E501
        :type: str
        """

        self._randomization_expression = randomization_expression

    @property
    def sequence(self):
        """Gets the sequence of this CrfVersionRpc.  # noqa: E501


        :return: The sequence of this CrfVersionRpc.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this CrfVersionRpc.


        :param sequence: The sequence of this CrfVersionRpc.  # noqa: E501
        :type: int
        """

        self._sequence = sequence

    @property
    def enabled(self):
        """Gets the enabled of this CrfVersionRpc.  # noqa: E501


        :return: The enabled of this CrfVersionRpc.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this CrfVersionRpc.


        :param enabled: The enabled of this CrfVersionRpc.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def create_revision(self):
        """Gets the create_revision of this CrfVersionRpc.  # noqa: E501


        :return: The create_revision of this CrfVersionRpc.  # noqa: E501
        :rtype: bool
        """
        return self._create_revision

    @create_revision.setter
    def create_revision(self, create_revision):
        """Sets the create_revision of this CrfVersionRpc.


        :param create_revision: The create_revision of this CrfVersionRpc.  # noqa: E501
        :type: bool
        """

        self._create_revision = create_revision

    @property
    def primary_flag(self):
        """Gets the primary_flag of this CrfVersionRpc.  # noqa: E501


        :return: The primary_flag of this CrfVersionRpc.  # noqa: E501
        :rtype: bool
        """
        return self._primary_flag

    @primary_flag.setter
    def primary_flag(self, primary_flag):
        """Sets the primary_flag of this CrfVersionRpc.


        :param primary_flag: The primary_flag of this CrfVersionRpc.  # noqa: E501
        :type: bool
        """

        self._primary_flag = primary_flag

    @property
    def screening_flag(self):
        """Gets the screening_flag of this CrfVersionRpc.  # noqa: E501


        :return: The screening_flag of this CrfVersionRpc.  # noqa: E501
        :rtype: bool
        """
        return self._screening_flag

    @screening_flag.setter
    def screening_flag(self, screening_flag):
        """Sets the screening_flag of this CrfVersionRpc.


        :param screening_flag: The screening_flag of this CrfVersionRpc.  # noqa: E501
        :type: bool
        """

        self._screening_flag = screening_flag

    @property
    def screening_e_consent_flag(self):
        """Gets the screening_e_consent_flag of this CrfVersionRpc.  # noqa: E501


        :return: The screening_e_consent_flag of this CrfVersionRpc.  # noqa: E501
        :rtype: bool
        """
        return self._screening_e_consent_flag

    @screening_e_consent_flag.setter
    def screening_e_consent_flag(self, screening_e_consent_flag):
        """Sets the screening_e_consent_flag of this CrfVersionRpc.


        :param screening_e_consent_flag: The screening_e_consent_flag of this CrfVersionRpc.  # noqa: E501
        :type: bool
        """

        self._screening_e_consent_flag = screening_e_consent_flag

    @property
    def randomization_flag(self):
        """Gets the randomization_flag of this CrfVersionRpc.  # noqa: E501


        :return: The randomization_flag of this CrfVersionRpc.  # noqa: E501
        :rtype: bool
        """
        return self._randomization_flag

    @randomization_flag.setter
    def randomization_flag(self, randomization_flag):
        """Sets the randomization_flag of this CrfVersionRpc.


        :param randomization_flag: The randomization_flag of this CrfVersionRpc.  # noqa: E501
        :type: bool
        """

        self._randomization_flag = randomization_flag

    @property
    def enable_screening_validation(self):
        """Gets the enable_screening_validation of this CrfVersionRpc.  # noqa: E501


        :return: The enable_screening_validation of this CrfVersionRpc.  # noqa: E501
        :rtype: bool
        """
        return self._enable_screening_validation

    @enable_screening_validation.setter
    def enable_screening_validation(self, enable_screening_validation):
        """Sets the enable_screening_validation of this CrfVersionRpc.


        :param enable_screening_validation: The enable_screening_validation of this CrfVersionRpc.  # noqa: E501
        :type: bool
        """

        self._enable_screening_validation = enable_screening_validation

    @property
    def show_esignature_flag(self):
        """Gets the show_esignature_flag of this CrfVersionRpc.  # noqa: E501


        :return: The show_esignature_flag of this CrfVersionRpc.  # noqa: E501
        :rtype: bool
        """
        return self._show_esignature_flag

    @show_esignature_flag.setter
    def show_esignature_flag(self, show_esignature_flag):
        """Sets the show_esignature_flag of this CrfVersionRpc.


        :param show_esignature_flag: The show_esignature_flag of this CrfVersionRpc.  # noqa: E501
        :type: bool
        """

        self._show_esignature_flag = show_esignature_flag

    @property
    def show_lock_flag(self):
        """Gets the show_lock_flag of this CrfVersionRpc.  # noqa: E501


        :return: The show_lock_flag of this CrfVersionRpc.  # noqa: E501
        :rtype: bool
        """
        return self._show_lock_flag

    @show_lock_flag.setter
    def show_lock_flag(self, show_lock_flag):
        """Sets the show_lock_flag of this CrfVersionRpc.


        :param show_lock_flag: The show_lock_flag of this CrfVersionRpc.  # noqa: E501
        :type: bool
        """

        self._show_lock_flag = show_lock_flag

    @property
    def enable_survey(self):
        """Gets the enable_survey of this CrfVersionRpc.  # noqa: E501


        :return: The enable_survey of this CrfVersionRpc.  # noqa: E501
        :rtype: bool
        """
        return self._enable_survey

    @enable_survey.setter
    def enable_survey(self, enable_survey):
        """Sets the enable_survey of this CrfVersionRpc.


        :param enable_survey: The enable_survey of this CrfVersionRpc.  # noqa: E501
        :type: bool
        """

        self._enable_survey = enable_survey

    @property
    def available_on_mobile(self):
        """Gets the available_on_mobile of this CrfVersionRpc.  # noqa: E501


        :return: The available_on_mobile of this CrfVersionRpc.  # noqa: E501
        :rtype: bool
        """
        return self._available_on_mobile

    @available_on_mobile.setter
    def available_on_mobile(self, available_on_mobile):
        """Sets the available_on_mobile of this CrfVersionRpc.


        :param available_on_mobile: The available_on_mobile of this CrfVersionRpc.  # noqa: E501
        :type: bool
        """

        self._available_on_mobile = available_on_mobile

    @property
    def is_enroll_custom_crf(self):
        """Gets the is_enroll_custom_crf of this CrfVersionRpc.  # noqa: E501


        :return: The is_enroll_custom_crf of this CrfVersionRpc.  # noqa: E501
        :rtype: bool
        """
        return self._is_enroll_custom_crf

    @is_enroll_custom_crf.setter
    def is_enroll_custom_crf(self, is_enroll_custom_crf):
        """Sets the is_enroll_custom_crf of this CrfVersionRpc.


        :param is_enroll_custom_crf: The is_enroll_custom_crf of this CrfVersionRpc.  # noqa: E501
        :type: bool
        """

        self._is_enroll_custom_crf = is_enroll_custom_crf

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrfVersionRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CrfVersionRpc):
            return True

        return self.to_dict() != other.to_dict()
