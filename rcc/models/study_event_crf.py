# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class StudyEventCrf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'crf_version_oid': 'str',
        'date_interviewed': 'datetime',
        'interviewer_name': 'str',
        'status_code': 'str',
        'annotations': 'str',
        'validator_annotations': 'str',
        'validate_string': 'str',
        'owner': 'str',
        'date_created': 'datetime',
        'date_updated': 'datetime',
        'electronic_signature_status': 'bool',
        'lock_status': 'bool',
        'date_completed': 'datetime',
        'date_dde_started': 'datetime',
        'date_dde_completed': 'datetime',
        'date_sdv': 'datetime',
        'medical_reviwed_by_id': 'str',
        'medical_reviwed_date': 'datetime',
        'medical_reviwed_status': 'bool',
        'medical_review_comment': 'str',
        'study_reviwed_by_id': 'str',
        'study_reviwed_date': 'datetime',
        'study_reviwed_status': 'bool',
        'study_review_comment': 'str',
        'disable_trigger': 'bool',
        'signature_history': 'bool',
        'signature_date': 'datetime',
        'signature_owner': 'str',
        'states': 'str',
        'date_de_started': 'datetime',
        'migration_locked': 'bool',
        'sdvcomment': 'str',
        'ddecompleted_by_id': 'str',
        'destarted_by_id': 'str'
    }

    attribute_map = {
        'crf_version_oid': 'crfVersionOID',
        'date_interviewed': 'dateInterviewed',
        'interviewer_name': 'interviewerName',
        'status_code': 'statusCode',
        'annotations': 'annotations',
        'validator_annotations': 'validatorAnnotations',
        'validate_string': 'validateString',
        'owner': 'owner',
        'date_created': 'dateCreated',
        'date_updated': 'dateUpdated',
        'electronic_signature_status': 'electronicSignatureStatus',
        'lock_status': 'lockStatus',
        'date_completed': 'dateCompleted',
        'date_dde_started': 'dateDDEStarted',
        'date_dde_completed': 'dateDDECompleted',
        'date_sdv': 'dateSDV',
        'medical_reviwed_by_id': 'medicalReviwedById',
        'medical_reviwed_date': 'medicalReviwedDate',
        'medical_reviwed_status': 'medicalReviwedStatus',
        'medical_review_comment': 'medicalReviewComment',
        'study_reviwed_by_id': 'studyReviwedById',
        'study_reviwed_date': 'studyReviwedDate',
        'study_reviwed_status': 'studyReviwedStatus',
        'study_review_comment': 'studyReviewComment',
        'disable_trigger': 'disableTrigger',
        'signature_history': 'signatureHistory',
        'signature_date': 'signatureDate',
        'signature_owner': 'signatureOwner',
        'states': 'states',
        'date_de_started': 'dateDEStarted',
        'migration_locked': 'migrationLocked',
        'sdvcomment': 'sdvcomment',
        'ddecompleted_by_id': 'ddecompletedById',
        'destarted_by_id': 'destartedById'
    }

    def __init__(self, crf_version_oid=None, date_interviewed=None, interviewer_name=None, status_code=None, annotations=None, validator_annotations=None, validate_string=None, owner=None, date_created=None, date_updated=None, electronic_signature_status=None, lock_status=None, date_completed=None, date_dde_started=None, date_dde_completed=None, date_sdv=None, medical_reviwed_by_id=None, medical_reviwed_date=None, medical_reviwed_status=None, medical_review_comment=None, study_reviwed_by_id=None, study_reviwed_date=None, study_reviwed_status=None, study_review_comment=None, disable_trigger=None, signature_history=None, signature_date=None, signature_owner=None, states=None, date_de_started=None, migration_locked=None, sdvcomment=None, ddecompleted_by_id=None, destarted_by_id=None, local_vars_configuration=None):  # noqa: E501
        """StudyEventCrf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._crf_version_oid = None
        self._date_interviewed = None
        self._interviewer_name = None
        self._status_code = None
        self._annotations = None
        self._validator_annotations = None
        self._validate_string = None
        self._owner = None
        self._date_created = None
        self._date_updated = None
        self._electronic_signature_status = None
        self._lock_status = None
        self._date_completed = None
        self._date_dde_started = None
        self._date_dde_completed = None
        self._date_sdv = None
        self._medical_reviwed_by_id = None
        self._medical_reviwed_date = None
        self._medical_reviwed_status = None
        self._medical_review_comment = None
        self._study_reviwed_by_id = None
        self._study_reviwed_date = None
        self._study_reviwed_status = None
        self._study_review_comment = None
        self._disable_trigger = None
        self._signature_history = None
        self._signature_date = None
        self._signature_owner = None
        self._states = None
        self._date_de_started = None
        self._migration_locked = None
        self._sdvcomment = None
        self._ddecompleted_by_id = None
        self._destarted_by_id = None
        self.discriminator = None

        if crf_version_oid is not None:
            self.crf_version_oid = crf_version_oid
        if date_interviewed is not None:
            self.date_interviewed = date_interviewed
        if interviewer_name is not None:
            self.interviewer_name = interviewer_name
        if status_code is not None:
            self.status_code = status_code
        if annotations is not None:
            self.annotations = annotations
        if validator_annotations is not None:
            self.validator_annotations = validator_annotations
        if validate_string is not None:
            self.validate_string = validate_string
        if owner is not None:
            self.owner = owner
        if date_created is not None:
            self.date_created = date_created
        if date_updated is not None:
            self.date_updated = date_updated
        if electronic_signature_status is not None:
            self.electronic_signature_status = electronic_signature_status
        if lock_status is not None:
            self.lock_status = lock_status
        if date_completed is not None:
            self.date_completed = date_completed
        if date_dde_started is not None:
            self.date_dde_started = date_dde_started
        if date_dde_completed is not None:
            self.date_dde_completed = date_dde_completed
        if date_sdv is not None:
            self.date_sdv = date_sdv
        if medical_reviwed_by_id is not None:
            self.medical_reviwed_by_id = medical_reviwed_by_id
        if medical_reviwed_date is not None:
            self.medical_reviwed_date = medical_reviwed_date
        if medical_reviwed_status is not None:
            self.medical_reviwed_status = medical_reviwed_status
        if medical_review_comment is not None:
            self.medical_review_comment = medical_review_comment
        if study_reviwed_by_id is not None:
            self.study_reviwed_by_id = study_reviwed_by_id
        if study_reviwed_date is not None:
            self.study_reviwed_date = study_reviwed_date
        if study_reviwed_status is not None:
            self.study_reviwed_status = study_reviwed_status
        if study_review_comment is not None:
            self.study_review_comment = study_review_comment
        if disable_trigger is not None:
            self.disable_trigger = disable_trigger
        if signature_history is not None:
            self.signature_history = signature_history
        if signature_date is not None:
            self.signature_date = signature_date
        if signature_owner is not None:
            self.signature_owner = signature_owner
        if states is not None:
            self.states = states
        if date_de_started is not None:
            self.date_de_started = date_de_started
        if migration_locked is not None:
            self.migration_locked = migration_locked
        if sdvcomment is not None:
            self.sdvcomment = sdvcomment
        if ddecompleted_by_id is not None:
            self.ddecompleted_by_id = ddecompleted_by_id
        if destarted_by_id is not None:
            self.destarted_by_id = destarted_by_id

    @property
    def crf_version_oid(self):
        """Gets the crf_version_oid of this StudyEventCrf.  # noqa: E501


        :return: The crf_version_oid of this StudyEventCrf.  # noqa: E501
        :rtype: str
        """
        return self._crf_version_oid

    @crf_version_oid.setter
    def crf_version_oid(self, crf_version_oid):
        """Sets the crf_version_oid of this StudyEventCrf.


        :param crf_version_oid: The crf_version_oid of this StudyEventCrf.  # noqa: E501
        :type: str
        """

        self._crf_version_oid = crf_version_oid

    @property
    def date_interviewed(self):
        """Gets the date_interviewed of this StudyEventCrf.  # noqa: E501


        :return: The date_interviewed of this StudyEventCrf.  # noqa: E501
        :rtype: datetime
        """
        return self._date_interviewed

    @date_interviewed.setter
    def date_interviewed(self, date_interviewed):
        """Sets the date_interviewed of this StudyEventCrf.


        :param date_interviewed: The date_interviewed of this StudyEventCrf.  # noqa: E501
        :type: datetime
        """

        self._date_interviewed = date_interviewed

    @property
    def interviewer_name(self):
        """Gets the interviewer_name of this StudyEventCrf.  # noqa: E501


        :return: The interviewer_name of this StudyEventCrf.  # noqa: E501
        :rtype: str
        """
        return self._interviewer_name

    @interviewer_name.setter
    def interviewer_name(self, interviewer_name):
        """Sets the interviewer_name of this StudyEventCrf.


        :param interviewer_name: The interviewer_name of this StudyEventCrf.  # noqa: E501
        :type: str
        """

        self._interviewer_name = interviewer_name

    @property
    def status_code(self):
        """Gets the status_code of this StudyEventCrf.  # noqa: E501


        :return: The status_code of this StudyEventCrf.  # noqa: E501
        :rtype: str
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this StudyEventCrf.


        :param status_code: The status_code of this StudyEventCrf.  # noqa: E501
        :type: str
        """

        self._status_code = status_code

    @property
    def annotations(self):
        """Gets the annotations of this StudyEventCrf.  # noqa: E501


        :return: The annotations of this StudyEventCrf.  # noqa: E501
        :rtype: str
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this StudyEventCrf.


        :param annotations: The annotations of this StudyEventCrf.  # noqa: E501
        :type: str
        """

        self._annotations = annotations

    @property
    def validator_annotations(self):
        """Gets the validator_annotations of this StudyEventCrf.  # noqa: E501


        :return: The validator_annotations of this StudyEventCrf.  # noqa: E501
        :rtype: str
        """
        return self._validator_annotations

    @validator_annotations.setter
    def validator_annotations(self, validator_annotations):
        """Sets the validator_annotations of this StudyEventCrf.


        :param validator_annotations: The validator_annotations of this StudyEventCrf.  # noqa: E501
        :type: str
        """

        self._validator_annotations = validator_annotations

    @property
    def validate_string(self):
        """Gets the validate_string of this StudyEventCrf.  # noqa: E501


        :return: The validate_string of this StudyEventCrf.  # noqa: E501
        :rtype: str
        """
        return self._validate_string

    @validate_string.setter
    def validate_string(self, validate_string):
        """Sets the validate_string of this StudyEventCrf.


        :param validate_string: The validate_string of this StudyEventCrf.  # noqa: E501
        :type: str
        """

        self._validate_string = validate_string

    @property
    def owner(self):
        """Gets the owner of this StudyEventCrf.  # noqa: E501


        :return: The owner of this StudyEventCrf.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this StudyEventCrf.


        :param owner: The owner of this StudyEventCrf.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def date_created(self):
        """Gets the date_created of this StudyEventCrf.  # noqa: E501


        :return: The date_created of this StudyEventCrf.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this StudyEventCrf.


        :param date_created: The date_created of this StudyEventCrf.  # noqa: E501
        :type: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self):
        """Gets the date_updated of this StudyEventCrf.  # noqa: E501


        :return: The date_updated of this StudyEventCrf.  # noqa: E501
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated):
        """Sets the date_updated of this StudyEventCrf.


        :param date_updated: The date_updated of this StudyEventCrf.  # noqa: E501
        :type: datetime
        """

        self._date_updated = date_updated

    @property
    def electronic_signature_status(self):
        """Gets the electronic_signature_status of this StudyEventCrf.  # noqa: E501


        :return: The electronic_signature_status of this StudyEventCrf.  # noqa: E501
        :rtype: bool
        """
        return self._electronic_signature_status

    @electronic_signature_status.setter
    def electronic_signature_status(self, electronic_signature_status):
        """Sets the electronic_signature_status of this StudyEventCrf.


        :param electronic_signature_status: The electronic_signature_status of this StudyEventCrf.  # noqa: E501
        :type: bool
        """

        self._electronic_signature_status = electronic_signature_status

    @property
    def lock_status(self):
        """Gets the lock_status of this StudyEventCrf.  # noqa: E501


        :return: The lock_status of this StudyEventCrf.  # noqa: E501
        :rtype: bool
        """
        return self._lock_status

    @lock_status.setter
    def lock_status(self, lock_status):
        """Sets the lock_status of this StudyEventCrf.


        :param lock_status: The lock_status of this StudyEventCrf.  # noqa: E501
        :type: bool
        """

        self._lock_status = lock_status

    @property
    def date_completed(self):
        """Gets the date_completed of this StudyEventCrf.  # noqa: E501


        :return: The date_completed of this StudyEventCrf.  # noqa: E501
        :rtype: datetime
        """
        return self._date_completed

    @date_completed.setter
    def date_completed(self, date_completed):
        """Sets the date_completed of this StudyEventCrf.


        :param date_completed: The date_completed of this StudyEventCrf.  # noqa: E501
        :type: datetime
        """

        self._date_completed = date_completed

    @property
    def date_dde_started(self):
        """Gets the date_dde_started of this StudyEventCrf.  # noqa: E501


        :return: The date_dde_started of this StudyEventCrf.  # noqa: E501
        :rtype: datetime
        """
        return self._date_dde_started

    @date_dde_started.setter
    def date_dde_started(self, date_dde_started):
        """Sets the date_dde_started of this StudyEventCrf.


        :param date_dde_started: The date_dde_started of this StudyEventCrf.  # noqa: E501
        :type: datetime
        """

        self._date_dde_started = date_dde_started

    @property
    def date_dde_completed(self):
        """Gets the date_dde_completed of this StudyEventCrf.  # noqa: E501


        :return: The date_dde_completed of this StudyEventCrf.  # noqa: E501
        :rtype: datetime
        """
        return self._date_dde_completed

    @date_dde_completed.setter
    def date_dde_completed(self, date_dde_completed):
        """Sets the date_dde_completed of this StudyEventCrf.


        :param date_dde_completed: The date_dde_completed of this StudyEventCrf.  # noqa: E501
        :type: datetime
        """

        self._date_dde_completed = date_dde_completed

    @property
    def date_sdv(self):
        """Gets the date_sdv of this StudyEventCrf.  # noqa: E501


        :return: The date_sdv of this StudyEventCrf.  # noqa: E501
        :rtype: datetime
        """
        return self._date_sdv

    @date_sdv.setter
    def date_sdv(self, date_sdv):
        """Sets the date_sdv of this StudyEventCrf.


        :param date_sdv: The date_sdv of this StudyEventCrf.  # noqa: E501
        :type: datetime
        """

        self._date_sdv = date_sdv

    @property
    def medical_reviwed_by_id(self):
        """Gets the medical_reviwed_by_id of this StudyEventCrf.  # noqa: E501


        :return: The medical_reviwed_by_id of this StudyEventCrf.  # noqa: E501
        :rtype: str
        """
        return self._medical_reviwed_by_id

    @medical_reviwed_by_id.setter
    def medical_reviwed_by_id(self, medical_reviwed_by_id):
        """Sets the medical_reviwed_by_id of this StudyEventCrf.


        :param medical_reviwed_by_id: The medical_reviwed_by_id of this StudyEventCrf.  # noqa: E501
        :type: str
        """

        self._medical_reviwed_by_id = medical_reviwed_by_id

    @property
    def medical_reviwed_date(self):
        """Gets the medical_reviwed_date of this StudyEventCrf.  # noqa: E501


        :return: The medical_reviwed_date of this StudyEventCrf.  # noqa: E501
        :rtype: datetime
        """
        return self._medical_reviwed_date

    @medical_reviwed_date.setter
    def medical_reviwed_date(self, medical_reviwed_date):
        """Sets the medical_reviwed_date of this StudyEventCrf.


        :param medical_reviwed_date: The medical_reviwed_date of this StudyEventCrf.  # noqa: E501
        :type: datetime
        """

        self._medical_reviwed_date = medical_reviwed_date

    @property
    def medical_reviwed_status(self):
        """Gets the medical_reviwed_status of this StudyEventCrf.  # noqa: E501


        :return: The medical_reviwed_status of this StudyEventCrf.  # noqa: E501
        :rtype: bool
        """
        return self._medical_reviwed_status

    @medical_reviwed_status.setter
    def medical_reviwed_status(self, medical_reviwed_status):
        """Sets the medical_reviwed_status of this StudyEventCrf.


        :param medical_reviwed_status: The medical_reviwed_status of this StudyEventCrf.  # noqa: E501
        :type: bool
        """

        self._medical_reviwed_status = medical_reviwed_status

    @property
    def medical_review_comment(self):
        """Gets the medical_review_comment of this StudyEventCrf.  # noqa: E501


        :return: The medical_review_comment of this StudyEventCrf.  # noqa: E501
        :rtype: str
        """
        return self._medical_review_comment

    @medical_review_comment.setter
    def medical_review_comment(self, medical_review_comment):
        """Sets the medical_review_comment of this StudyEventCrf.


        :param medical_review_comment: The medical_review_comment of this StudyEventCrf.  # noqa: E501
        :type: str
        """

        self._medical_review_comment = medical_review_comment

    @property
    def study_reviwed_by_id(self):
        """Gets the study_reviwed_by_id of this StudyEventCrf.  # noqa: E501


        :return: The study_reviwed_by_id of this StudyEventCrf.  # noqa: E501
        :rtype: str
        """
        return self._study_reviwed_by_id

    @study_reviwed_by_id.setter
    def study_reviwed_by_id(self, study_reviwed_by_id):
        """Sets the study_reviwed_by_id of this StudyEventCrf.


        :param study_reviwed_by_id: The study_reviwed_by_id of this StudyEventCrf.  # noqa: E501
        :type: str
        """

        self._study_reviwed_by_id = study_reviwed_by_id

    @property
    def study_reviwed_date(self):
        """Gets the study_reviwed_date of this StudyEventCrf.  # noqa: E501


        :return: The study_reviwed_date of this StudyEventCrf.  # noqa: E501
        :rtype: datetime
        """
        return self._study_reviwed_date

    @study_reviwed_date.setter
    def study_reviwed_date(self, study_reviwed_date):
        """Sets the study_reviwed_date of this StudyEventCrf.


        :param study_reviwed_date: The study_reviwed_date of this StudyEventCrf.  # noqa: E501
        :type: datetime
        """

        self._study_reviwed_date = study_reviwed_date

    @property
    def study_reviwed_status(self):
        """Gets the study_reviwed_status of this StudyEventCrf.  # noqa: E501


        :return: The study_reviwed_status of this StudyEventCrf.  # noqa: E501
        :rtype: bool
        """
        return self._study_reviwed_status

    @study_reviwed_status.setter
    def study_reviwed_status(self, study_reviwed_status):
        """Sets the study_reviwed_status of this StudyEventCrf.


        :param study_reviwed_status: The study_reviwed_status of this StudyEventCrf.  # noqa: E501
        :type: bool
        """

        self._study_reviwed_status = study_reviwed_status

    @property
    def study_review_comment(self):
        """Gets the study_review_comment of this StudyEventCrf.  # noqa: E501


        :return: The study_review_comment of this StudyEventCrf.  # noqa: E501
        :rtype: str
        """
        return self._study_review_comment

    @study_review_comment.setter
    def study_review_comment(self, study_review_comment):
        """Sets the study_review_comment of this StudyEventCrf.


        :param study_review_comment: The study_review_comment of this StudyEventCrf.  # noqa: E501
        :type: str
        """

        self._study_review_comment = study_review_comment

    @property
    def disable_trigger(self):
        """Gets the disable_trigger of this StudyEventCrf.  # noqa: E501


        :return: The disable_trigger of this StudyEventCrf.  # noqa: E501
        :rtype: bool
        """
        return self._disable_trigger

    @disable_trigger.setter
    def disable_trigger(self, disable_trigger):
        """Sets the disable_trigger of this StudyEventCrf.


        :param disable_trigger: The disable_trigger of this StudyEventCrf.  # noqa: E501
        :type: bool
        """

        self._disable_trigger = disable_trigger

    @property
    def signature_history(self):
        """Gets the signature_history of this StudyEventCrf.  # noqa: E501


        :return: The signature_history of this StudyEventCrf.  # noqa: E501
        :rtype: bool
        """
        return self._signature_history

    @signature_history.setter
    def signature_history(self, signature_history):
        """Sets the signature_history of this StudyEventCrf.


        :param signature_history: The signature_history of this StudyEventCrf.  # noqa: E501
        :type: bool
        """

        self._signature_history = signature_history

    @property
    def signature_date(self):
        """Gets the signature_date of this StudyEventCrf.  # noqa: E501


        :return: The signature_date of this StudyEventCrf.  # noqa: E501
        :rtype: datetime
        """
        return self._signature_date

    @signature_date.setter
    def signature_date(self, signature_date):
        """Sets the signature_date of this StudyEventCrf.


        :param signature_date: The signature_date of this StudyEventCrf.  # noqa: E501
        :type: datetime
        """

        self._signature_date = signature_date

    @property
    def signature_owner(self):
        """Gets the signature_owner of this StudyEventCrf.  # noqa: E501


        :return: The signature_owner of this StudyEventCrf.  # noqa: E501
        :rtype: str
        """
        return self._signature_owner

    @signature_owner.setter
    def signature_owner(self, signature_owner):
        """Sets the signature_owner of this StudyEventCrf.


        :param signature_owner: The signature_owner of this StudyEventCrf.  # noqa: E501
        :type: str
        """

        self._signature_owner = signature_owner

    @property
    def states(self):
        """Gets the states of this StudyEventCrf.  # noqa: E501


        :return: The states of this StudyEventCrf.  # noqa: E501
        :rtype: str
        """
        return self._states

    @states.setter
    def states(self, states):
        """Sets the states of this StudyEventCrf.


        :param states: The states of this StudyEventCrf.  # noqa: E501
        :type: str
        """

        self._states = states

    @property
    def date_de_started(self):
        """Gets the date_de_started of this StudyEventCrf.  # noqa: E501


        :return: The date_de_started of this StudyEventCrf.  # noqa: E501
        :rtype: datetime
        """
        return self._date_de_started

    @date_de_started.setter
    def date_de_started(self, date_de_started):
        """Sets the date_de_started of this StudyEventCrf.


        :param date_de_started: The date_de_started of this StudyEventCrf.  # noqa: E501
        :type: datetime
        """

        self._date_de_started = date_de_started

    @property
    def migration_locked(self):
        """Gets the migration_locked of this StudyEventCrf.  # noqa: E501


        :return: The migration_locked of this StudyEventCrf.  # noqa: E501
        :rtype: bool
        """
        return self._migration_locked

    @migration_locked.setter
    def migration_locked(self, migration_locked):
        """Sets the migration_locked of this StudyEventCrf.


        :param migration_locked: The migration_locked of this StudyEventCrf.  # noqa: E501
        :type: bool
        """

        self._migration_locked = migration_locked

    @property
    def sdvcomment(self):
        """Gets the sdvcomment of this StudyEventCrf.  # noqa: E501


        :return: The sdvcomment of this StudyEventCrf.  # noqa: E501
        :rtype: str
        """
        return self._sdvcomment

    @sdvcomment.setter
    def sdvcomment(self, sdvcomment):
        """Sets the sdvcomment of this StudyEventCrf.


        :param sdvcomment: The sdvcomment of this StudyEventCrf.  # noqa: E501
        :type: str
        """

        self._sdvcomment = sdvcomment

    @property
    def ddecompleted_by_id(self):
        """Gets the ddecompleted_by_id of this StudyEventCrf.  # noqa: E501


        :return: The ddecompleted_by_id of this StudyEventCrf.  # noqa: E501
        :rtype: str
        """
        return self._ddecompleted_by_id

    @ddecompleted_by_id.setter
    def ddecompleted_by_id(self, ddecompleted_by_id):
        """Sets the ddecompleted_by_id of this StudyEventCrf.


        :param ddecompleted_by_id: The ddecompleted_by_id of this StudyEventCrf.  # noqa: E501
        :type: str
        """

        self._ddecompleted_by_id = ddecompleted_by_id

    @property
    def destarted_by_id(self):
        """Gets the destarted_by_id of this StudyEventCrf.  # noqa: E501


        :return: The destarted_by_id of this StudyEventCrf.  # noqa: E501
        :rtype: str
        """
        return self._destarted_by_id

    @destarted_by_id.setter
    def destarted_by_id(self, destarted_by_id):
        """Sets the destarted_by_id of this StudyEventCrf.


        :param destarted_by_id: The destarted_by_id of this StudyEventCrf.  # noqa: E501
        :type: str
        """

        self._destarted_by_id = destarted_by_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudyEventCrf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StudyEventCrf):
            return True

        return self.to_dict() != other.to_dict()
