# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class StudyRoleRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'menu_id': 'int',
        'application_id': 'int',
        'application_name': 'str',
        'parent_role_id': 'int',
        'display_sequence': 'int',
        'name': 'str',
        'description': 'str',
        'enabled': 'bool',
        'use_classic_menu': 'bool',
        'menu_buttons_identifier': 'str',
        'object_id': 'int',
        'permissions': 'list[StudyRoleComponentPermissionsRpc]'
    }

    attribute_map = {
        'id': 'id',
        'menu_id': 'menuId',
        'application_id': 'applicationId',
        'application_name': 'applicationName',
        'parent_role_id': 'parentRoleId',
        'display_sequence': 'displaySequence',
        'name': 'name',
        'description': 'description',
        'enabled': 'enabled',
        'use_classic_menu': 'useClassicMenu',
        'menu_buttons_identifier': 'menuButtonsIdentifier',
        'object_id': 'objectId',
        'permissions': 'permissions'
    }

    def __init__(self, id=None, menu_id=None, application_id=None, application_name=None, parent_role_id=None, display_sequence=None, name=None, description=None, enabled=None, use_classic_menu=None, menu_buttons_identifier=None, object_id=None, permissions=None, local_vars_configuration=None):  # noqa: E501
        """StudyRoleRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._menu_id = None
        self._application_id = None
        self._application_name = None
        self._parent_role_id = None
        self._display_sequence = None
        self._name = None
        self._description = None
        self._enabled = None
        self._use_classic_menu = None
        self._menu_buttons_identifier = None
        self._object_id = None
        self._permissions = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if menu_id is not None:
            self.menu_id = menu_id
        if application_id is not None:
            self.application_id = application_id
        if application_name is not None:
            self.application_name = application_name
        if parent_role_id is not None:
            self.parent_role_id = parent_role_id
        if display_sequence is not None:
            self.display_sequence = display_sequence
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if enabled is not None:
            self.enabled = enabled
        if use_classic_menu is not None:
            self.use_classic_menu = use_classic_menu
        if menu_buttons_identifier is not None:
            self.menu_buttons_identifier = menu_buttons_identifier
        if object_id is not None:
            self.object_id = object_id
        if permissions is not None:
            self.permissions = permissions

    @property
    def id(self):
        """Gets the id of this StudyRoleRpc.  # noqa: E501


        :return: The id of this StudyRoleRpc.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StudyRoleRpc.


        :param id: The id of this StudyRoleRpc.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def menu_id(self):
        """Gets the menu_id of this StudyRoleRpc.  # noqa: E501


        :return: The menu_id of this StudyRoleRpc.  # noqa: E501
        :rtype: int
        """
        return self._menu_id

    @menu_id.setter
    def menu_id(self, menu_id):
        """Sets the menu_id of this StudyRoleRpc.


        :param menu_id: The menu_id of this StudyRoleRpc.  # noqa: E501
        :type: int
        """

        self._menu_id = menu_id

    @property
    def application_id(self):
        """Gets the application_id of this StudyRoleRpc.  # noqa: E501


        :return: The application_id of this StudyRoleRpc.  # noqa: E501
        :rtype: int
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this StudyRoleRpc.


        :param application_id: The application_id of this StudyRoleRpc.  # noqa: E501
        :type: int
        """

        self._application_id = application_id

    @property
    def application_name(self):
        """Gets the application_name of this StudyRoleRpc.  # noqa: E501


        :return: The application_name of this StudyRoleRpc.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this StudyRoleRpc.


        :param application_name: The application_name of this StudyRoleRpc.  # noqa: E501
        :type: str
        """

        self._application_name = application_name

    @property
    def parent_role_id(self):
        """Gets the parent_role_id of this StudyRoleRpc.  # noqa: E501


        :return: The parent_role_id of this StudyRoleRpc.  # noqa: E501
        :rtype: int
        """
        return self._parent_role_id

    @parent_role_id.setter
    def parent_role_id(self, parent_role_id):
        """Sets the parent_role_id of this StudyRoleRpc.


        :param parent_role_id: The parent_role_id of this StudyRoleRpc.  # noqa: E501
        :type: int
        """

        self._parent_role_id = parent_role_id

    @property
    def display_sequence(self):
        """Gets the display_sequence of this StudyRoleRpc.  # noqa: E501


        :return: The display_sequence of this StudyRoleRpc.  # noqa: E501
        :rtype: int
        """
        return self._display_sequence

    @display_sequence.setter
    def display_sequence(self, display_sequence):
        """Sets the display_sequence of this StudyRoleRpc.


        :param display_sequence: The display_sequence of this StudyRoleRpc.  # noqa: E501
        :type: int
        """

        self._display_sequence = display_sequence

    @property
    def name(self):
        """Gets the name of this StudyRoleRpc.  # noqa: E501


        :return: The name of this StudyRoleRpc.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this StudyRoleRpc.


        :param name: The name of this StudyRoleRpc.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this StudyRoleRpc.  # noqa: E501


        :return: The description of this StudyRoleRpc.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this StudyRoleRpc.


        :param description: The description of this StudyRoleRpc.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enabled(self):
        """Gets the enabled of this StudyRoleRpc.  # noqa: E501


        :return: The enabled of this StudyRoleRpc.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this StudyRoleRpc.


        :param enabled: The enabled of this StudyRoleRpc.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def use_classic_menu(self):
        """Gets the use_classic_menu of this StudyRoleRpc.  # noqa: E501


        :return: The use_classic_menu of this StudyRoleRpc.  # noqa: E501
        :rtype: bool
        """
        return self._use_classic_menu

    @use_classic_menu.setter
    def use_classic_menu(self, use_classic_menu):
        """Sets the use_classic_menu of this StudyRoleRpc.


        :param use_classic_menu: The use_classic_menu of this StudyRoleRpc.  # noqa: E501
        :type: bool
        """

        self._use_classic_menu = use_classic_menu

    @property
    def menu_buttons_identifier(self):
        """Gets the menu_buttons_identifier of this StudyRoleRpc.  # noqa: E501


        :return: The menu_buttons_identifier of this StudyRoleRpc.  # noqa: E501
        :rtype: str
        """
        return self._menu_buttons_identifier

    @menu_buttons_identifier.setter
    def menu_buttons_identifier(self, menu_buttons_identifier):
        """Sets the menu_buttons_identifier of this StudyRoleRpc.


        :param menu_buttons_identifier: The menu_buttons_identifier of this StudyRoleRpc.  # noqa: E501
        :type: str
        """

        self._menu_buttons_identifier = menu_buttons_identifier

    @property
    def object_id(self):
        """Gets the object_id of this StudyRoleRpc.  # noqa: E501


        :return: The object_id of this StudyRoleRpc.  # noqa: E501
        :rtype: int
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this StudyRoleRpc.


        :param object_id: The object_id of this StudyRoleRpc.  # noqa: E501
        :type: int
        """

        self._object_id = object_id

    @property
    def permissions(self):
        """Gets the permissions of this StudyRoleRpc.  # noqa: E501


        :return: The permissions of this StudyRoleRpc.  # noqa: E501
        :rtype: list[StudyRoleComponentPermissionsRpc]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this StudyRoleRpc.


        :param permissions: The permissions of this StudyRoleRpc.  # noqa: E501
        :type: list[StudyRoleComponentPermissionsRpc]
        """

        self._permissions = permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudyRoleRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StudyRoleRpc):
            return True

        return self.to_dict() != other.to_dict()
