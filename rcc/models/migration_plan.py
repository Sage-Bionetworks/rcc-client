# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class MigrationPlan(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'migration_branching_logic': 'list[MigrationBranchingLogic]',
        'migration_calculated_fields': 'list[MigrationCalculatedFields]',
        'migration_cr_fs': 'list[MigrationCRFs]',
        'migration_events': 'list[MigrationEvents]',
        'migration_mapped_items': 'list[MigrationMappedItems]',
        'migration_obsolete_cr_fs': 'list[MigrationObsoleteCRFs]',
        'migration_obsolete_items': 'list[MigrationObsoleteItems]',
        'migration_plan_subjects': 'list[MigrationPlanSubjects]',
        'migration_resolved_branching_logic': 'list[MigrationResolvedBranchingLogic]',
        'migration_resolved_calculated_fields': 'list[MigrationResolvedCalculatedFields]',
        'migration_soft_validation_items': 'list[MigrationSoftValidationItems]',
        'migration_subjects': 'list[MigrationSubjects]',
        'migration_violations': 'list[MigrationViolations]',
        'migration_sites': 'list[MigrationSites]',
        'title': 'str',
        'status': 'int',
        'migration_subject_option_code': 'str',
        'condition_send_time_option_code': 'str',
        'condition_send_time_lag_days': 'int',
        'condition_send_time_lag_hours': 'int',
        'condition_send_time_lag_minutes': 'int',
        'condition_send_next_day_type_code': 'str',
        'condition_send_next_time': 'datetime',
        'condition_send_next_time_exact': 'datetime',
        'subject_number': 'int',
        'owner': 'str',
        'create_date': 'datetime'
    }

    attribute_map = {
        'migration_branching_logic': 'migrationBranchingLogic',
        'migration_calculated_fields': 'migrationCalculatedFields',
        'migration_cr_fs': 'migrationCRFs',
        'migration_events': 'migrationEvents',
        'migration_mapped_items': 'migrationMappedItems',
        'migration_obsolete_cr_fs': 'migrationObsoleteCRFs',
        'migration_obsolete_items': 'migrationObsoleteItems',
        'migration_plan_subjects': 'migrationPlanSubjects',
        'migration_resolved_branching_logic': 'migrationResolvedBranchingLogic',
        'migration_resolved_calculated_fields': 'migrationResolvedCalculatedFields',
        'migration_soft_validation_items': 'migrationSoftValidationItems',
        'migration_subjects': 'migrationSubjects',
        'migration_violations': 'migrationViolations',
        'migration_sites': 'migrationSites',
        'title': 'title',
        'status': 'status',
        'migration_subject_option_code': 'migrationSubjectOptionCode',
        'condition_send_time_option_code': 'conditionSendTimeOptionCode',
        'condition_send_time_lag_days': 'conditionSendTimeLagDays',
        'condition_send_time_lag_hours': 'conditionSendTimeLagHours',
        'condition_send_time_lag_minutes': 'conditionSendTimeLagMinutes',
        'condition_send_next_day_type_code': 'conditionSendNextDayTypeCode',
        'condition_send_next_time': 'conditionSendNextTime',
        'condition_send_next_time_exact': 'conditionSendNextTimeExact',
        'subject_number': 'subjectNumber',
        'owner': 'owner',
        'create_date': 'createDate'
    }

    def __init__(self, migration_branching_logic=None, migration_calculated_fields=None, migration_cr_fs=None, migration_events=None, migration_mapped_items=None, migration_obsolete_cr_fs=None, migration_obsolete_items=None, migration_plan_subjects=None, migration_resolved_branching_logic=None, migration_resolved_calculated_fields=None, migration_soft_validation_items=None, migration_subjects=None, migration_violations=None, migration_sites=None, title=None, status=None, migration_subject_option_code=None, condition_send_time_option_code=None, condition_send_time_lag_days=None, condition_send_time_lag_hours=None, condition_send_time_lag_minutes=None, condition_send_next_day_type_code=None, condition_send_next_time=None, condition_send_next_time_exact=None, subject_number=None, owner=None, create_date=None, local_vars_configuration=None):  # noqa: E501
        """MigrationPlan - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._migration_branching_logic = None
        self._migration_calculated_fields = None
        self._migration_cr_fs = None
        self._migration_events = None
        self._migration_mapped_items = None
        self._migration_obsolete_cr_fs = None
        self._migration_obsolete_items = None
        self._migration_plan_subjects = None
        self._migration_resolved_branching_logic = None
        self._migration_resolved_calculated_fields = None
        self._migration_soft_validation_items = None
        self._migration_subjects = None
        self._migration_violations = None
        self._migration_sites = None
        self._title = None
        self._status = None
        self._migration_subject_option_code = None
        self._condition_send_time_option_code = None
        self._condition_send_time_lag_days = None
        self._condition_send_time_lag_hours = None
        self._condition_send_time_lag_minutes = None
        self._condition_send_next_day_type_code = None
        self._condition_send_next_time = None
        self._condition_send_next_time_exact = None
        self._subject_number = None
        self._owner = None
        self._create_date = None
        self.discriminator = None

        if migration_branching_logic is not None:
            self.migration_branching_logic = migration_branching_logic
        if migration_calculated_fields is not None:
            self.migration_calculated_fields = migration_calculated_fields
        if migration_cr_fs is not None:
            self.migration_cr_fs = migration_cr_fs
        if migration_events is not None:
            self.migration_events = migration_events
        if migration_mapped_items is not None:
            self.migration_mapped_items = migration_mapped_items
        if migration_obsolete_cr_fs is not None:
            self.migration_obsolete_cr_fs = migration_obsolete_cr_fs
        if migration_obsolete_items is not None:
            self.migration_obsolete_items = migration_obsolete_items
        if migration_plan_subjects is not None:
            self.migration_plan_subjects = migration_plan_subjects
        if migration_resolved_branching_logic is not None:
            self.migration_resolved_branching_logic = migration_resolved_branching_logic
        if migration_resolved_calculated_fields is not None:
            self.migration_resolved_calculated_fields = migration_resolved_calculated_fields
        if migration_soft_validation_items is not None:
            self.migration_soft_validation_items = migration_soft_validation_items
        if migration_subjects is not None:
            self.migration_subjects = migration_subjects
        if migration_violations is not None:
            self.migration_violations = migration_violations
        if migration_sites is not None:
            self.migration_sites = migration_sites
        if title is not None:
            self.title = title
        if status is not None:
            self.status = status
        if migration_subject_option_code is not None:
            self.migration_subject_option_code = migration_subject_option_code
        if condition_send_time_option_code is not None:
            self.condition_send_time_option_code = condition_send_time_option_code
        if condition_send_time_lag_days is not None:
            self.condition_send_time_lag_days = condition_send_time_lag_days
        if condition_send_time_lag_hours is not None:
            self.condition_send_time_lag_hours = condition_send_time_lag_hours
        if condition_send_time_lag_minutes is not None:
            self.condition_send_time_lag_minutes = condition_send_time_lag_minutes
        if condition_send_next_day_type_code is not None:
            self.condition_send_next_day_type_code = condition_send_next_day_type_code
        if condition_send_next_time is not None:
            self.condition_send_next_time = condition_send_next_time
        if condition_send_next_time_exact is not None:
            self.condition_send_next_time_exact = condition_send_next_time_exact
        if subject_number is not None:
            self.subject_number = subject_number
        if owner is not None:
            self.owner = owner
        if create_date is not None:
            self.create_date = create_date

    @property
    def migration_branching_logic(self):
        """Gets the migration_branching_logic of this MigrationPlan.  # noqa: E501


        :return: The migration_branching_logic of this MigrationPlan.  # noqa: E501
        :rtype: list[MigrationBranchingLogic]
        """
        return self._migration_branching_logic

    @migration_branching_logic.setter
    def migration_branching_logic(self, migration_branching_logic):
        """Sets the migration_branching_logic of this MigrationPlan.


        :param migration_branching_logic: The migration_branching_logic of this MigrationPlan.  # noqa: E501
        :type: list[MigrationBranchingLogic]
        """

        self._migration_branching_logic = migration_branching_logic

    @property
    def migration_calculated_fields(self):
        """Gets the migration_calculated_fields of this MigrationPlan.  # noqa: E501


        :return: The migration_calculated_fields of this MigrationPlan.  # noqa: E501
        :rtype: list[MigrationCalculatedFields]
        """
        return self._migration_calculated_fields

    @migration_calculated_fields.setter
    def migration_calculated_fields(self, migration_calculated_fields):
        """Sets the migration_calculated_fields of this MigrationPlan.


        :param migration_calculated_fields: The migration_calculated_fields of this MigrationPlan.  # noqa: E501
        :type: list[MigrationCalculatedFields]
        """

        self._migration_calculated_fields = migration_calculated_fields

    @property
    def migration_cr_fs(self):
        """Gets the migration_cr_fs of this MigrationPlan.  # noqa: E501


        :return: The migration_cr_fs of this MigrationPlan.  # noqa: E501
        :rtype: list[MigrationCRFs]
        """
        return self._migration_cr_fs

    @migration_cr_fs.setter
    def migration_cr_fs(self, migration_cr_fs):
        """Sets the migration_cr_fs of this MigrationPlan.


        :param migration_cr_fs: The migration_cr_fs of this MigrationPlan.  # noqa: E501
        :type: list[MigrationCRFs]
        """

        self._migration_cr_fs = migration_cr_fs

    @property
    def migration_events(self):
        """Gets the migration_events of this MigrationPlan.  # noqa: E501


        :return: The migration_events of this MigrationPlan.  # noqa: E501
        :rtype: list[MigrationEvents]
        """
        return self._migration_events

    @migration_events.setter
    def migration_events(self, migration_events):
        """Sets the migration_events of this MigrationPlan.


        :param migration_events: The migration_events of this MigrationPlan.  # noqa: E501
        :type: list[MigrationEvents]
        """

        self._migration_events = migration_events

    @property
    def migration_mapped_items(self):
        """Gets the migration_mapped_items of this MigrationPlan.  # noqa: E501


        :return: The migration_mapped_items of this MigrationPlan.  # noqa: E501
        :rtype: list[MigrationMappedItems]
        """
        return self._migration_mapped_items

    @migration_mapped_items.setter
    def migration_mapped_items(self, migration_mapped_items):
        """Sets the migration_mapped_items of this MigrationPlan.


        :param migration_mapped_items: The migration_mapped_items of this MigrationPlan.  # noqa: E501
        :type: list[MigrationMappedItems]
        """

        self._migration_mapped_items = migration_mapped_items

    @property
    def migration_obsolete_cr_fs(self):
        """Gets the migration_obsolete_cr_fs of this MigrationPlan.  # noqa: E501


        :return: The migration_obsolete_cr_fs of this MigrationPlan.  # noqa: E501
        :rtype: list[MigrationObsoleteCRFs]
        """
        return self._migration_obsolete_cr_fs

    @migration_obsolete_cr_fs.setter
    def migration_obsolete_cr_fs(self, migration_obsolete_cr_fs):
        """Sets the migration_obsolete_cr_fs of this MigrationPlan.


        :param migration_obsolete_cr_fs: The migration_obsolete_cr_fs of this MigrationPlan.  # noqa: E501
        :type: list[MigrationObsoleteCRFs]
        """

        self._migration_obsolete_cr_fs = migration_obsolete_cr_fs

    @property
    def migration_obsolete_items(self):
        """Gets the migration_obsolete_items of this MigrationPlan.  # noqa: E501


        :return: The migration_obsolete_items of this MigrationPlan.  # noqa: E501
        :rtype: list[MigrationObsoleteItems]
        """
        return self._migration_obsolete_items

    @migration_obsolete_items.setter
    def migration_obsolete_items(self, migration_obsolete_items):
        """Sets the migration_obsolete_items of this MigrationPlan.


        :param migration_obsolete_items: The migration_obsolete_items of this MigrationPlan.  # noqa: E501
        :type: list[MigrationObsoleteItems]
        """

        self._migration_obsolete_items = migration_obsolete_items

    @property
    def migration_plan_subjects(self):
        """Gets the migration_plan_subjects of this MigrationPlan.  # noqa: E501


        :return: The migration_plan_subjects of this MigrationPlan.  # noqa: E501
        :rtype: list[MigrationPlanSubjects]
        """
        return self._migration_plan_subjects

    @migration_plan_subjects.setter
    def migration_plan_subjects(self, migration_plan_subjects):
        """Sets the migration_plan_subjects of this MigrationPlan.


        :param migration_plan_subjects: The migration_plan_subjects of this MigrationPlan.  # noqa: E501
        :type: list[MigrationPlanSubjects]
        """

        self._migration_plan_subjects = migration_plan_subjects

    @property
    def migration_resolved_branching_logic(self):
        """Gets the migration_resolved_branching_logic of this MigrationPlan.  # noqa: E501


        :return: The migration_resolved_branching_logic of this MigrationPlan.  # noqa: E501
        :rtype: list[MigrationResolvedBranchingLogic]
        """
        return self._migration_resolved_branching_logic

    @migration_resolved_branching_logic.setter
    def migration_resolved_branching_logic(self, migration_resolved_branching_logic):
        """Sets the migration_resolved_branching_logic of this MigrationPlan.


        :param migration_resolved_branching_logic: The migration_resolved_branching_logic of this MigrationPlan.  # noqa: E501
        :type: list[MigrationResolvedBranchingLogic]
        """

        self._migration_resolved_branching_logic = migration_resolved_branching_logic

    @property
    def migration_resolved_calculated_fields(self):
        """Gets the migration_resolved_calculated_fields of this MigrationPlan.  # noqa: E501


        :return: The migration_resolved_calculated_fields of this MigrationPlan.  # noqa: E501
        :rtype: list[MigrationResolvedCalculatedFields]
        """
        return self._migration_resolved_calculated_fields

    @migration_resolved_calculated_fields.setter
    def migration_resolved_calculated_fields(self, migration_resolved_calculated_fields):
        """Sets the migration_resolved_calculated_fields of this MigrationPlan.


        :param migration_resolved_calculated_fields: The migration_resolved_calculated_fields of this MigrationPlan.  # noqa: E501
        :type: list[MigrationResolvedCalculatedFields]
        """

        self._migration_resolved_calculated_fields = migration_resolved_calculated_fields

    @property
    def migration_soft_validation_items(self):
        """Gets the migration_soft_validation_items of this MigrationPlan.  # noqa: E501


        :return: The migration_soft_validation_items of this MigrationPlan.  # noqa: E501
        :rtype: list[MigrationSoftValidationItems]
        """
        return self._migration_soft_validation_items

    @migration_soft_validation_items.setter
    def migration_soft_validation_items(self, migration_soft_validation_items):
        """Sets the migration_soft_validation_items of this MigrationPlan.


        :param migration_soft_validation_items: The migration_soft_validation_items of this MigrationPlan.  # noqa: E501
        :type: list[MigrationSoftValidationItems]
        """

        self._migration_soft_validation_items = migration_soft_validation_items

    @property
    def migration_subjects(self):
        """Gets the migration_subjects of this MigrationPlan.  # noqa: E501


        :return: The migration_subjects of this MigrationPlan.  # noqa: E501
        :rtype: list[MigrationSubjects]
        """
        return self._migration_subjects

    @migration_subjects.setter
    def migration_subjects(self, migration_subjects):
        """Sets the migration_subjects of this MigrationPlan.


        :param migration_subjects: The migration_subjects of this MigrationPlan.  # noqa: E501
        :type: list[MigrationSubjects]
        """

        self._migration_subjects = migration_subjects

    @property
    def migration_violations(self):
        """Gets the migration_violations of this MigrationPlan.  # noqa: E501


        :return: The migration_violations of this MigrationPlan.  # noqa: E501
        :rtype: list[MigrationViolations]
        """
        return self._migration_violations

    @migration_violations.setter
    def migration_violations(self, migration_violations):
        """Sets the migration_violations of this MigrationPlan.


        :param migration_violations: The migration_violations of this MigrationPlan.  # noqa: E501
        :type: list[MigrationViolations]
        """

        self._migration_violations = migration_violations

    @property
    def migration_sites(self):
        """Gets the migration_sites of this MigrationPlan.  # noqa: E501


        :return: The migration_sites of this MigrationPlan.  # noqa: E501
        :rtype: list[MigrationSites]
        """
        return self._migration_sites

    @migration_sites.setter
    def migration_sites(self, migration_sites):
        """Sets the migration_sites of this MigrationPlan.


        :param migration_sites: The migration_sites of this MigrationPlan.  # noqa: E501
        :type: list[MigrationSites]
        """

        self._migration_sites = migration_sites

    @property
    def title(self):
        """Gets the title of this MigrationPlan.  # noqa: E501


        :return: The title of this MigrationPlan.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this MigrationPlan.


        :param title: The title of this MigrationPlan.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def status(self):
        """Gets the status of this MigrationPlan.  # noqa: E501


        :return: The status of this MigrationPlan.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MigrationPlan.


        :param status: The status of this MigrationPlan.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def migration_subject_option_code(self):
        """Gets the migration_subject_option_code of this MigrationPlan.  # noqa: E501


        :return: The migration_subject_option_code of this MigrationPlan.  # noqa: E501
        :rtype: str
        """
        return self._migration_subject_option_code

    @migration_subject_option_code.setter
    def migration_subject_option_code(self, migration_subject_option_code):
        """Sets the migration_subject_option_code of this MigrationPlan.


        :param migration_subject_option_code: The migration_subject_option_code of this MigrationPlan.  # noqa: E501
        :type: str
        """

        self._migration_subject_option_code = migration_subject_option_code

    @property
    def condition_send_time_option_code(self):
        """Gets the condition_send_time_option_code of this MigrationPlan.  # noqa: E501


        :return: The condition_send_time_option_code of this MigrationPlan.  # noqa: E501
        :rtype: str
        """
        return self._condition_send_time_option_code

    @condition_send_time_option_code.setter
    def condition_send_time_option_code(self, condition_send_time_option_code):
        """Sets the condition_send_time_option_code of this MigrationPlan.


        :param condition_send_time_option_code: The condition_send_time_option_code of this MigrationPlan.  # noqa: E501
        :type: str
        """

        self._condition_send_time_option_code = condition_send_time_option_code

    @property
    def condition_send_time_lag_days(self):
        """Gets the condition_send_time_lag_days of this MigrationPlan.  # noqa: E501


        :return: The condition_send_time_lag_days of this MigrationPlan.  # noqa: E501
        :rtype: int
        """
        return self._condition_send_time_lag_days

    @condition_send_time_lag_days.setter
    def condition_send_time_lag_days(self, condition_send_time_lag_days):
        """Sets the condition_send_time_lag_days of this MigrationPlan.


        :param condition_send_time_lag_days: The condition_send_time_lag_days of this MigrationPlan.  # noqa: E501
        :type: int
        """

        self._condition_send_time_lag_days = condition_send_time_lag_days

    @property
    def condition_send_time_lag_hours(self):
        """Gets the condition_send_time_lag_hours of this MigrationPlan.  # noqa: E501


        :return: The condition_send_time_lag_hours of this MigrationPlan.  # noqa: E501
        :rtype: int
        """
        return self._condition_send_time_lag_hours

    @condition_send_time_lag_hours.setter
    def condition_send_time_lag_hours(self, condition_send_time_lag_hours):
        """Sets the condition_send_time_lag_hours of this MigrationPlan.


        :param condition_send_time_lag_hours: The condition_send_time_lag_hours of this MigrationPlan.  # noqa: E501
        :type: int
        """

        self._condition_send_time_lag_hours = condition_send_time_lag_hours

    @property
    def condition_send_time_lag_minutes(self):
        """Gets the condition_send_time_lag_minutes of this MigrationPlan.  # noqa: E501


        :return: The condition_send_time_lag_minutes of this MigrationPlan.  # noqa: E501
        :rtype: int
        """
        return self._condition_send_time_lag_minutes

    @condition_send_time_lag_minutes.setter
    def condition_send_time_lag_minutes(self, condition_send_time_lag_minutes):
        """Sets the condition_send_time_lag_minutes of this MigrationPlan.


        :param condition_send_time_lag_minutes: The condition_send_time_lag_minutes of this MigrationPlan.  # noqa: E501
        :type: int
        """

        self._condition_send_time_lag_minutes = condition_send_time_lag_minutes

    @property
    def condition_send_next_day_type_code(self):
        """Gets the condition_send_next_day_type_code of this MigrationPlan.  # noqa: E501


        :return: The condition_send_next_day_type_code of this MigrationPlan.  # noqa: E501
        :rtype: str
        """
        return self._condition_send_next_day_type_code

    @condition_send_next_day_type_code.setter
    def condition_send_next_day_type_code(self, condition_send_next_day_type_code):
        """Sets the condition_send_next_day_type_code of this MigrationPlan.


        :param condition_send_next_day_type_code: The condition_send_next_day_type_code of this MigrationPlan.  # noqa: E501
        :type: str
        """

        self._condition_send_next_day_type_code = condition_send_next_day_type_code

    @property
    def condition_send_next_time(self):
        """Gets the condition_send_next_time of this MigrationPlan.  # noqa: E501


        :return: The condition_send_next_time of this MigrationPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._condition_send_next_time

    @condition_send_next_time.setter
    def condition_send_next_time(self, condition_send_next_time):
        """Sets the condition_send_next_time of this MigrationPlan.


        :param condition_send_next_time: The condition_send_next_time of this MigrationPlan.  # noqa: E501
        :type: datetime
        """

        self._condition_send_next_time = condition_send_next_time

    @property
    def condition_send_next_time_exact(self):
        """Gets the condition_send_next_time_exact of this MigrationPlan.  # noqa: E501


        :return: The condition_send_next_time_exact of this MigrationPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._condition_send_next_time_exact

    @condition_send_next_time_exact.setter
    def condition_send_next_time_exact(self, condition_send_next_time_exact):
        """Sets the condition_send_next_time_exact of this MigrationPlan.


        :param condition_send_next_time_exact: The condition_send_next_time_exact of this MigrationPlan.  # noqa: E501
        :type: datetime
        """

        self._condition_send_next_time_exact = condition_send_next_time_exact

    @property
    def subject_number(self):
        """Gets the subject_number of this MigrationPlan.  # noqa: E501


        :return: The subject_number of this MigrationPlan.  # noqa: E501
        :rtype: int
        """
        return self._subject_number

    @subject_number.setter
    def subject_number(self, subject_number):
        """Sets the subject_number of this MigrationPlan.


        :param subject_number: The subject_number of this MigrationPlan.  # noqa: E501
        :type: int
        """

        self._subject_number = subject_number

    @property
    def owner(self):
        """Gets the owner of this MigrationPlan.  # noqa: E501


        :return: The owner of this MigrationPlan.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this MigrationPlan.


        :param owner: The owner of this MigrationPlan.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def create_date(self):
        """Gets the create_date of this MigrationPlan.  # noqa: E501


        :return: The create_date of this MigrationPlan.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date):
        """Sets the create_date of this MigrationPlan.


        :param create_date: The create_date of this MigrationPlan.  # noqa: E501
        :type: datetime
        """

        self._create_date = create_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationPlan):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, MigrationPlan):
            return True

        return self.to_dict() != other.to_dict()
