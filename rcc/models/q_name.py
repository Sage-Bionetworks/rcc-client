# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class QName(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'namespace_uri': 'str',
        'local_part': 'str',
        'prefix': 'str'
    }

    attribute_map = {
        'namespace_uri': 'namespaceURI',
        'local_part': 'localPart',
        'prefix': 'prefix'
    }

    def __init__(self, namespace_uri=None, local_part=None, prefix=None, local_vars_configuration=None):  # noqa: E501
        """QName - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._namespace_uri = None
        self._local_part = None
        self._prefix = None
        self.discriminator = None

        if namespace_uri is not None:
            self.namespace_uri = namespace_uri
        if local_part is not None:
            self.local_part = local_part
        if prefix is not None:
            self.prefix = prefix

    @property
    def namespace_uri(self):
        """Gets the namespace_uri of this QName.  # noqa: E501


        :return: The namespace_uri of this QName.  # noqa: E501
        :rtype: str
        """
        return self._namespace_uri

    @namespace_uri.setter
    def namespace_uri(self, namespace_uri):
        """Sets the namespace_uri of this QName.


        :param namespace_uri: The namespace_uri of this QName.  # noqa: E501
        :type: str
        """

        self._namespace_uri = namespace_uri

    @property
    def local_part(self):
        """Gets the local_part of this QName.  # noqa: E501


        :return: The local_part of this QName.  # noqa: E501
        :rtype: str
        """
        return self._local_part

    @local_part.setter
    def local_part(self, local_part):
        """Sets the local_part of this QName.


        :param local_part: The local_part of this QName.  # noqa: E501
        :type: str
        """

        self._local_part = local_part

    @property
    def prefix(self):
        """Gets the prefix of this QName.  # noqa: E501


        :return: The prefix of this QName.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this QName.


        :param prefix: The prefix of this QName.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QName):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QName):
            return True

        return self.to_dict() != other.to_dict()
