# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class SurveyLoginConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'survey_login_field': 'list[SurveyLoginField]',
        'login_enabled': 'int',
        'min_required_field_number': 'int',
        'error_message': 'str',
        'failed_login_attempts_number': 'int',
        'lockout_time': 'int',
        'applicable_surveys_type': 'str',
        'login_time': 'datetime'
    }

    attribute_map = {
        'survey_login_field': 'surveyLoginField',
        'login_enabled': 'loginEnabled',
        'min_required_field_number': 'minRequiredFieldNumber',
        'error_message': 'errorMessage',
        'failed_login_attempts_number': 'failedLoginAttemptsNumber',
        'lockout_time': 'lockoutTime',
        'applicable_surveys_type': 'applicableSurveysType',
        'login_time': 'loginTime'
    }

    def __init__(self, survey_login_field=None, login_enabled=None, min_required_field_number=None, error_message=None, failed_login_attempts_number=None, lockout_time=None, applicable_surveys_type=None, login_time=None, local_vars_configuration=None):  # noqa: E501
        """SurveyLoginConfiguration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._survey_login_field = None
        self._login_enabled = None
        self._min_required_field_number = None
        self._error_message = None
        self._failed_login_attempts_number = None
        self._lockout_time = None
        self._applicable_surveys_type = None
        self._login_time = None
        self.discriminator = None

        if survey_login_field is not None:
            self.survey_login_field = survey_login_field
        if login_enabled is not None:
            self.login_enabled = login_enabled
        if min_required_field_number is not None:
            self.min_required_field_number = min_required_field_number
        if error_message is not None:
            self.error_message = error_message
        if failed_login_attempts_number is not None:
            self.failed_login_attempts_number = failed_login_attempts_number
        if lockout_time is not None:
            self.lockout_time = lockout_time
        if applicable_surveys_type is not None:
            self.applicable_surveys_type = applicable_surveys_type
        if login_time is not None:
            self.login_time = login_time

    @property
    def survey_login_field(self):
        """Gets the survey_login_field of this SurveyLoginConfiguration.  # noqa: E501


        :return: The survey_login_field of this SurveyLoginConfiguration.  # noqa: E501
        :rtype: list[SurveyLoginField]
        """
        return self._survey_login_field

    @survey_login_field.setter
    def survey_login_field(self, survey_login_field):
        """Sets the survey_login_field of this SurveyLoginConfiguration.


        :param survey_login_field: The survey_login_field of this SurveyLoginConfiguration.  # noqa: E501
        :type: list[SurveyLoginField]
        """

        self._survey_login_field = survey_login_field

    @property
    def login_enabled(self):
        """Gets the login_enabled of this SurveyLoginConfiguration.  # noqa: E501


        :return: The login_enabled of this SurveyLoginConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._login_enabled

    @login_enabled.setter
    def login_enabled(self, login_enabled):
        """Sets the login_enabled of this SurveyLoginConfiguration.


        :param login_enabled: The login_enabled of this SurveyLoginConfiguration.  # noqa: E501
        :type: int
        """

        self._login_enabled = login_enabled

    @property
    def min_required_field_number(self):
        """Gets the min_required_field_number of this SurveyLoginConfiguration.  # noqa: E501


        :return: The min_required_field_number of this SurveyLoginConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._min_required_field_number

    @min_required_field_number.setter
    def min_required_field_number(self, min_required_field_number):
        """Sets the min_required_field_number of this SurveyLoginConfiguration.


        :param min_required_field_number: The min_required_field_number of this SurveyLoginConfiguration.  # noqa: E501
        :type: int
        """

        self._min_required_field_number = min_required_field_number

    @property
    def error_message(self):
        """Gets the error_message of this SurveyLoginConfiguration.  # noqa: E501


        :return: The error_message of this SurveyLoginConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this SurveyLoginConfiguration.


        :param error_message: The error_message of this SurveyLoginConfiguration.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def failed_login_attempts_number(self):
        """Gets the failed_login_attempts_number of this SurveyLoginConfiguration.  # noqa: E501


        :return: The failed_login_attempts_number of this SurveyLoginConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._failed_login_attempts_number

    @failed_login_attempts_number.setter
    def failed_login_attempts_number(self, failed_login_attempts_number):
        """Sets the failed_login_attempts_number of this SurveyLoginConfiguration.


        :param failed_login_attempts_number: The failed_login_attempts_number of this SurveyLoginConfiguration.  # noqa: E501
        :type: int
        """

        self._failed_login_attempts_number = failed_login_attempts_number

    @property
    def lockout_time(self):
        """Gets the lockout_time of this SurveyLoginConfiguration.  # noqa: E501


        :return: The lockout_time of this SurveyLoginConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._lockout_time

    @lockout_time.setter
    def lockout_time(self, lockout_time):
        """Sets the lockout_time of this SurveyLoginConfiguration.


        :param lockout_time: The lockout_time of this SurveyLoginConfiguration.  # noqa: E501
        :type: int
        """

        self._lockout_time = lockout_time

    @property
    def applicable_surveys_type(self):
        """Gets the applicable_surveys_type of this SurveyLoginConfiguration.  # noqa: E501


        :return: The applicable_surveys_type of this SurveyLoginConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._applicable_surveys_type

    @applicable_surveys_type.setter
    def applicable_surveys_type(self, applicable_surveys_type):
        """Sets the applicable_surveys_type of this SurveyLoginConfiguration.


        :param applicable_surveys_type: The applicable_surveys_type of this SurveyLoginConfiguration.  # noqa: E501
        :type: str
        """

        self._applicable_surveys_type = applicable_surveys_type

    @property
    def login_time(self):
        """Gets the login_time of this SurveyLoginConfiguration.  # noqa: E501


        :return: The login_time of this SurveyLoginConfiguration.  # noqa: E501
        :rtype: datetime
        """
        return self._login_time

    @login_time.setter
    def login_time(self, login_time):
        """Sets the login_time of this SurveyLoginConfiguration.


        :param login_time: The login_time of this SurveyLoginConfiguration.  # noqa: E501
        :type: datetime
        """

        self._login_time = login_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SurveyLoginConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SurveyLoginConfiguration):
            return True

        return self.to_dict() != other.to_dict()
