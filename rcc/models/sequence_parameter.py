# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class SequenceParameter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'sequense_type': 'str',
        'field': 'str',
        'value': 'str',
        'sequence': 'int',
        'key': 'str',
        'value_start_from': 'int'
    }

    attribute_map = {
        'sequense_type': 'sequenseType',
        'field': 'field',
        'value': 'value',
        'sequence': 'sequence',
        'key': 'key',
        'value_start_from': 'valueStartFrom'
    }

    def __init__(self, sequense_type=None, field=None, value=None, sequence=None, key=None, value_start_from=None, local_vars_configuration=None):  # noqa: E501
        """SequenceParameter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._sequense_type = None
        self._field = None
        self._value = None
        self._sequence = None
        self._key = None
        self._value_start_from = None
        self.discriminator = None

        if sequense_type is not None:
            self.sequense_type = sequense_type
        if field is not None:
            self.field = field
        if value is not None:
            self.value = value
        if sequence is not None:
            self.sequence = sequence
        if key is not None:
            self.key = key
        if value_start_from is not None:
            self.value_start_from = value_start_from

    @property
    def sequense_type(self):
        """Gets the sequense_type of this SequenceParameter.  # noqa: E501


        :return: The sequense_type of this SequenceParameter.  # noqa: E501
        :rtype: str
        """
        return self._sequense_type

    @sequense_type.setter
    def sequense_type(self, sequense_type):
        """Sets the sequense_type of this SequenceParameter.


        :param sequense_type: The sequense_type of this SequenceParameter.  # noqa: E501
        :type: str
        """

        self._sequense_type = sequense_type

    @property
    def field(self):
        """Gets the field of this SequenceParameter.  # noqa: E501


        :return: The field of this SequenceParameter.  # noqa: E501
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this SequenceParameter.


        :param field: The field of this SequenceParameter.  # noqa: E501
        :type: str
        """

        self._field = field

    @property
    def value(self):
        """Gets the value of this SequenceParameter.  # noqa: E501


        :return: The value of this SequenceParameter.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this SequenceParameter.


        :param value: The value of this SequenceParameter.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def sequence(self):
        """Gets the sequence of this SequenceParameter.  # noqa: E501


        :return: The sequence of this SequenceParameter.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this SequenceParameter.


        :param sequence: The sequence of this SequenceParameter.  # noqa: E501
        :type: int
        """

        self._sequence = sequence

    @property
    def key(self):
        """Gets the key of this SequenceParameter.  # noqa: E501


        :return: The key of this SequenceParameter.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SequenceParameter.


        :param key: The key of this SequenceParameter.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def value_start_from(self):
        """Gets the value_start_from of this SequenceParameter.  # noqa: E501


        :return: The value_start_from of this SequenceParameter.  # noqa: E501
        :rtype: int
        """
        return self._value_start_from

    @value_start_from.setter
    def value_start_from(self, value_start_from):
        """Sets the value_start_from of this SequenceParameter.


        :param value_start_from: The value_start_from of this SequenceParameter.  # noqa: E501
        :type: int
        """

        self._value_start_from = value_start_from

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SequenceParameter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SequenceParameter):
            return True

        return self.to_dict() != other.to_dict()
