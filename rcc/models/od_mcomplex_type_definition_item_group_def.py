# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ODMcomplexTypeDefinitionItemGroupDef(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'ODMcomplexTypeDefinitionDescription',
        'item_ref': 'list[ODMcomplexTypeDefinitionItemRef]',
        'alias': 'list[ODMcomplexTypeDefinitionAlias]',
        'oid': 'str',
        'name': 'str',
        'repeating': 'str',
        'is_reference_data': 'str',
        'domain': 'str',
        'origin': 'str',
        'role': 'str',
        'purpose': 'str',
        'comment': 'str',
        'item_group_definition': 'ItemGroupDefinition',
        'sasdataset_name': 'str'
    }

    attribute_map = {
        'description': 'description',
        'item_ref': 'itemRef',
        'alias': 'alias',
        'oid': 'oid',
        'name': 'name',
        'repeating': 'repeating',
        'is_reference_data': 'isReferenceData',
        'domain': 'domain',
        'origin': 'origin',
        'role': 'role',
        'purpose': 'purpose',
        'comment': 'comment',
        'item_group_definition': 'itemGroupDefinition',
        'sasdataset_name': 'sasdatasetName'
    }

    def __init__(self, description=None, item_ref=None, alias=None, oid=None, name=None, repeating=None, is_reference_data=None, domain=None, origin=None, role=None, purpose=None, comment=None, item_group_definition=None, sasdataset_name=None, local_vars_configuration=None):  # noqa: E501
        """ODMcomplexTypeDefinitionItemGroupDef - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._item_ref = None
        self._alias = None
        self._oid = None
        self._name = None
        self._repeating = None
        self._is_reference_data = None
        self._domain = None
        self._origin = None
        self._role = None
        self._purpose = None
        self._comment = None
        self._item_group_definition = None
        self._sasdataset_name = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if item_ref is not None:
            self.item_ref = item_ref
        if alias is not None:
            self.alias = alias
        if oid is not None:
            self.oid = oid
        if name is not None:
            self.name = name
        if repeating is not None:
            self.repeating = repeating
        if is_reference_data is not None:
            self.is_reference_data = is_reference_data
        if domain is not None:
            self.domain = domain
        if origin is not None:
            self.origin = origin
        if role is not None:
            self.role = role
        if purpose is not None:
            self.purpose = purpose
        if comment is not None:
            self.comment = comment
        self.item_group_definition = item_group_definition
        if sasdataset_name is not None:
            self.sasdataset_name = sasdataset_name

    @property
    def description(self):
        """Gets the description of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501


        :return: The description of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionDescription
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ODMcomplexTypeDefinitionItemGroupDef.


        :param description: The description of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :type: ODMcomplexTypeDefinitionDescription
        """

        self._description = description

    @property
    def item_ref(self):
        """Gets the item_ref of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501


        :return: The item_ref of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionItemRef]
        """
        return self._item_ref

    @item_ref.setter
    def item_ref(self, item_ref):
        """Sets the item_ref of this ODMcomplexTypeDefinitionItemGroupDef.


        :param item_ref: The item_ref of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionItemRef]
        """

        self._item_ref = item_ref

    @property
    def alias(self):
        """Gets the alias of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501


        :return: The alias of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionAlias]
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this ODMcomplexTypeDefinitionItemGroupDef.


        :param alias: The alias of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionAlias]
        """

        self._alias = alias

    @property
    def oid(self):
        """Gets the oid of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501


        :return: The oid of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this ODMcomplexTypeDefinitionItemGroupDef.


        :param oid: The oid of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :type: str
        """

        self._oid = oid

    @property
    def name(self):
        """Gets the name of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501


        :return: The name of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ODMcomplexTypeDefinitionItemGroupDef.


        :param name: The name of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def repeating(self):
        """Gets the repeating of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501


        :return: The repeating of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :rtype: str
        """
        return self._repeating

    @repeating.setter
    def repeating(self, repeating):
        """Sets the repeating of this ODMcomplexTypeDefinitionItemGroupDef.


        :param repeating: The repeating of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and repeating not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `repeating` ({0}), must be one of {1}"  # noqa: E501
                .format(repeating, allowed_values)
            )

        self._repeating = repeating

    @property
    def is_reference_data(self):
        """Gets the is_reference_data of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501


        :return: The is_reference_data of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :rtype: str
        """
        return self._is_reference_data

    @is_reference_data.setter
    def is_reference_data(self, is_reference_data):
        """Sets the is_reference_data of this ODMcomplexTypeDefinitionItemGroupDef.


        :param is_reference_data: The is_reference_data of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :type: str
        """
        allowed_values = ["YES", "NO"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and is_reference_data not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `is_reference_data` ({0}), must be one of {1}"  # noqa: E501
                .format(is_reference_data, allowed_values)
            )

        self._is_reference_data = is_reference_data

    @property
    def domain(self):
        """Gets the domain of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501


        :return: The domain of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this ODMcomplexTypeDefinitionItemGroupDef.


        :param domain: The domain of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :type: str
        """

        self._domain = domain

    @property
    def origin(self):
        """Gets the origin of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501


        :return: The origin of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this ODMcomplexTypeDefinitionItemGroupDef.


        :param origin: The origin of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def role(self):
        """Gets the role of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501


        :return: The role of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ODMcomplexTypeDefinitionItemGroupDef.


        :param role: The role of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def purpose(self):
        """Gets the purpose of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501


        :return: The purpose of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this ODMcomplexTypeDefinitionItemGroupDef.


        :param purpose: The purpose of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def comment(self):
        """Gets the comment of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501


        :return: The comment of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ODMcomplexTypeDefinitionItemGroupDef.


        :param comment: The comment of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def item_group_definition(self):
        """Gets the item_group_definition of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501


        :return: The item_group_definition of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :rtype: ItemGroupDefinition
        """
        return self._item_group_definition

    @item_group_definition.setter
    def item_group_definition(self, item_group_definition):
        """Sets the item_group_definition of this ODMcomplexTypeDefinitionItemGroupDef.


        :param item_group_definition: The item_group_definition of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :type: ItemGroupDefinition
        """
        if self.local_vars_configuration.client_side_validation and item_group_definition is None:  # noqa: E501
            raise ValueError("Invalid value for `item_group_definition`, must not be `None`")  # noqa: E501

        self._item_group_definition = item_group_definition

    @property
    def sasdataset_name(self):
        """Gets the sasdataset_name of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501


        :return: The sasdataset_name of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :rtype: str
        """
        return self._sasdataset_name

    @sasdataset_name.setter
    def sasdataset_name(self, sasdataset_name):
        """Sets the sasdataset_name of this ODMcomplexTypeDefinitionItemGroupDef.


        :param sasdataset_name: The sasdataset_name of this ODMcomplexTypeDefinitionItemGroupDef.  # noqa: E501
        :type: str
        """

        self._sasdataset_name = sasdataset_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionItemGroupDef):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionItemGroupDef):
            return True

        return self.to_dict() != other.to_dict()
