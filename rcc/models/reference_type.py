# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ReferenceType(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'transforms': 'TransformsType',
        'digest_method': 'DigestMethodType',
        'digest_value': 'list[str]',
        'id': 'str',
        'uri': 'str',
        'type': 'str'
    }

    attribute_map = {
        'transforms': 'transforms',
        'digest_method': 'digestMethod',
        'digest_value': 'digestValue',
        'id': 'id',
        'uri': 'uri',
        'type': 'type'
    }

    def __init__(self, transforms=None, digest_method=None, digest_value=None, id=None, uri=None, type=None, local_vars_configuration=None):  # noqa: E501
        """ReferenceType - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._transforms = None
        self._digest_method = None
        self._digest_value = None
        self._id = None
        self._uri = None
        self._type = None
        self.discriminator = None

        if transforms is not None:
            self.transforms = transforms
        self.digest_method = digest_method
        self.digest_value = digest_value
        if id is not None:
            self.id = id
        if uri is not None:
            self.uri = uri
        if type is not None:
            self.type = type

    @property
    def transforms(self):
        """Gets the transforms of this ReferenceType.  # noqa: E501


        :return: The transforms of this ReferenceType.  # noqa: E501
        :rtype: TransformsType
        """
        return self._transforms

    @transforms.setter
    def transforms(self, transforms):
        """Sets the transforms of this ReferenceType.


        :param transforms: The transforms of this ReferenceType.  # noqa: E501
        :type: TransformsType
        """

        self._transforms = transforms

    @property
    def digest_method(self):
        """Gets the digest_method of this ReferenceType.  # noqa: E501


        :return: The digest_method of this ReferenceType.  # noqa: E501
        :rtype: DigestMethodType
        """
        return self._digest_method

    @digest_method.setter
    def digest_method(self, digest_method):
        """Sets the digest_method of this ReferenceType.


        :param digest_method: The digest_method of this ReferenceType.  # noqa: E501
        :type: DigestMethodType
        """
        if self.local_vars_configuration.client_side_validation and digest_method is None:  # noqa: E501
            raise ValueError("Invalid value for `digest_method`, must not be `None`")  # noqa: E501

        self._digest_method = digest_method

    @property
    def digest_value(self):
        """Gets the digest_value of this ReferenceType.  # noqa: E501


        :return: The digest_value of this ReferenceType.  # noqa: E501
        :rtype: list[str]
        """
        return self._digest_value

    @digest_value.setter
    def digest_value(self, digest_value):
        """Sets the digest_value of this ReferenceType.


        :param digest_value: The digest_value of this ReferenceType.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and digest_value is None:  # noqa: E501
            raise ValueError("Invalid value for `digest_value`, must not be `None`")  # noqa: E501

        self._digest_value = digest_value

    @property
    def id(self):
        """Gets the id of this ReferenceType.  # noqa: E501


        :return: The id of this ReferenceType.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReferenceType.


        :param id: The id of this ReferenceType.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def uri(self):
        """Gets the uri of this ReferenceType.  # noqa: E501


        :return: The uri of this ReferenceType.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ReferenceType.


        :param uri: The uri of this ReferenceType.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def type(self):
        """Gets the type of this ReferenceType.  # noqa: E501


        :return: The type of this ReferenceType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReferenceType.


        :param type: The type of this ReferenceType.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReferenceType):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReferenceType):
            return True

        return self.to_dict() != other.to_dict()
