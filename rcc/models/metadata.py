# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class Metadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'identifier': 'str',
        'field_name': 'str',
        'form_name': 'str',
        'sas_form_name': 'str',
        'section_header': 'str',
        'field_type': 'str',
        'field_label': 'str',
        'select_choices_or_calculations': 'str',
        'field_note': 'str',
        'text_validation_type_or_show_slider_number': 'str',
        'text_validation_min': 'str',
        'text_validation_max': 'str',
        'branching_logic': 'str',
        'required_field': 'str',
        'custom_alignment': 'str',
        'question_number': 'str',
        'matrix_group_name': 'str',
        'matrix_ranking': 'str',
        'field_annotation': 'str'
    }

    attribute_map = {
        'identifier': 'identifier',
        'field_name': 'field_name',
        'form_name': 'form_name',
        'sas_form_name': 'sas_form_name',
        'section_header': 'section_header',
        'field_type': 'field_type',
        'field_label': 'field_label',
        'select_choices_or_calculations': 'select_choices_or_calculations',
        'field_note': 'field_note',
        'text_validation_type_or_show_slider_number': 'text_validation_type_or_show_slider_number',
        'text_validation_min': 'text_validation_min',
        'text_validation_max': 'text_validation_max',
        'branching_logic': 'branching_logic',
        'required_field': 'required_field',
        'custom_alignment': 'custom_alignment',
        'question_number': 'question_number',
        'matrix_group_name': 'matrix_group_name',
        'matrix_ranking': 'matrix_ranking',
        'field_annotation': 'field_annotation'
    }

    def __init__(self, identifier=None, field_name=None, form_name=None, sas_form_name=None, section_header=None, field_type=None, field_label=None, select_choices_or_calculations=None, field_note=None, text_validation_type_or_show_slider_number=None, text_validation_min=None, text_validation_max=None, branching_logic=None, required_field=None, custom_alignment=None, question_number=None, matrix_group_name=None, matrix_ranking=None, field_annotation=None, local_vars_configuration=None):  # noqa: E501
        """Metadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._identifier = None
        self._field_name = None
        self._form_name = None
        self._sas_form_name = None
        self._section_header = None
        self._field_type = None
        self._field_label = None
        self._select_choices_or_calculations = None
        self._field_note = None
        self._text_validation_type_or_show_slider_number = None
        self._text_validation_min = None
        self._text_validation_max = None
        self._branching_logic = None
        self._required_field = None
        self._custom_alignment = None
        self._question_number = None
        self._matrix_group_name = None
        self._matrix_ranking = None
        self._field_annotation = None
        self.discriminator = None

        if identifier is not None:
            self.identifier = identifier
        if field_name is not None:
            self.field_name = field_name
        if form_name is not None:
            self.form_name = form_name
        if sas_form_name is not None:
            self.sas_form_name = sas_form_name
        if section_header is not None:
            self.section_header = section_header
        if field_type is not None:
            self.field_type = field_type
        if field_label is not None:
            self.field_label = field_label
        if select_choices_or_calculations is not None:
            self.select_choices_or_calculations = select_choices_or_calculations
        if field_note is not None:
            self.field_note = field_note
        if text_validation_type_or_show_slider_number is not None:
            self.text_validation_type_or_show_slider_number = text_validation_type_or_show_slider_number
        if text_validation_min is not None:
            self.text_validation_min = text_validation_min
        if text_validation_max is not None:
            self.text_validation_max = text_validation_max
        if branching_logic is not None:
            self.branching_logic = branching_logic
        if required_field is not None:
            self.required_field = required_field
        if custom_alignment is not None:
            self.custom_alignment = custom_alignment
        if question_number is not None:
            self.question_number = question_number
        if matrix_group_name is not None:
            self.matrix_group_name = matrix_group_name
        if matrix_ranking is not None:
            self.matrix_ranking = matrix_ranking
        if field_annotation is not None:
            self.field_annotation = field_annotation

    @property
    def identifier(self):
        """Gets the identifier of this Metadata.  # noqa: E501


        :return: The identifier of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Metadata.


        :param identifier: The identifier of this Metadata.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def field_name(self):
        """Gets the field_name of this Metadata.  # noqa: E501


        :return: The field_name of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._field_name

    @field_name.setter
    def field_name(self, field_name):
        """Sets the field_name of this Metadata.


        :param field_name: The field_name of this Metadata.  # noqa: E501
        :type: str
        """

        self._field_name = field_name

    @property
    def form_name(self):
        """Gets the form_name of this Metadata.  # noqa: E501


        :return: The form_name of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._form_name

    @form_name.setter
    def form_name(self, form_name):
        """Sets the form_name of this Metadata.


        :param form_name: The form_name of this Metadata.  # noqa: E501
        :type: str
        """

        self._form_name = form_name

    @property
    def sas_form_name(self):
        """Gets the sas_form_name of this Metadata.  # noqa: E501


        :return: The sas_form_name of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._sas_form_name

    @sas_form_name.setter
    def sas_form_name(self, sas_form_name):
        """Sets the sas_form_name of this Metadata.


        :param sas_form_name: The sas_form_name of this Metadata.  # noqa: E501
        :type: str
        """

        self._sas_form_name = sas_form_name

    @property
    def section_header(self):
        """Gets the section_header of this Metadata.  # noqa: E501


        :return: The section_header of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._section_header

    @section_header.setter
    def section_header(self, section_header):
        """Sets the section_header of this Metadata.


        :param section_header: The section_header of this Metadata.  # noqa: E501
        :type: str
        """

        self._section_header = section_header

    @property
    def field_type(self):
        """Gets the field_type of this Metadata.  # noqa: E501


        :return: The field_type of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._field_type

    @field_type.setter
    def field_type(self, field_type):
        """Sets the field_type of this Metadata.


        :param field_type: The field_type of this Metadata.  # noqa: E501
        :type: str
        """

        self._field_type = field_type

    @property
    def field_label(self):
        """Gets the field_label of this Metadata.  # noqa: E501


        :return: The field_label of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._field_label

    @field_label.setter
    def field_label(self, field_label):
        """Sets the field_label of this Metadata.


        :param field_label: The field_label of this Metadata.  # noqa: E501
        :type: str
        """

        self._field_label = field_label

    @property
    def select_choices_or_calculations(self):
        """Gets the select_choices_or_calculations of this Metadata.  # noqa: E501


        :return: The select_choices_or_calculations of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._select_choices_or_calculations

    @select_choices_or_calculations.setter
    def select_choices_or_calculations(self, select_choices_or_calculations):
        """Sets the select_choices_or_calculations of this Metadata.


        :param select_choices_or_calculations: The select_choices_or_calculations of this Metadata.  # noqa: E501
        :type: str
        """

        self._select_choices_or_calculations = select_choices_or_calculations

    @property
    def field_note(self):
        """Gets the field_note of this Metadata.  # noqa: E501


        :return: The field_note of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._field_note

    @field_note.setter
    def field_note(self, field_note):
        """Sets the field_note of this Metadata.


        :param field_note: The field_note of this Metadata.  # noqa: E501
        :type: str
        """

        self._field_note = field_note

    @property
    def text_validation_type_or_show_slider_number(self):
        """Gets the text_validation_type_or_show_slider_number of this Metadata.  # noqa: E501


        :return: The text_validation_type_or_show_slider_number of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._text_validation_type_or_show_slider_number

    @text_validation_type_or_show_slider_number.setter
    def text_validation_type_or_show_slider_number(self, text_validation_type_or_show_slider_number):
        """Sets the text_validation_type_or_show_slider_number of this Metadata.


        :param text_validation_type_or_show_slider_number: The text_validation_type_or_show_slider_number of this Metadata.  # noqa: E501
        :type: str
        """

        self._text_validation_type_or_show_slider_number = text_validation_type_or_show_slider_number

    @property
    def text_validation_min(self):
        """Gets the text_validation_min of this Metadata.  # noqa: E501


        :return: The text_validation_min of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._text_validation_min

    @text_validation_min.setter
    def text_validation_min(self, text_validation_min):
        """Sets the text_validation_min of this Metadata.


        :param text_validation_min: The text_validation_min of this Metadata.  # noqa: E501
        :type: str
        """

        self._text_validation_min = text_validation_min

    @property
    def text_validation_max(self):
        """Gets the text_validation_max of this Metadata.  # noqa: E501


        :return: The text_validation_max of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._text_validation_max

    @text_validation_max.setter
    def text_validation_max(self, text_validation_max):
        """Sets the text_validation_max of this Metadata.


        :param text_validation_max: The text_validation_max of this Metadata.  # noqa: E501
        :type: str
        """

        self._text_validation_max = text_validation_max

    @property
    def branching_logic(self):
        """Gets the branching_logic of this Metadata.  # noqa: E501


        :return: The branching_logic of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._branching_logic

    @branching_logic.setter
    def branching_logic(self, branching_logic):
        """Sets the branching_logic of this Metadata.


        :param branching_logic: The branching_logic of this Metadata.  # noqa: E501
        :type: str
        """

        self._branching_logic = branching_logic

    @property
    def required_field(self):
        """Gets the required_field of this Metadata.  # noqa: E501


        :return: The required_field of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._required_field

    @required_field.setter
    def required_field(self, required_field):
        """Sets the required_field of this Metadata.


        :param required_field: The required_field of this Metadata.  # noqa: E501
        :type: str
        """

        self._required_field = required_field

    @property
    def custom_alignment(self):
        """Gets the custom_alignment of this Metadata.  # noqa: E501


        :return: The custom_alignment of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._custom_alignment

    @custom_alignment.setter
    def custom_alignment(self, custom_alignment):
        """Sets the custom_alignment of this Metadata.


        :param custom_alignment: The custom_alignment of this Metadata.  # noqa: E501
        :type: str
        """

        self._custom_alignment = custom_alignment

    @property
    def question_number(self):
        """Gets the question_number of this Metadata.  # noqa: E501


        :return: The question_number of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._question_number

    @question_number.setter
    def question_number(self, question_number):
        """Sets the question_number of this Metadata.


        :param question_number: The question_number of this Metadata.  # noqa: E501
        :type: str
        """

        self._question_number = question_number

    @property
    def matrix_group_name(self):
        """Gets the matrix_group_name of this Metadata.  # noqa: E501


        :return: The matrix_group_name of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._matrix_group_name

    @matrix_group_name.setter
    def matrix_group_name(self, matrix_group_name):
        """Sets the matrix_group_name of this Metadata.


        :param matrix_group_name: The matrix_group_name of this Metadata.  # noqa: E501
        :type: str
        """

        self._matrix_group_name = matrix_group_name

    @property
    def matrix_ranking(self):
        """Gets the matrix_ranking of this Metadata.  # noqa: E501


        :return: The matrix_ranking of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._matrix_ranking

    @matrix_ranking.setter
    def matrix_ranking(self, matrix_ranking):
        """Sets the matrix_ranking of this Metadata.


        :param matrix_ranking: The matrix_ranking of this Metadata.  # noqa: E501
        :type: str
        """

        self._matrix_ranking = matrix_ranking

    @property
    def field_annotation(self):
        """Gets the field_annotation of this Metadata.  # noqa: E501


        :return: The field_annotation of this Metadata.  # noqa: E501
        :rtype: str
        """
        return self._field_annotation

    @field_annotation.setter
    def field_annotation(self, field_annotation):
        """Sets the field_annotation of this Metadata.


        :param field_annotation: The field_annotation of this Metadata.  # noqa: E501
        :type: str
        """

        self._field_annotation = field_annotation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Metadata):
            return True

        return self.to_dict() != other.to_dict()
