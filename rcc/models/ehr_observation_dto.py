# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class EhrObservationDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'encounter_id': 'str',
        'encounter_id_aux': 'str',
        'variable_codes': 'list[str]',
        'variable_code': 'str',
        'value': 'str',
        'value_index': 'int',
        'codeable_concept_value_text': 'str',
        'codeable_concept_values': 'list[CodeableConceptDto]',
        'codeable_concept_value': 'CodeableConceptDto',
        'quantity_value': 'str',
        'quantity_comparator': 'str',
        'quantity_unit': 'str',
        'boolean_value': 'bool',
        'date_time_value': 'str',
        'time_value': 'str',
        'reference_range_low': 'str',
        'reference_range_high': 'str',
        'date_performed': 'str',
        'performer': 'str',
        'version': 'str',
        'first_not_empty_encounter_id': 'str'
    }

    attribute_map = {
        'encounter_id': 'encounterId',
        'encounter_id_aux': 'encounterIdAux',
        'variable_codes': 'variableCodes',
        'variable_code': 'variableCode',
        'value': 'value',
        'value_index': 'valueIndex',
        'codeable_concept_value_text': 'codeableConceptValueText',
        'codeable_concept_values': 'codeableConceptValues',
        'codeable_concept_value': 'codeableConceptValue',
        'quantity_value': 'quantityValue',
        'quantity_comparator': 'quantityComparator',
        'quantity_unit': 'quantityUnit',
        'boolean_value': 'booleanValue',
        'date_time_value': 'dateTimeValue',
        'time_value': 'timeValue',
        'reference_range_low': 'referenceRangeLow',
        'reference_range_high': 'referenceRangeHigh',
        'date_performed': 'datePerformed',
        'performer': 'performer',
        'version': 'version',
        'first_not_empty_encounter_id': 'firstNotEmptyEncounterId'
    }

    def __init__(self, encounter_id=None, encounter_id_aux=None, variable_codes=None, variable_code=None, value=None, value_index=None, codeable_concept_value_text=None, codeable_concept_values=None, codeable_concept_value=None, quantity_value=None, quantity_comparator=None, quantity_unit=None, boolean_value=None, date_time_value=None, time_value=None, reference_range_low=None, reference_range_high=None, date_performed=None, performer=None, version=None, first_not_empty_encounter_id=None, local_vars_configuration=None):  # noqa: E501
        """EhrObservationDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._encounter_id = None
        self._encounter_id_aux = None
        self._variable_codes = None
        self._variable_code = None
        self._value = None
        self._value_index = None
        self._codeable_concept_value_text = None
        self._codeable_concept_values = None
        self._codeable_concept_value = None
        self._quantity_value = None
        self._quantity_comparator = None
        self._quantity_unit = None
        self._boolean_value = None
        self._date_time_value = None
        self._time_value = None
        self._reference_range_low = None
        self._reference_range_high = None
        self._date_performed = None
        self._performer = None
        self._version = None
        self._first_not_empty_encounter_id = None
        self.discriminator = None

        if encounter_id is not None:
            self.encounter_id = encounter_id
        if encounter_id_aux is not None:
            self.encounter_id_aux = encounter_id_aux
        if variable_codes is not None:
            self.variable_codes = variable_codes
        if variable_code is not None:
            self.variable_code = variable_code
        if value is not None:
            self.value = value
        if value_index is not None:
            self.value_index = value_index
        if codeable_concept_value_text is not None:
            self.codeable_concept_value_text = codeable_concept_value_text
        if codeable_concept_values is not None:
            self.codeable_concept_values = codeable_concept_values
        if codeable_concept_value is not None:
            self.codeable_concept_value = codeable_concept_value
        if quantity_value is not None:
            self.quantity_value = quantity_value
        if quantity_comparator is not None:
            self.quantity_comparator = quantity_comparator
        if quantity_unit is not None:
            self.quantity_unit = quantity_unit
        if boolean_value is not None:
            self.boolean_value = boolean_value
        if date_time_value is not None:
            self.date_time_value = date_time_value
        if time_value is not None:
            self.time_value = time_value
        if reference_range_low is not None:
            self.reference_range_low = reference_range_low
        if reference_range_high is not None:
            self.reference_range_high = reference_range_high
        if date_performed is not None:
            self.date_performed = date_performed
        if performer is not None:
            self.performer = performer
        if version is not None:
            self.version = version
        if first_not_empty_encounter_id is not None:
            self.first_not_empty_encounter_id = first_not_empty_encounter_id

    @property
    def encounter_id(self):
        """Gets the encounter_id of this EhrObservationDto.  # noqa: E501


        :return: The encounter_id of this EhrObservationDto.  # noqa: E501
        :rtype: str
        """
        return self._encounter_id

    @encounter_id.setter
    def encounter_id(self, encounter_id):
        """Sets the encounter_id of this EhrObservationDto.


        :param encounter_id: The encounter_id of this EhrObservationDto.  # noqa: E501
        :type: str
        """

        self._encounter_id = encounter_id

    @property
    def encounter_id_aux(self):
        """Gets the encounter_id_aux of this EhrObservationDto.  # noqa: E501


        :return: The encounter_id_aux of this EhrObservationDto.  # noqa: E501
        :rtype: str
        """
        return self._encounter_id_aux

    @encounter_id_aux.setter
    def encounter_id_aux(self, encounter_id_aux):
        """Sets the encounter_id_aux of this EhrObservationDto.


        :param encounter_id_aux: The encounter_id_aux of this EhrObservationDto.  # noqa: E501
        :type: str
        """

        self._encounter_id_aux = encounter_id_aux

    @property
    def variable_codes(self):
        """Gets the variable_codes of this EhrObservationDto.  # noqa: E501


        :return: The variable_codes of this EhrObservationDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._variable_codes

    @variable_codes.setter
    def variable_codes(self, variable_codes):
        """Sets the variable_codes of this EhrObservationDto.


        :param variable_codes: The variable_codes of this EhrObservationDto.  # noqa: E501
        :type: list[str]
        """

        self._variable_codes = variable_codes

    @property
    def variable_code(self):
        """Gets the variable_code of this EhrObservationDto.  # noqa: E501


        :return: The variable_code of this EhrObservationDto.  # noqa: E501
        :rtype: str
        """
        return self._variable_code

    @variable_code.setter
    def variable_code(self, variable_code):
        """Sets the variable_code of this EhrObservationDto.


        :param variable_code: The variable_code of this EhrObservationDto.  # noqa: E501
        :type: str
        """

        self._variable_code = variable_code

    @property
    def value(self):
        """Gets the value of this EhrObservationDto.  # noqa: E501


        :return: The value of this EhrObservationDto.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this EhrObservationDto.


        :param value: The value of this EhrObservationDto.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def value_index(self):
        """Gets the value_index of this EhrObservationDto.  # noqa: E501


        :return: The value_index of this EhrObservationDto.  # noqa: E501
        :rtype: int
        """
        return self._value_index

    @value_index.setter
    def value_index(self, value_index):
        """Sets the value_index of this EhrObservationDto.


        :param value_index: The value_index of this EhrObservationDto.  # noqa: E501
        :type: int
        """

        self._value_index = value_index

    @property
    def codeable_concept_value_text(self):
        """Gets the codeable_concept_value_text of this EhrObservationDto.  # noqa: E501


        :return: The codeable_concept_value_text of this EhrObservationDto.  # noqa: E501
        :rtype: str
        """
        return self._codeable_concept_value_text

    @codeable_concept_value_text.setter
    def codeable_concept_value_text(self, codeable_concept_value_text):
        """Sets the codeable_concept_value_text of this EhrObservationDto.


        :param codeable_concept_value_text: The codeable_concept_value_text of this EhrObservationDto.  # noqa: E501
        :type: str
        """

        self._codeable_concept_value_text = codeable_concept_value_text

    @property
    def codeable_concept_values(self):
        """Gets the codeable_concept_values of this EhrObservationDto.  # noqa: E501


        :return: The codeable_concept_values of this EhrObservationDto.  # noqa: E501
        :rtype: list[CodeableConceptDto]
        """
        return self._codeable_concept_values

    @codeable_concept_values.setter
    def codeable_concept_values(self, codeable_concept_values):
        """Sets the codeable_concept_values of this EhrObservationDto.


        :param codeable_concept_values: The codeable_concept_values of this EhrObservationDto.  # noqa: E501
        :type: list[CodeableConceptDto]
        """

        self._codeable_concept_values = codeable_concept_values

    @property
    def codeable_concept_value(self):
        """Gets the codeable_concept_value of this EhrObservationDto.  # noqa: E501


        :return: The codeable_concept_value of this EhrObservationDto.  # noqa: E501
        :rtype: CodeableConceptDto
        """
        return self._codeable_concept_value

    @codeable_concept_value.setter
    def codeable_concept_value(self, codeable_concept_value):
        """Sets the codeable_concept_value of this EhrObservationDto.


        :param codeable_concept_value: The codeable_concept_value of this EhrObservationDto.  # noqa: E501
        :type: CodeableConceptDto
        """

        self._codeable_concept_value = codeable_concept_value

    @property
    def quantity_value(self):
        """Gets the quantity_value of this EhrObservationDto.  # noqa: E501


        :return: The quantity_value of this EhrObservationDto.  # noqa: E501
        :rtype: str
        """
        return self._quantity_value

    @quantity_value.setter
    def quantity_value(self, quantity_value):
        """Sets the quantity_value of this EhrObservationDto.


        :param quantity_value: The quantity_value of this EhrObservationDto.  # noqa: E501
        :type: str
        """

        self._quantity_value = quantity_value

    @property
    def quantity_comparator(self):
        """Gets the quantity_comparator of this EhrObservationDto.  # noqa: E501


        :return: The quantity_comparator of this EhrObservationDto.  # noqa: E501
        :rtype: str
        """
        return self._quantity_comparator

    @quantity_comparator.setter
    def quantity_comparator(self, quantity_comparator):
        """Sets the quantity_comparator of this EhrObservationDto.


        :param quantity_comparator: The quantity_comparator of this EhrObservationDto.  # noqa: E501
        :type: str
        """

        self._quantity_comparator = quantity_comparator

    @property
    def quantity_unit(self):
        """Gets the quantity_unit of this EhrObservationDto.  # noqa: E501


        :return: The quantity_unit of this EhrObservationDto.  # noqa: E501
        :rtype: str
        """
        return self._quantity_unit

    @quantity_unit.setter
    def quantity_unit(self, quantity_unit):
        """Sets the quantity_unit of this EhrObservationDto.


        :param quantity_unit: The quantity_unit of this EhrObservationDto.  # noqa: E501
        :type: str
        """

        self._quantity_unit = quantity_unit

    @property
    def boolean_value(self):
        """Gets the boolean_value of this EhrObservationDto.  # noqa: E501


        :return: The boolean_value of this EhrObservationDto.  # noqa: E501
        :rtype: bool
        """
        return self._boolean_value

    @boolean_value.setter
    def boolean_value(self, boolean_value):
        """Sets the boolean_value of this EhrObservationDto.


        :param boolean_value: The boolean_value of this EhrObservationDto.  # noqa: E501
        :type: bool
        """

        self._boolean_value = boolean_value

    @property
    def date_time_value(self):
        """Gets the date_time_value of this EhrObservationDto.  # noqa: E501


        :return: The date_time_value of this EhrObservationDto.  # noqa: E501
        :rtype: str
        """
        return self._date_time_value

    @date_time_value.setter
    def date_time_value(self, date_time_value):
        """Sets the date_time_value of this EhrObservationDto.


        :param date_time_value: The date_time_value of this EhrObservationDto.  # noqa: E501
        :type: str
        """

        self._date_time_value = date_time_value

    @property
    def time_value(self):
        """Gets the time_value of this EhrObservationDto.  # noqa: E501


        :return: The time_value of this EhrObservationDto.  # noqa: E501
        :rtype: str
        """
        return self._time_value

    @time_value.setter
    def time_value(self, time_value):
        """Sets the time_value of this EhrObservationDto.


        :param time_value: The time_value of this EhrObservationDto.  # noqa: E501
        :type: str
        """

        self._time_value = time_value

    @property
    def reference_range_low(self):
        """Gets the reference_range_low of this EhrObservationDto.  # noqa: E501


        :return: The reference_range_low of this EhrObservationDto.  # noqa: E501
        :rtype: str
        """
        return self._reference_range_low

    @reference_range_low.setter
    def reference_range_low(self, reference_range_low):
        """Sets the reference_range_low of this EhrObservationDto.


        :param reference_range_low: The reference_range_low of this EhrObservationDto.  # noqa: E501
        :type: str
        """

        self._reference_range_low = reference_range_low

    @property
    def reference_range_high(self):
        """Gets the reference_range_high of this EhrObservationDto.  # noqa: E501


        :return: The reference_range_high of this EhrObservationDto.  # noqa: E501
        :rtype: str
        """
        return self._reference_range_high

    @reference_range_high.setter
    def reference_range_high(self, reference_range_high):
        """Sets the reference_range_high of this EhrObservationDto.


        :param reference_range_high: The reference_range_high of this EhrObservationDto.  # noqa: E501
        :type: str
        """

        self._reference_range_high = reference_range_high

    @property
    def date_performed(self):
        """Gets the date_performed of this EhrObservationDto.  # noqa: E501


        :return: The date_performed of this EhrObservationDto.  # noqa: E501
        :rtype: str
        """
        return self._date_performed

    @date_performed.setter
    def date_performed(self, date_performed):
        """Sets the date_performed of this EhrObservationDto.


        :param date_performed: The date_performed of this EhrObservationDto.  # noqa: E501
        :type: str
        """

        self._date_performed = date_performed

    @property
    def performer(self):
        """Gets the performer of this EhrObservationDto.  # noqa: E501


        :return: The performer of this EhrObservationDto.  # noqa: E501
        :rtype: str
        """
        return self._performer

    @performer.setter
    def performer(self, performer):
        """Sets the performer of this EhrObservationDto.


        :param performer: The performer of this EhrObservationDto.  # noqa: E501
        :type: str
        """

        self._performer = performer

    @property
    def version(self):
        """Gets the version of this EhrObservationDto.  # noqa: E501


        :return: The version of this EhrObservationDto.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this EhrObservationDto.


        :param version: The version of this EhrObservationDto.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def first_not_empty_encounter_id(self):
        """Gets the first_not_empty_encounter_id of this EhrObservationDto.  # noqa: E501


        :return: The first_not_empty_encounter_id of this EhrObservationDto.  # noqa: E501
        :rtype: str
        """
        return self._first_not_empty_encounter_id

    @first_not_empty_encounter_id.setter
    def first_not_empty_encounter_id(self, first_not_empty_encounter_id):
        """Sets the first_not_empty_encounter_id of this EhrObservationDto.


        :param first_not_empty_encounter_id: The first_not_empty_encounter_id of this EhrObservationDto.  # noqa: E501
        :type: str
        """

        self._first_not_empty_encounter_id = first_not_empty_encounter_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EhrObservationDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EhrObservationDto):
            return True

        return self.to_dict() != other.to_dict()
