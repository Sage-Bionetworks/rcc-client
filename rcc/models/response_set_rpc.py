# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ResponseSetRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'crf_id': 'int',
        'loockup_code_id': 'int',
        'study_id': 'int',
        'response_set_values': 'list[ResponseSetValueRpc]',
        'label': 'str',
        'hidden': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'crf_id': 'crfId',
        'loockup_code_id': 'loockupCodeId',
        'study_id': 'studyId',
        'response_set_values': 'responseSetValues',
        'label': 'label',
        'hidden': 'hidden'
    }

    def __init__(self, id=None, crf_id=None, loockup_code_id=None, study_id=None, response_set_values=None, label=None, hidden=None, local_vars_configuration=None):  # noqa: E501
        """ResponseSetRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._crf_id = None
        self._loockup_code_id = None
        self._study_id = None
        self._response_set_values = None
        self._label = None
        self._hidden = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if crf_id is not None:
            self.crf_id = crf_id
        if loockup_code_id is not None:
            self.loockup_code_id = loockup_code_id
        if study_id is not None:
            self.study_id = study_id
        if response_set_values is not None:
            self.response_set_values = response_set_values
        if label is not None:
            self.label = label
        if hidden is not None:
            self.hidden = hidden

    @property
    def id(self):
        """Gets the id of this ResponseSetRpc.  # noqa: E501


        :return: The id of this ResponseSetRpc.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseSetRpc.


        :param id: The id of this ResponseSetRpc.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def crf_id(self):
        """Gets the crf_id of this ResponseSetRpc.  # noqa: E501


        :return: The crf_id of this ResponseSetRpc.  # noqa: E501
        :rtype: int
        """
        return self._crf_id

    @crf_id.setter
    def crf_id(self, crf_id):
        """Sets the crf_id of this ResponseSetRpc.


        :param crf_id: The crf_id of this ResponseSetRpc.  # noqa: E501
        :type: int
        """

        self._crf_id = crf_id

    @property
    def loockup_code_id(self):
        """Gets the loockup_code_id of this ResponseSetRpc.  # noqa: E501


        :return: The loockup_code_id of this ResponseSetRpc.  # noqa: E501
        :rtype: int
        """
        return self._loockup_code_id

    @loockup_code_id.setter
    def loockup_code_id(self, loockup_code_id):
        """Sets the loockup_code_id of this ResponseSetRpc.


        :param loockup_code_id: The loockup_code_id of this ResponseSetRpc.  # noqa: E501
        :type: int
        """

        self._loockup_code_id = loockup_code_id

    @property
    def study_id(self):
        """Gets the study_id of this ResponseSetRpc.  # noqa: E501


        :return: The study_id of this ResponseSetRpc.  # noqa: E501
        :rtype: int
        """
        return self._study_id

    @study_id.setter
    def study_id(self, study_id):
        """Sets the study_id of this ResponseSetRpc.


        :param study_id: The study_id of this ResponseSetRpc.  # noqa: E501
        :type: int
        """

        self._study_id = study_id

    @property
    def response_set_values(self):
        """Gets the response_set_values of this ResponseSetRpc.  # noqa: E501


        :return: The response_set_values of this ResponseSetRpc.  # noqa: E501
        :rtype: list[ResponseSetValueRpc]
        """
        return self._response_set_values

    @response_set_values.setter
    def response_set_values(self, response_set_values):
        """Sets the response_set_values of this ResponseSetRpc.


        :param response_set_values: The response_set_values of this ResponseSetRpc.  # noqa: E501
        :type: list[ResponseSetValueRpc]
        """

        self._response_set_values = response_set_values

    @property
    def label(self):
        """Gets the label of this ResponseSetRpc.  # noqa: E501


        :return: The label of this ResponseSetRpc.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ResponseSetRpc.


        :param label: The label of this ResponseSetRpc.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def hidden(self):
        """Gets the hidden of this ResponseSetRpc.  # noqa: E501


        :return: The hidden of this ResponseSetRpc.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this ResponseSetRpc.


        :param hidden: The hidden of this ResponseSetRpc.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseSetRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseSetRpc):
            return True

        return self.to_dict() != other.to_dict()
