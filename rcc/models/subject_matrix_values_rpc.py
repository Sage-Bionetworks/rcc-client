# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class SubjectMatrixValuesRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'study_id': 'int',
        'subject_id': 'int',
        'subject_identifier': 'str',
        'crf_version_id': 'int',
        'crf_version_name': 'str',
        'crf_id': 'int',
        'crf_name': 'str',
        'event_crf_id': 'int',
        'event_def_name': 'str',
        'event_definition_id': 'int',
        'mark_crf_as_complete': 'bool',
        'only_sdv_value_changed': 'bool',
        'is_e_signature_checked': 'bool',
        'signature_flag': 'bool',
        'locked': 'bool',
        'collected_data_status': 'str',
        'old_collected_data_status': 'str',
        'data_import_crf_status': 'str',
        'matrix_collection_values_rp_cs': 'list[ItemDataValueRpc]'
    }

    attribute_map = {
        'study_id': 'studyId',
        'subject_id': 'subjectId',
        'subject_identifier': 'subjectIdentifier',
        'crf_version_id': 'crfVersionId',
        'crf_version_name': 'crfVersionName',
        'crf_id': 'crfId',
        'crf_name': 'crfName',
        'event_crf_id': 'eventCrfId',
        'event_def_name': 'eventDefName',
        'event_definition_id': 'eventDefinitionId',
        'mark_crf_as_complete': 'markCrfAsComplete',
        'only_sdv_value_changed': 'onlySdvValueChanged',
        'is_e_signature_checked': 'isESignatureChecked',
        'signature_flag': 'signatureFlag',
        'locked': 'locked',
        'collected_data_status': 'collectedDataStatus',
        'old_collected_data_status': 'oldCollectedDataStatus',
        'data_import_crf_status': 'dataImportCRFStatus',
        'matrix_collection_values_rp_cs': 'matrixCollectionValuesRPCs'
    }

    def __init__(self, study_id=None, subject_id=None, subject_identifier=None, crf_version_id=None, crf_version_name=None, crf_id=None, crf_name=None, event_crf_id=None, event_def_name=None, event_definition_id=None, mark_crf_as_complete=None, only_sdv_value_changed=None, is_e_signature_checked=None, signature_flag=None, locked=None, collected_data_status=None, old_collected_data_status=None, data_import_crf_status=None, matrix_collection_values_rp_cs=None, local_vars_configuration=None):  # noqa: E501
        """SubjectMatrixValuesRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._study_id = None
        self._subject_id = None
        self._subject_identifier = None
        self._crf_version_id = None
        self._crf_version_name = None
        self._crf_id = None
        self._crf_name = None
        self._event_crf_id = None
        self._event_def_name = None
        self._event_definition_id = None
        self._mark_crf_as_complete = None
        self._only_sdv_value_changed = None
        self._is_e_signature_checked = None
        self._signature_flag = None
        self._locked = None
        self._collected_data_status = None
        self._old_collected_data_status = None
        self._data_import_crf_status = None
        self._matrix_collection_values_rp_cs = None
        self.discriminator = None

        if study_id is not None:
            self.study_id = study_id
        if subject_id is not None:
            self.subject_id = subject_id
        if subject_identifier is not None:
            self.subject_identifier = subject_identifier
        if crf_version_id is not None:
            self.crf_version_id = crf_version_id
        if crf_version_name is not None:
            self.crf_version_name = crf_version_name
        if crf_id is not None:
            self.crf_id = crf_id
        if crf_name is not None:
            self.crf_name = crf_name
        if event_crf_id is not None:
            self.event_crf_id = event_crf_id
        if event_def_name is not None:
            self.event_def_name = event_def_name
        if event_definition_id is not None:
            self.event_definition_id = event_definition_id
        if mark_crf_as_complete is not None:
            self.mark_crf_as_complete = mark_crf_as_complete
        if only_sdv_value_changed is not None:
            self.only_sdv_value_changed = only_sdv_value_changed
        if is_e_signature_checked is not None:
            self.is_e_signature_checked = is_e_signature_checked
        if signature_flag is not None:
            self.signature_flag = signature_flag
        if locked is not None:
            self.locked = locked
        if collected_data_status is not None:
            self.collected_data_status = collected_data_status
        if old_collected_data_status is not None:
            self.old_collected_data_status = old_collected_data_status
        if data_import_crf_status is not None:
            self.data_import_crf_status = data_import_crf_status
        if matrix_collection_values_rp_cs is not None:
            self.matrix_collection_values_rp_cs = matrix_collection_values_rp_cs

    @property
    def study_id(self):
        """Gets the study_id of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The study_id of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: int
        """
        return self._study_id

    @study_id.setter
    def study_id(self, study_id):
        """Sets the study_id of this SubjectMatrixValuesRpc.


        :param study_id: The study_id of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: int
        """

        self._study_id = study_id

    @property
    def subject_id(self):
        """Gets the subject_id of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The subject_id of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: int
        """
        return self._subject_id

    @subject_id.setter
    def subject_id(self, subject_id):
        """Sets the subject_id of this SubjectMatrixValuesRpc.


        :param subject_id: The subject_id of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: int
        """

        self._subject_id = subject_id

    @property
    def subject_identifier(self):
        """Gets the subject_identifier of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The subject_identifier of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: str
        """
        return self._subject_identifier

    @subject_identifier.setter
    def subject_identifier(self, subject_identifier):
        """Sets the subject_identifier of this SubjectMatrixValuesRpc.


        :param subject_identifier: The subject_identifier of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: str
        """

        self._subject_identifier = subject_identifier

    @property
    def crf_version_id(self):
        """Gets the crf_version_id of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The crf_version_id of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: int
        """
        return self._crf_version_id

    @crf_version_id.setter
    def crf_version_id(self, crf_version_id):
        """Sets the crf_version_id of this SubjectMatrixValuesRpc.


        :param crf_version_id: The crf_version_id of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: int
        """

        self._crf_version_id = crf_version_id

    @property
    def crf_version_name(self):
        """Gets the crf_version_name of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The crf_version_name of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: str
        """
        return self._crf_version_name

    @crf_version_name.setter
    def crf_version_name(self, crf_version_name):
        """Sets the crf_version_name of this SubjectMatrixValuesRpc.


        :param crf_version_name: The crf_version_name of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: str
        """

        self._crf_version_name = crf_version_name

    @property
    def crf_id(self):
        """Gets the crf_id of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The crf_id of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: int
        """
        return self._crf_id

    @crf_id.setter
    def crf_id(self, crf_id):
        """Sets the crf_id of this SubjectMatrixValuesRpc.


        :param crf_id: The crf_id of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: int
        """

        self._crf_id = crf_id

    @property
    def crf_name(self):
        """Gets the crf_name of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The crf_name of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: str
        """
        return self._crf_name

    @crf_name.setter
    def crf_name(self, crf_name):
        """Sets the crf_name of this SubjectMatrixValuesRpc.


        :param crf_name: The crf_name of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: str
        """

        self._crf_name = crf_name

    @property
    def event_crf_id(self):
        """Gets the event_crf_id of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The event_crf_id of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: int
        """
        return self._event_crf_id

    @event_crf_id.setter
    def event_crf_id(self, event_crf_id):
        """Sets the event_crf_id of this SubjectMatrixValuesRpc.


        :param event_crf_id: The event_crf_id of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: int
        """

        self._event_crf_id = event_crf_id

    @property
    def event_def_name(self):
        """Gets the event_def_name of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The event_def_name of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: str
        """
        return self._event_def_name

    @event_def_name.setter
    def event_def_name(self, event_def_name):
        """Sets the event_def_name of this SubjectMatrixValuesRpc.


        :param event_def_name: The event_def_name of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: str
        """

        self._event_def_name = event_def_name

    @property
    def event_definition_id(self):
        """Gets the event_definition_id of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The event_definition_id of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: int
        """
        return self._event_definition_id

    @event_definition_id.setter
    def event_definition_id(self, event_definition_id):
        """Sets the event_definition_id of this SubjectMatrixValuesRpc.


        :param event_definition_id: The event_definition_id of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: int
        """

        self._event_definition_id = event_definition_id

    @property
    def mark_crf_as_complete(self):
        """Gets the mark_crf_as_complete of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The mark_crf_as_complete of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: bool
        """
        return self._mark_crf_as_complete

    @mark_crf_as_complete.setter
    def mark_crf_as_complete(self, mark_crf_as_complete):
        """Sets the mark_crf_as_complete of this SubjectMatrixValuesRpc.


        :param mark_crf_as_complete: The mark_crf_as_complete of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: bool
        """

        self._mark_crf_as_complete = mark_crf_as_complete

    @property
    def only_sdv_value_changed(self):
        """Gets the only_sdv_value_changed of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The only_sdv_value_changed of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: bool
        """
        return self._only_sdv_value_changed

    @only_sdv_value_changed.setter
    def only_sdv_value_changed(self, only_sdv_value_changed):
        """Sets the only_sdv_value_changed of this SubjectMatrixValuesRpc.


        :param only_sdv_value_changed: The only_sdv_value_changed of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: bool
        """

        self._only_sdv_value_changed = only_sdv_value_changed

    @property
    def is_e_signature_checked(self):
        """Gets the is_e_signature_checked of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The is_e_signature_checked of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: bool
        """
        return self._is_e_signature_checked

    @is_e_signature_checked.setter
    def is_e_signature_checked(self, is_e_signature_checked):
        """Sets the is_e_signature_checked of this SubjectMatrixValuesRpc.


        :param is_e_signature_checked: The is_e_signature_checked of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: bool
        """

        self._is_e_signature_checked = is_e_signature_checked

    @property
    def signature_flag(self):
        """Gets the signature_flag of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The signature_flag of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: bool
        """
        return self._signature_flag

    @signature_flag.setter
    def signature_flag(self, signature_flag):
        """Sets the signature_flag of this SubjectMatrixValuesRpc.


        :param signature_flag: The signature_flag of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: bool
        """

        self._signature_flag = signature_flag

    @property
    def locked(self):
        """Gets the locked of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The locked of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this SubjectMatrixValuesRpc.


        :param locked: The locked of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def collected_data_status(self):
        """Gets the collected_data_status of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The collected_data_status of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: str
        """
        return self._collected_data_status

    @collected_data_status.setter
    def collected_data_status(self, collected_data_status):
        """Sets the collected_data_status of this SubjectMatrixValuesRpc.


        :param collected_data_status: The collected_data_status of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: str
        """

        self._collected_data_status = collected_data_status

    @property
    def old_collected_data_status(self):
        """Gets the old_collected_data_status of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The old_collected_data_status of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: str
        """
        return self._old_collected_data_status

    @old_collected_data_status.setter
    def old_collected_data_status(self, old_collected_data_status):
        """Sets the old_collected_data_status of this SubjectMatrixValuesRpc.


        :param old_collected_data_status: The old_collected_data_status of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: str
        """

        self._old_collected_data_status = old_collected_data_status

    @property
    def data_import_crf_status(self):
        """Gets the data_import_crf_status of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The data_import_crf_status of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: str
        """
        return self._data_import_crf_status

    @data_import_crf_status.setter
    def data_import_crf_status(self, data_import_crf_status):
        """Sets the data_import_crf_status of this SubjectMatrixValuesRpc.


        :param data_import_crf_status: The data_import_crf_status of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: str
        """

        self._data_import_crf_status = data_import_crf_status

    @property
    def matrix_collection_values_rp_cs(self):
        """Gets the matrix_collection_values_rp_cs of this SubjectMatrixValuesRpc.  # noqa: E501


        :return: The matrix_collection_values_rp_cs of this SubjectMatrixValuesRpc.  # noqa: E501
        :rtype: list[ItemDataValueRpc]
        """
        return self._matrix_collection_values_rp_cs

    @matrix_collection_values_rp_cs.setter
    def matrix_collection_values_rp_cs(self, matrix_collection_values_rp_cs):
        """Sets the matrix_collection_values_rp_cs of this SubjectMatrixValuesRpc.


        :param matrix_collection_values_rp_cs: The matrix_collection_values_rp_cs of this SubjectMatrixValuesRpc.  # noqa: E501
        :type: list[ItemDataValueRpc]
        """

        self._matrix_collection_values_rp_cs = matrix_collection_values_rp_cs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubjectMatrixValuesRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubjectMatrixValuesRpc):
            return True

        return self.to_dict() != other.to_dict()
