# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class StudyRoleComponentPermissionsRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'allowed_permissions': 'list[GenericItem]',
        'component_name': 'str',
        'component_short_name': 'str',
        'enabled': 'bool',
        'permissions': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'allowed_permissions': 'allowedPermissions',
        'component_name': 'componentName',
        'component_short_name': 'componentShortName',
        'enabled': 'enabled',
        'permissions': 'permissions'
    }

    def __init__(self, id=None, allowed_permissions=None, component_name=None, component_short_name=None, enabled=None, permissions=None, local_vars_configuration=None):  # noqa: E501
        """StudyRoleComponentPermissionsRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._allowed_permissions = None
        self._component_name = None
        self._component_short_name = None
        self._enabled = None
        self._permissions = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if allowed_permissions is not None:
            self.allowed_permissions = allowed_permissions
        if component_name is not None:
            self.component_name = component_name
        if component_short_name is not None:
            self.component_short_name = component_short_name
        if enabled is not None:
            self.enabled = enabled
        if permissions is not None:
            self.permissions = permissions

    @property
    def id(self):
        """Gets the id of this StudyRoleComponentPermissionsRpc.  # noqa: E501


        :return: The id of this StudyRoleComponentPermissionsRpc.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StudyRoleComponentPermissionsRpc.


        :param id: The id of this StudyRoleComponentPermissionsRpc.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def allowed_permissions(self):
        """Gets the allowed_permissions of this StudyRoleComponentPermissionsRpc.  # noqa: E501


        :return: The allowed_permissions of this StudyRoleComponentPermissionsRpc.  # noqa: E501
        :rtype: list[GenericItem]
        """
        return self._allowed_permissions

    @allowed_permissions.setter
    def allowed_permissions(self, allowed_permissions):
        """Sets the allowed_permissions of this StudyRoleComponentPermissionsRpc.


        :param allowed_permissions: The allowed_permissions of this StudyRoleComponentPermissionsRpc.  # noqa: E501
        :type: list[GenericItem]
        """

        self._allowed_permissions = allowed_permissions

    @property
    def component_name(self):
        """Gets the component_name of this StudyRoleComponentPermissionsRpc.  # noqa: E501


        :return: The component_name of this StudyRoleComponentPermissionsRpc.  # noqa: E501
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name):
        """Sets the component_name of this StudyRoleComponentPermissionsRpc.


        :param component_name: The component_name of this StudyRoleComponentPermissionsRpc.  # noqa: E501
        :type: str
        """

        self._component_name = component_name

    @property
    def component_short_name(self):
        """Gets the component_short_name of this StudyRoleComponentPermissionsRpc.  # noqa: E501


        :return: The component_short_name of this StudyRoleComponentPermissionsRpc.  # noqa: E501
        :rtype: str
        """
        return self._component_short_name

    @component_short_name.setter
    def component_short_name(self, component_short_name):
        """Sets the component_short_name of this StudyRoleComponentPermissionsRpc.


        :param component_short_name: The component_short_name of this StudyRoleComponentPermissionsRpc.  # noqa: E501
        :type: str
        """

        self._component_short_name = component_short_name

    @property
    def enabled(self):
        """Gets the enabled of this StudyRoleComponentPermissionsRpc.  # noqa: E501


        :return: The enabled of this StudyRoleComponentPermissionsRpc.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this StudyRoleComponentPermissionsRpc.


        :param enabled: The enabled of this StudyRoleComponentPermissionsRpc.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def permissions(self):
        """Gets the permissions of this StudyRoleComponentPermissionsRpc.  # noqa: E501


        :return: The permissions of this StudyRoleComponentPermissionsRpc.  # noqa: E501
        :rtype: list[int]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this StudyRoleComponentPermissionsRpc.


        :param permissions: The permissions of this StudyRoleComponentPermissionsRpc.  # noqa: E501
        :type: list[int]
        """

        self._permissions = permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudyRoleComponentPermissionsRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StudyRoleComponentPermissionsRpc):
            return True

        return self.to_dict() != other.to_dict()
