# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ODMcomplexTypeDefinitionSubjectData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'audit_record': 'ODMcomplexTypeDefinitionAuditRecord',
        'signature': 'ODMcomplexTypeDefinitionSignature',
        'investigator_ref': 'ODMcomplexTypeDefinitionInvestigatorRef',
        'site_ref': 'ODMcomplexTypeDefinitionSiteRef',
        'annotation': 'list[ODMcomplexTypeDefinitionAnnotation]',
        'study_event_data': 'list[ODMcomplexTypeDefinitionStudyEventData]',
        'subject_key': 'str',
        'transaction_type': 'str',
        'study_subject_id': 'str',
        'subject_screening_number': 'str',
        'subject_creation_date': 'datetime',
        'subject_screening_date': 'datetime',
        'study_group_name': 'str',
        'study_subject_initials': 'str',
        'study_subject_date_of_birth': 'datetime',
        'study_subject_email': 'str',
        'screening_failure_notes': 'str',
        'enrollment_failure_notes': 'str',
        'enrollment_date': 'datetime',
        'latest_reassignment_date': 'datetime',
        'status': 'str',
        'states_history': 'str',
        'dynamic_group_class': 'str',
        'patient_identifier': 'str',
        'engage_uuid': 'str',
        'form_name': 'str',
        'custom_enroll_crf': 'bool',
        'screening_crf_passed': 'str',
        'enrollment_confirmed': 'str',
        'study_events': 'StudyEvents',
        'econsent_status': 'str',
        'crfversion': 'str',
        'econsent_screening_crf_passed': 'str'
    }

    attribute_map = {
        'audit_record': 'auditRecord',
        'signature': 'signature',
        'investigator_ref': 'investigatorRef',
        'site_ref': 'siteRef',
        'annotation': 'annotation',
        'study_event_data': 'studyEventData',
        'subject_key': 'subjectKey',
        'transaction_type': 'transactionType',
        'study_subject_id': 'studySubjectID',
        'subject_screening_number': 'subjectScreeningNumber',
        'subject_creation_date': 'subjectCreationDate',
        'subject_screening_date': 'subjectScreeningDate',
        'study_group_name': 'studyGroupName',
        'study_subject_initials': 'studySubjectInitials',
        'study_subject_date_of_birth': 'studySubjectDateOfBirth',
        'study_subject_email': 'studySubjectEmail',
        'screening_failure_notes': 'screeningFailureNotes',
        'enrollment_failure_notes': 'enrollmentFailureNotes',
        'enrollment_date': 'enrollmentDate',
        'latest_reassignment_date': 'latestReassignmentDate',
        'status': 'status',
        'states_history': 'statesHistory',
        'dynamic_group_class': 'dynamicGroupClass',
        'patient_identifier': 'patientIdentifier',
        'engage_uuid': 'engageUUID',
        'form_name': 'formName',
        'custom_enroll_crf': 'customEnrollCrf',
        'screening_crf_passed': 'screeningCrfPassed',
        'enrollment_confirmed': 'enrollmentConfirmed',
        'study_events': 'studyEvents',
        'econsent_status': 'econsentStatus',
        'crfversion': 'crfversion',
        'econsent_screening_crf_passed': 'econsentScreeningCrfPassed'
    }

    def __init__(self, audit_record=None, signature=None, investigator_ref=None, site_ref=None, annotation=None, study_event_data=None, subject_key=None, transaction_type=None, study_subject_id=None, subject_screening_number=None, subject_creation_date=None, subject_screening_date=None, study_group_name=None, study_subject_initials=None, study_subject_date_of_birth=None, study_subject_email=None, screening_failure_notes=None, enrollment_failure_notes=None, enrollment_date=None, latest_reassignment_date=None, status=None, states_history=None, dynamic_group_class=None, patient_identifier=None, engage_uuid=None, form_name=None, custom_enroll_crf=None, screening_crf_passed=None, enrollment_confirmed=None, study_events=None, econsent_status=None, crfversion=None, econsent_screening_crf_passed=None, local_vars_configuration=None):  # noqa: E501
        """ODMcomplexTypeDefinitionSubjectData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._audit_record = None
        self._signature = None
        self._investigator_ref = None
        self._site_ref = None
        self._annotation = None
        self._study_event_data = None
        self._subject_key = None
        self._transaction_type = None
        self._study_subject_id = None
        self._subject_screening_number = None
        self._subject_creation_date = None
        self._subject_screening_date = None
        self._study_group_name = None
        self._study_subject_initials = None
        self._study_subject_date_of_birth = None
        self._study_subject_email = None
        self._screening_failure_notes = None
        self._enrollment_failure_notes = None
        self._enrollment_date = None
        self._latest_reassignment_date = None
        self._status = None
        self._states_history = None
        self._dynamic_group_class = None
        self._patient_identifier = None
        self._engage_uuid = None
        self._form_name = None
        self._custom_enroll_crf = None
        self._screening_crf_passed = None
        self._enrollment_confirmed = None
        self._study_events = None
        self._econsent_status = None
        self._crfversion = None
        self._econsent_screening_crf_passed = None
        self.discriminator = None

        if audit_record is not None:
            self.audit_record = audit_record
        if signature is not None:
            self.signature = signature
        if investigator_ref is not None:
            self.investigator_ref = investigator_ref
        if site_ref is not None:
            self.site_ref = site_ref
        if annotation is not None:
            self.annotation = annotation
        if study_event_data is not None:
            self.study_event_data = study_event_data
        if subject_key is not None:
            self.subject_key = subject_key
        if transaction_type is not None:
            self.transaction_type = transaction_type
        if study_subject_id is not None:
            self.study_subject_id = study_subject_id
        if subject_screening_number is not None:
            self.subject_screening_number = subject_screening_number
        if subject_creation_date is not None:
            self.subject_creation_date = subject_creation_date
        if subject_screening_date is not None:
            self.subject_screening_date = subject_screening_date
        if study_group_name is not None:
            self.study_group_name = study_group_name
        if study_subject_initials is not None:
            self.study_subject_initials = study_subject_initials
        if study_subject_date_of_birth is not None:
            self.study_subject_date_of_birth = study_subject_date_of_birth
        if study_subject_email is not None:
            self.study_subject_email = study_subject_email
        if screening_failure_notes is not None:
            self.screening_failure_notes = screening_failure_notes
        if enrollment_failure_notes is not None:
            self.enrollment_failure_notes = enrollment_failure_notes
        if enrollment_date is not None:
            self.enrollment_date = enrollment_date
        if latest_reassignment_date is not None:
            self.latest_reassignment_date = latest_reassignment_date
        if status is not None:
            self.status = status
        if states_history is not None:
            self.states_history = states_history
        if dynamic_group_class is not None:
            self.dynamic_group_class = dynamic_group_class
        if patient_identifier is not None:
            self.patient_identifier = patient_identifier
        if engage_uuid is not None:
            self.engage_uuid = engage_uuid
        if form_name is not None:
            self.form_name = form_name
        if custom_enroll_crf is not None:
            self.custom_enroll_crf = custom_enroll_crf
        if screening_crf_passed is not None:
            self.screening_crf_passed = screening_crf_passed
        if enrollment_confirmed is not None:
            self.enrollment_confirmed = enrollment_confirmed
        self.study_events = study_events
        if econsent_status is not None:
            self.econsent_status = econsent_status
        if crfversion is not None:
            self.crfversion = crfversion
        if econsent_screening_crf_passed is not None:
            self.econsent_screening_crf_passed = econsent_screening_crf_passed

    @property
    def audit_record(self):
        """Gets the audit_record of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The audit_record of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionAuditRecord
        """
        return self._audit_record

    @audit_record.setter
    def audit_record(self, audit_record):
        """Sets the audit_record of this ODMcomplexTypeDefinitionSubjectData.


        :param audit_record: The audit_record of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: ODMcomplexTypeDefinitionAuditRecord
        """

        self._audit_record = audit_record

    @property
    def signature(self):
        """Gets the signature of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The signature of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionSignature
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this ODMcomplexTypeDefinitionSubjectData.


        :param signature: The signature of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: ODMcomplexTypeDefinitionSignature
        """

        self._signature = signature

    @property
    def investigator_ref(self):
        """Gets the investigator_ref of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The investigator_ref of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionInvestigatorRef
        """
        return self._investigator_ref

    @investigator_ref.setter
    def investigator_ref(self, investigator_ref):
        """Sets the investigator_ref of this ODMcomplexTypeDefinitionSubjectData.


        :param investigator_ref: The investigator_ref of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: ODMcomplexTypeDefinitionInvestigatorRef
        """

        self._investigator_ref = investigator_ref

    @property
    def site_ref(self):
        """Gets the site_ref of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The site_ref of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionSiteRef
        """
        return self._site_ref

    @site_ref.setter
    def site_ref(self, site_ref):
        """Sets the site_ref of this ODMcomplexTypeDefinitionSubjectData.


        :param site_ref: The site_ref of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: ODMcomplexTypeDefinitionSiteRef
        """

        self._site_ref = site_ref

    @property
    def annotation(self):
        """Gets the annotation of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The annotation of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionAnnotation]
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this ODMcomplexTypeDefinitionSubjectData.


        :param annotation: The annotation of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionAnnotation]
        """

        self._annotation = annotation

    @property
    def study_event_data(self):
        """Gets the study_event_data of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The study_event_data of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionStudyEventData]
        """
        return self._study_event_data

    @study_event_data.setter
    def study_event_data(self, study_event_data):
        """Sets the study_event_data of this ODMcomplexTypeDefinitionSubjectData.


        :param study_event_data: The study_event_data of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionStudyEventData]
        """

        self._study_event_data = study_event_data

    @property
    def subject_key(self):
        """Gets the subject_key of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The subject_key of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._subject_key

    @subject_key.setter
    def subject_key(self, subject_key):
        """Sets the subject_key of this ODMcomplexTypeDefinitionSubjectData.


        :param subject_key: The subject_key of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._subject_key = subject_key

    @property
    def transaction_type(self):
        """Gets the transaction_type of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The transaction_type of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this ODMcomplexTypeDefinitionSubjectData.


        :param transaction_type: The transaction_type of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """
        allowed_values = ["INSERT", "UPDATE", "REMOVE", "UPSERT", "CONTEXT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and transaction_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `transaction_type` ({0}), must be one of {1}"  # noqa: E501
                .format(transaction_type, allowed_values)
            )

        self._transaction_type = transaction_type

    @property
    def study_subject_id(self):
        """Gets the study_subject_id of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The study_subject_id of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._study_subject_id

    @study_subject_id.setter
    def study_subject_id(self, study_subject_id):
        """Sets the study_subject_id of this ODMcomplexTypeDefinitionSubjectData.


        :param study_subject_id: The study_subject_id of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._study_subject_id = study_subject_id

    @property
    def subject_screening_number(self):
        """Gets the subject_screening_number of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The subject_screening_number of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._subject_screening_number

    @subject_screening_number.setter
    def subject_screening_number(self, subject_screening_number):
        """Sets the subject_screening_number of this ODMcomplexTypeDefinitionSubjectData.


        :param subject_screening_number: The subject_screening_number of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._subject_screening_number = subject_screening_number

    @property
    def subject_creation_date(self):
        """Gets the subject_creation_date of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The subject_creation_date of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: datetime
        """
        return self._subject_creation_date

    @subject_creation_date.setter
    def subject_creation_date(self, subject_creation_date):
        """Sets the subject_creation_date of this ODMcomplexTypeDefinitionSubjectData.


        :param subject_creation_date: The subject_creation_date of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: datetime
        """

        self._subject_creation_date = subject_creation_date

    @property
    def subject_screening_date(self):
        """Gets the subject_screening_date of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The subject_screening_date of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: datetime
        """
        return self._subject_screening_date

    @subject_screening_date.setter
    def subject_screening_date(self, subject_screening_date):
        """Sets the subject_screening_date of this ODMcomplexTypeDefinitionSubjectData.


        :param subject_screening_date: The subject_screening_date of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: datetime
        """

        self._subject_screening_date = subject_screening_date

    @property
    def study_group_name(self):
        """Gets the study_group_name of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The study_group_name of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._study_group_name

    @study_group_name.setter
    def study_group_name(self, study_group_name):
        """Sets the study_group_name of this ODMcomplexTypeDefinitionSubjectData.


        :param study_group_name: The study_group_name of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._study_group_name = study_group_name

    @property
    def study_subject_initials(self):
        """Gets the study_subject_initials of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The study_subject_initials of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._study_subject_initials

    @study_subject_initials.setter
    def study_subject_initials(self, study_subject_initials):
        """Sets the study_subject_initials of this ODMcomplexTypeDefinitionSubjectData.


        :param study_subject_initials: The study_subject_initials of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._study_subject_initials = study_subject_initials

    @property
    def study_subject_date_of_birth(self):
        """Gets the study_subject_date_of_birth of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The study_subject_date_of_birth of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: datetime
        """
        return self._study_subject_date_of_birth

    @study_subject_date_of_birth.setter
    def study_subject_date_of_birth(self, study_subject_date_of_birth):
        """Sets the study_subject_date_of_birth of this ODMcomplexTypeDefinitionSubjectData.


        :param study_subject_date_of_birth: The study_subject_date_of_birth of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: datetime
        """

        self._study_subject_date_of_birth = study_subject_date_of_birth

    @property
    def study_subject_email(self):
        """Gets the study_subject_email of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The study_subject_email of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._study_subject_email

    @study_subject_email.setter
    def study_subject_email(self, study_subject_email):
        """Sets the study_subject_email of this ODMcomplexTypeDefinitionSubjectData.


        :param study_subject_email: The study_subject_email of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._study_subject_email = study_subject_email

    @property
    def screening_failure_notes(self):
        """Gets the screening_failure_notes of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The screening_failure_notes of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._screening_failure_notes

    @screening_failure_notes.setter
    def screening_failure_notes(self, screening_failure_notes):
        """Sets the screening_failure_notes of this ODMcomplexTypeDefinitionSubjectData.


        :param screening_failure_notes: The screening_failure_notes of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._screening_failure_notes = screening_failure_notes

    @property
    def enrollment_failure_notes(self):
        """Gets the enrollment_failure_notes of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The enrollment_failure_notes of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_failure_notes

    @enrollment_failure_notes.setter
    def enrollment_failure_notes(self, enrollment_failure_notes):
        """Sets the enrollment_failure_notes of this ODMcomplexTypeDefinitionSubjectData.


        :param enrollment_failure_notes: The enrollment_failure_notes of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._enrollment_failure_notes = enrollment_failure_notes

    @property
    def enrollment_date(self):
        """Gets the enrollment_date of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The enrollment_date of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: datetime
        """
        return self._enrollment_date

    @enrollment_date.setter
    def enrollment_date(self, enrollment_date):
        """Sets the enrollment_date of this ODMcomplexTypeDefinitionSubjectData.


        :param enrollment_date: The enrollment_date of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: datetime
        """

        self._enrollment_date = enrollment_date

    @property
    def latest_reassignment_date(self):
        """Gets the latest_reassignment_date of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The latest_reassignment_date of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: datetime
        """
        return self._latest_reassignment_date

    @latest_reassignment_date.setter
    def latest_reassignment_date(self, latest_reassignment_date):
        """Sets the latest_reassignment_date of this ODMcomplexTypeDefinitionSubjectData.


        :param latest_reassignment_date: The latest_reassignment_date of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: datetime
        """

        self._latest_reassignment_date = latest_reassignment_date

    @property
    def status(self):
        """Gets the status of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The status of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ODMcomplexTypeDefinitionSubjectData.


        :param status: The status of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def states_history(self):
        """Gets the states_history of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The states_history of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._states_history

    @states_history.setter
    def states_history(self, states_history):
        """Sets the states_history of this ODMcomplexTypeDefinitionSubjectData.


        :param states_history: The states_history of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._states_history = states_history

    @property
    def dynamic_group_class(self):
        """Gets the dynamic_group_class of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The dynamic_group_class of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._dynamic_group_class

    @dynamic_group_class.setter
    def dynamic_group_class(self, dynamic_group_class):
        """Sets the dynamic_group_class of this ODMcomplexTypeDefinitionSubjectData.


        :param dynamic_group_class: The dynamic_group_class of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._dynamic_group_class = dynamic_group_class

    @property
    def patient_identifier(self):
        """Gets the patient_identifier of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The patient_identifier of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._patient_identifier

    @patient_identifier.setter
    def patient_identifier(self, patient_identifier):
        """Sets the patient_identifier of this ODMcomplexTypeDefinitionSubjectData.


        :param patient_identifier: The patient_identifier of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._patient_identifier = patient_identifier

    @property
    def engage_uuid(self):
        """Gets the engage_uuid of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The engage_uuid of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._engage_uuid

    @engage_uuid.setter
    def engage_uuid(self, engage_uuid):
        """Sets the engage_uuid of this ODMcomplexTypeDefinitionSubjectData.


        :param engage_uuid: The engage_uuid of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._engage_uuid = engage_uuid

    @property
    def form_name(self):
        """Gets the form_name of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The form_name of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._form_name

    @form_name.setter
    def form_name(self, form_name):
        """Sets the form_name of this ODMcomplexTypeDefinitionSubjectData.


        :param form_name: The form_name of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._form_name = form_name

    @property
    def custom_enroll_crf(self):
        """Gets the custom_enroll_crf of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The custom_enroll_crf of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: bool
        """
        return self._custom_enroll_crf

    @custom_enroll_crf.setter
    def custom_enroll_crf(self, custom_enroll_crf):
        """Sets the custom_enroll_crf of this ODMcomplexTypeDefinitionSubjectData.


        :param custom_enroll_crf: The custom_enroll_crf of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: bool
        """

        self._custom_enroll_crf = custom_enroll_crf

    @property
    def screening_crf_passed(self):
        """Gets the screening_crf_passed of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The screening_crf_passed of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._screening_crf_passed

    @screening_crf_passed.setter
    def screening_crf_passed(self, screening_crf_passed):
        """Sets the screening_crf_passed of this ODMcomplexTypeDefinitionSubjectData.


        :param screening_crf_passed: The screening_crf_passed of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._screening_crf_passed = screening_crf_passed

    @property
    def enrollment_confirmed(self):
        """Gets the enrollment_confirmed of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The enrollment_confirmed of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._enrollment_confirmed

    @enrollment_confirmed.setter
    def enrollment_confirmed(self, enrollment_confirmed):
        """Sets the enrollment_confirmed of this ODMcomplexTypeDefinitionSubjectData.


        :param enrollment_confirmed: The enrollment_confirmed of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._enrollment_confirmed = enrollment_confirmed

    @property
    def study_events(self):
        """Gets the study_events of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The study_events of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: StudyEvents
        """
        return self._study_events

    @study_events.setter
    def study_events(self, study_events):
        """Sets the study_events of this ODMcomplexTypeDefinitionSubjectData.


        :param study_events: The study_events of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: StudyEvents
        """
        if self.local_vars_configuration.client_side_validation and study_events is None:  # noqa: E501
            raise ValueError("Invalid value for `study_events`, must not be `None`")  # noqa: E501

        self._study_events = study_events

    @property
    def econsent_status(self):
        """Gets the econsent_status of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The econsent_status of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._econsent_status

    @econsent_status.setter
    def econsent_status(self, econsent_status):
        """Sets the econsent_status of this ODMcomplexTypeDefinitionSubjectData.


        :param econsent_status: The econsent_status of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._econsent_status = econsent_status

    @property
    def crfversion(self):
        """Gets the crfversion of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The crfversion of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._crfversion

    @crfversion.setter
    def crfversion(self, crfversion):
        """Sets the crfversion of this ODMcomplexTypeDefinitionSubjectData.


        :param crfversion: The crfversion of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._crfversion = crfversion

    @property
    def econsent_screening_crf_passed(self):
        """Gets the econsent_screening_crf_passed of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501


        :return: The econsent_screening_crf_passed of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :rtype: str
        """
        return self._econsent_screening_crf_passed

    @econsent_screening_crf_passed.setter
    def econsent_screening_crf_passed(self, econsent_screening_crf_passed):
        """Sets the econsent_screening_crf_passed of this ODMcomplexTypeDefinitionSubjectData.


        :param econsent_screening_crf_passed: The econsent_screening_crf_passed of this ODMcomplexTypeDefinitionSubjectData.  # noqa: E501
        :type: str
        """

        self._econsent_screening_crf_passed = econsent_screening_crf_passed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionSubjectData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionSubjectData):
            return True

        return self.to_dict() != other.to_dict()
