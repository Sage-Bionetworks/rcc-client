# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ItemGroupRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'add_lookup_code_by_group_type': 'str',
        'section_rpc': 'SectionRpc',
        'name': 'str',
        'rc_oid': 'str',
        'display_sequence': 'float',
        'group_branching_equation': 'str',
        'dummy_flag': 'bool',
        'fixed_rows_flag': 'bool',
        'group_row_list': 'list[ItemGroupRowRpc]',
        'group_column_list': 'list[ItemGroupColumnRpc]'
    }

    attribute_map = {
        'id': 'id',
        'add_lookup_code_by_group_type': 'addLookupCodeByGroupType',
        'section_rpc': 'sectionRpc',
        'name': 'name',
        'rc_oid': 'rcOid',
        'display_sequence': 'displaySequence',
        'group_branching_equation': 'groupBranchingEquation',
        'dummy_flag': 'dummyFlag',
        'fixed_rows_flag': 'fixedRowsFlag',
        'group_row_list': 'groupRowList',
        'group_column_list': 'groupColumnList'
    }

    def __init__(self, id=None, add_lookup_code_by_group_type=None, section_rpc=None, name=None, rc_oid=None, display_sequence=None, group_branching_equation=None, dummy_flag=None, fixed_rows_flag=None, group_row_list=None, group_column_list=None, local_vars_configuration=None):  # noqa: E501
        """ItemGroupRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._add_lookup_code_by_group_type = None
        self._section_rpc = None
        self._name = None
        self._rc_oid = None
        self._display_sequence = None
        self._group_branching_equation = None
        self._dummy_flag = None
        self._fixed_rows_flag = None
        self._group_row_list = None
        self._group_column_list = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if add_lookup_code_by_group_type is not None:
            self.add_lookup_code_by_group_type = add_lookup_code_by_group_type
        if section_rpc is not None:
            self.section_rpc = section_rpc
        if name is not None:
            self.name = name
        if rc_oid is not None:
            self.rc_oid = rc_oid
        if display_sequence is not None:
            self.display_sequence = display_sequence
        if group_branching_equation is not None:
            self.group_branching_equation = group_branching_equation
        if dummy_flag is not None:
            self.dummy_flag = dummy_flag
        if fixed_rows_flag is not None:
            self.fixed_rows_flag = fixed_rows_flag
        if group_row_list is not None:
            self.group_row_list = group_row_list
        if group_column_list is not None:
            self.group_column_list = group_column_list

    @property
    def id(self):
        """Gets the id of this ItemGroupRpc.  # noqa: E501


        :return: The id of this ItemGroupRpc.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ItemGroupRpc.


        :param id: The id of this ItemGroupRpc.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def add_lookup_code_by_group_type(self):
        """Gets the add_lookup_code_by_group_type of this ItemGroupRpc.  # noqa: E501


        :return: The add_lookup_code_by_group_type of this ItemGroupRpc.  # noqa: E501
        :rtype: str
        """
        return self._add_lookup_code_by_group_type

    @add_lookup_code_by_group_type.setter
    def add_lookup_code_by_group_type(self, add_lookup_code_by_group_type):
        """Sets the add_lookup_code_by_group_type of this ItemGroupRpc.


        :param add_lookup_code_by_group_type: The add_lookup_code_by_group_type of this ItemGroupRpc.  # noqa: E501
        :type: str
        """

        self._add_lookup_code_by_group_type = add_lookup_code_by_group_type

    @property
    def section_rpc(self):
        """Gets the section_rpc of this ItemGroupRpc.  # noqa: E501


        :return: The section_rpc of this ItemGroupRpc.  # noqa: E501
        :rtype: SectionRpc
        """
        return self._section_rpc

    @section_rpc.setter
    def section_rpc(self, section_rpc):
        """Sets the section_rpc of this ItemGroupRpc.


        :param section_rpc: The section_rpc of this ItemGroupRpc.  # noqa: E501
        :type: SectionRpc
        """

        self._section_rpc = section_rpc

    @property
    def name(self):
        """Gets the name of this ItemGroupRpc.  # noqa: E501


        :return: The name of this ItemGroupRpc.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ItemGroupRpc.


        :param name: The name of this ItemGroupRpc.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def rc_oid(self):
        """Gets the rc_oid of this ItemGroupRpc.  # noqa: E501


        :return: The rc_oid of this ItemGroupRpc.  # noqa: E501
        :rtype: str
        """
        return self._rc_oid

    @rc_oid.setter
    def rc_oid(self, rc_oid):
        """Sets the rc_oid of this ItemGroupRpc.


        :param rc_oid: The rc_oid of this ItemGroupRpc.  # noqa: E501
        :type: str
        """

        self._rc_oid = rc_oid

    @property
    def display_sequence(self):
        """Gets the display_sequence of this ItemGroupRpc.  # noqa: E501


        :return: The display_sequence of this ItemGroupRpc.  # noqa: E501
        :rtype: float
        """
        return self._display_sequence

    @display_sequence.setter
    def display_sequence(self, display_sequence):
        """Sets the display_sequence of this ItemGroupRpc.


        :param display_sequence: The display_sequence of this ItemGroupRpc.  # noqa: E501
        :type: float
        """

        self._display_sequence = display_sequence

    @property
    def group_branching_equation(self):
        """Gets the group_branching_equation of this ItemGroupRpc.  # noqa: E501


        :return: The group_branching_equation of this ItemGroupRpc.  # noqa: E501
        :rtype: str
        """
        return self._group_branching_equation

    @group_branching_equation.setter
    def group_branching_equation(self, group_branching_equation):
        """Sets the group_branching_equation of this ItemGroupRpc.


        :param group_branching_equation: The group_branching_equation of this ItemGroupRpc.  # noqa: E501
        :type: str
        """

        self._group_branching_equation = group_branching_equation

    @property
    def dummy_flag(self):
        """Gets the dummy_flag of this ItemGroupRpc.  # noqa: E501


        :return: The dummy_flag of this ItemGroupRpc.  # noqa: E501
        :rtype: bool
        """
        return self._dummy_flag

    @dummy_flag.setter
    def dummy_flag(self, dummy_flag):
        """Sets the dummy_flag of this ItemGroupRpc.


        :param dummy_flag: The dummy_flag of this ItemGroupRpc.  # noqa: E501
        :type: bool
        """

        self._dummy_flag = dummy_flag

    @property
    def fixed_rows_flag(self):
        """Gets the fixed_rows_flag of this ItemGroupRpc.  # noqa: E501


        :return: The fixed_rows_flag of this ItemGroupRpc.  # noqa: E501
        :rtype: bool
        """
        return self._fixed_rows_flag

    @fixed_rows_flag.setter
    def fixed_rows_flag(self, fixed_rows_flag):
        """Sets the fixed_rows_flag of this ItemGroupRpc.


        :param fixed_rows_flag: The fixed_rows_flag of this ItemGroupRpc.  # noqa: E501
        :type: bool
        """

        self._fixed_rows_flag = fixed_rows_flag

    @property
    def group_row_list(self):
        """Gets the group_row_list of this ItemGroupRpc.  # noqa: E501


        :return: The group_row_list of this ItemGroupRpc.  # noqa: E501
        :rtype: list[ItemGroupRowRpc]
        """
        return self._group_row_list

    @group_row_list.setter
    def group_row_list(self, group_row_list):
        """Sets the group_row_list of this ItemGroupRpc.


        :param group_row_list: The group_row_list of this ItemGroupRpc.  # noqa: E501
        :type: list[ItemGroupRowRpc]
        """

        self._group_row_list = group_row_list

    @property
    def group_column_list(self):
        """Gets the group_column_list of this ItemGroupRpc.  # noqa: E501


        :return: The group_column_list of this ItemGroupRpc.  # noqa: E501
        :rtype: list[ItemGroupColumnRpc]
        """
        return self._group_column_list

    @group_column_list.setter
    def group_column_list(self, group_column_list):
        """Sets the group_column_list of this ItemGroupRpc.


        :param group_column_list: The group_column_list of this ItemGroupRpc.  # noqa: E501
        :type: list[ItemGroupColumnRpc]
        """

        self._group_column_list = group_column_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemGroupRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemGroupRpc):
            return True

        return self.to_dict() != other.to_dict()
