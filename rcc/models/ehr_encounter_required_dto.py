# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class EhrEncounterRequiredDto(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'encounter_id': 'str',
        'encounter_id_aux': 'str',
        'parent_encounter_id': 'str',
        'encounter_date': 'str',
        'encounter_code': 'str',
        'encounter_codes': 'list[str]',
        'mrn': 'str',
        'mrns': 'list[str]',
        'first_not_empty_encounter_id': 'str'
    }

    attribute_map = {
        'encounter_id': 'encounterId',
        'encounter_id_aux': 'encounterIdAux',
        'parent_encounter_id': 'parentEncounterId',
        'encounter_date': 'encounterDate',
        'encounter_code': 'encounterCode',
        'encounter_codes': 'encounterCodes',
        'mrn': 'mrn',
        'mrns': 'mrns',
        'first_not_empty_encounter_id': 'firstNotEmptyEncounterId'
    }

    def __init__(self, encounter_id=None, encounter_id_aux=None, parent_encounter_id=None, encounter_date=None, encounter_code=None, encounter_codes=None, mrn=None, mrns=None, first_not_empty_encounter_id=None, local_vars_configuration=None):  # noqa: E501
        """EhrEncounterRequiredDto - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._encounter_id = None
        self._encounter_id_aux = None
        self._parent_encounter_id = None
        self._encounter_date = None
        self._encounter_code = None
        self._encounter_codes = None
        self._mrn = None
        self._mrns = None
        self._first_not_empty_encounter_id = None
        self.discriminator = None

        if encounter_id is not None:
            self.encounter_id = encounter_id
        if encounter_id_aux is not None:
            self.encounter_id_aux = encounter_id_aux
        if parent_encounter_id is not None:
            self.parent_encounter_id = parent_encounter_id
        if encounter_date is not None:
            self.encounter_date = encounter_date
        if encounter_code is not None:
            self.encounter_code = encounter_code
        if encounter_codes is not None:
            self.encounter_codes = encounter_codes
        if mrn is not None:
            self.mrn = mrn
        if mrns is not None:
            self.mrns = mrns
        if first_not_empty_encounter_id is not None:
            self.first_not_empty_encounter_id = first_not_empty_encounter_id

    @property
    def encounter_id(self):
        """Gets the encounter_id of this EhrEncounterRequiredDto.  # noqa: E501


        :return: The encounter_id of this EhrEncounterRequiredDto.  # noqa: E501
        :rtype: str
        """
        return self._encounter_id

    @encounter_id.setter
    def encounter_id(self, encounter_id):
        """Sets the encounter_id of this EhrEncounterRequiredDto.


        :param encounter_id: The encounter_id of this EhrEncounterRequiredDto.  # noqa: E501
        :type: str
        """

        self._encounter_id = encounter_id

    @property
    def encounter_id_aux(self):
        """Gets the encounter_id_aux of this EhrEncounterRequiredDto.  # noqa: E501


        :return: The encounter_id_aux of this EhrEncounterRequiredDto.  # noqa: E501
        :rtype: str
        """
        return self._encounter_id_aux

    @encounter_id_aux.setter
    def encounter_id_aux(self, encounter_id_aux):
        """Sets the encounter_id_aux of this EhrEncounterRequiredDto.


        :param encounter_id_aux: The encounter_id_aux of this EhrEncounterRequiredDto.  # noqa: E501
        :type: str
        """

        self._encounter_id_aux = encounter_id_aux

    @property
    def parent_encounter_id(self):
        """Gets the parent_encounter_id of this EhrEncounterRequiredDto.  # noqa: E501


        :return: The parent_encounter_id of this EhrEncounterRequiredDto.  # noqa: E501
        :rtype: str
        """
        return self._parent_encounter_id

    @parent_encounter_id.setter
    def parent_encounter_id(self, parent_encounter_id):
        """Sets the parent_encounter_id of this EhrEncounterRequiredDto.


        :param parent_encounter_id: The parent_encounter_id of this EhrEncounterRequiredDto.  # noqa: E501
        :type: str
        """

        self._parent_encounter_id = parent_encounter_id

    @property
    def encounter_date(self):
        """Gets the encounter_date of this EhrEncounterRequiredDto.  # noqa: E501


        :return: The encounter_date of this EhrEncounterRequiredDto.  # noqa: E501
        :rtype: str
        """
        return self._encounter_date

    @encounter_date.setter
    def encounter_date(self, encounter_date):
        """Sets the encounter_date of this EhrEncounterRequiredDto.


        :param encounter_date: The encounter_date of this EhrEncounterRequiredDto.  # noqa: E501
        :type: str
        """

        self._encounter_date = encounter_date

    @property
    def encounter_code(self):
        """Gets the encounter_code of this EhrEncounterRequiredDto.  # noqa: E501


        :return: The encounter_code of this EhrEncounterRequiredDto.  # noqa: E501
        :rtype: str
        """
        return self._encounter_code

    @encounter_code.setter
    def encounter_code(self, encounter_code):
        """Sets the encounter_code of this EhrEncounterRequiredDto.


        :param encounter_code: The encounter_code of this EhrEncounterRequiredDto.  # noqa: E501
        :type: str
        """

        self._encounter_code = encounter_code

    @property
    def encounter_codes(self):
        """Gets the encounter_codes of this EhrEncounterRequiredDto.  # noqa: E501


        :return: The encounter_codes of this EhrEncounterRequiredDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._encounter_codes

    @encounter_codes.setter
    def encounter_codes(self, encounter_codes):
        """Sets the encounter_codes of this EhrEncounterRequiredDto.


        :param encounter_codes: The encounter_codes of this EhrEncounterRequiredDto.  # noqa: E501
        :type: list[str]
        """

        self._encounter_codes = encounter_codes

    @property
    def mrn(self):
        """Gets the mrn of this EhrEncounterRequiredDto.  # noqa: E501


        :return: The mrn of this EhrEncounterRequiredDto.  # noqa: E501
        :rtype: str
        """
        return self._mrn

    @mrn.setter
    def mrn(self, mrn):
        """Sets the mrn of this EhrEncounterRequiredDto.


        :param mrn: The mrn of this EhrEncounterRequiredDto.  # noqa: E501
        :type: str
        """

        self._mrn = mrn

    @property
    def mrns(self):
        """Gets the mrns of this EhrEncounterRequiredDto.  # noqa: E501


        :return: The mrns of this EhrEncounterRequiredDto.  # noqa: E501
        :rtype: list[str]
        """
        return self._mrns

    @mrns.setter
    def mrns(self, mrns):
        """Sets the mrns of this EhrEncounterRequiredDto.


        :param mrns: The mrns of this EhrEncounterRequiredDto.  # noqa: E501
        :type: list[str]
        """

        self._mrns = mrns

    @property
    def first_not_empty_encounter_id(self):
        """Gets the first_not_empty_encounter_id of this EhrEncounterRequiredDto.  # noqa: E501


        :return: The first_not_empty_encounter_id of this EhrEncounterRequiredDto.  # noqa: E501
        :rtype: str
        """
        return self._first_not_empty_encounter_id

    @first_not_empty_encounter_id.setter
    def first_not_empty_encounter_id(self, first_not_empty_encounter_id):
        """Sets the first_not_empty_encounter_id of this EhrEncounterRequiredDto.


        :param first_not_empty_encounter_id: The first_not_empty_encounter_id of this EhrEncounterRequiredDto.  # noqa: E501
        :type: str
        """

        self._first_not_empty_encounter_id = first_not_empty_encounter_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EhrEncounterRequiredDto):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EhrEncounterRequiredDto):
            return True

        return self.to_dict() != other.to_dict()
