# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ItemDataValueRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'item_data_id': 'int',
        'item_data_id_client': 'int',
        'item_form_metadata_id': 'int',
        'variable_name': 'str',
        'data_type_id': 'int',
        'data_type': 'str',
        'old_values_in_readable_format': 'list[str]',
        'values': 'list[str]',
        'reason_for_change': 'str',
        'coded_items_rpc': 'MedicalCodedItemsRpc',
        'new_values_in_readable_format': 'list[str]',
        'temp_file_names': 'list[str]',
        'delete_files': 'list[int]',
        'value_index': 'int',
        'old_value_index': 'int',
        'update_audit_logs_and_queries_row_index': 'bool',
        'update_only_index': 'bool',
        'marked_for_complete_delete': 'bool',
        'item_data_sdv_state': 'bool'
    }

    attribute_map = {
        'item_data_id': 'itemDataId',
        'item_data_id_client': 'itemDataIdClient',
        'item_form_metadata_id': 'itemFormMetadataId',
        'variable_name': 'variableName',
        'data_type_id': 'dataTypeId',
        'data_type': 'dataType',
        'old_values_in_readable_format': 'oldValuesInReadableFormat',
        'values': 'values',
        'reason_for_change': 'reasonForChange',
        'coded_items_rpc': 'codedItemsRpc',
        'new_values_in_readable_format': 'newValuesInReadableFormat',
        'temp_file_names': 'tempFileNames',
        'delete_files': 'deleteFiles',
        'value_index': 'valueIndex',
        'old_value_index': 'oldValueIndex',
        'update_audit_logs_and_queries_row_index': 'updateAuditLogsAndQueriesRowIndex',
        'update_only_index': 'updateOnlyIndex',
        'marked_for_complete_delete': 'markedForCompleteDelete',
        'item_data_sdv_state': 'itemDataSdvState'
    }

    def __init__(self, item_data_id=None, item_data_id_client=None, item_form_metadata_id=None, variable_name=None, data_type_id=None, data_type=None, old_values_in_readable_format=None, values=None, reason_for_change=None, coded_items_rpc=None, new_values_in_readable_format=None, temp_file_names=None, delete_files=None, value_index=None, old_value_index=None, update_audit_logs_and_queries_row_index=None, update_only_index=None, marked_for_complete_delete=None, item_data_sdv_state=None, local_vars_configuration=None):  # noqa: E501
        """ItemDataValueRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._item_data_id = None
        self._item_data_id_client = None
        self._item_form_metadata_id = None
        self._variable_name = None
        self._data_type_id = None
        self._data_type = None
        self._old_values_in_readable_format = None
        self._values = None
        self._reason_for_change = None
        self._coded_items_rpc = None
        self._new_values_in_readable_format = None
        self._temp_file_names = None
        self._delete_files = None
        self._value_index = None
        self._old_value_index = None
        self._update_audit_logs_and_queries_row_index = None
        self._update_only_index = None
        self._marked_for_complete_delete = None
        self._item_data_sdv_state = None
        self.discriminator = None

        if item_data_id is not None:
            self.item_data_id = item_data_id
        if item_data_id_client is not None:
            self.item_data_id_client = item_data_id_client
        if item_form_metadata_id is not None:
            self.item_form_metadata_id = item_form_metadata_id
        if variable_name is not None:
            self.variable_name = variable_name
        if data_type_id is not None:
            self.data_type_id = data_type_id
        if data_type is not None:
            self.data_type = data_type
        if old_values_in_readable_format is not None:
            self.old_values_in_readable_format = old_values_in_readable_format
        if values is not None:
            self.values = values
        if reason_for_change is not None:
            self.reason_for_change = reason_for_change
        if coded_items_rpc is not None:
            self.coded_items_rpc = coded_items_rpc
        if new_values_in_readable_format is not None:
            self.new_values_in_readable_format = new_values_in_readable_format
        if temp_file_names is not None:
            self.temp_file_names = temp_file_names
        if delete_files is not None:
            self.delete_files = delete_files
        if value_index is not None:
            self.value_index = value_index
        if old_value_index is not None:
            self.old_value_index = old_value_index
        if update_audit_logs_and_queries_row_index is not None:
            self.update_audit_logs_and_queries_row_index = update_audit_logs_and_queries_row_index
        if update_only_index is not None:
            self.update_only_index = update_only_index
        if marked_for_complete_delete is not None:
            self.marked_for_complete_delete = marked_for_complete_delete
        if item_data_sdv_state is not None:
            self.item_data_sdv_state = item_data_sdv_state

    @property
    def item_data_id(self):
        """Gets the item_data_id of this ItemDataValueRpc.  # noqa: E501


        :return: The item_data_id of this ItemDataValueRpc.  # noqa: E501
        :rtype: int
        """
        return self._item_data_id

    @item_data_id.setter
    def item_data_id(self, item_data_id):
        """Sets the item_data_id of this ItemDataValueRpc.


        :param item_data_id: The item_data_id of this ItemDataValueRpc.  # noqa: E501
        :type: int
        """

        self._item_data_id = item_data_id

    @property
    def item_data_id_client(self):
        """Gets the item_data_id_client of this ItemDataValueRpc.  # noqa: E501


        :return: The item_data_id_client of this ItemDataValueRpc.  # noqa: E501
        :rtype: int
        """
        return self._item_data_id_client

    @item_data_id_client.setter
    def item_data_id_client(self, item_data_id_client):
        """Sets the item_data_id_client of this ItemDataValueRpc.


        :param item_data_id_client: The item_data_id_client of this ItemDataValueRpc.  # noqa: E501
        :type: int
        """

        self._item_data_id_client = item_data_id_client

    @property
    def item_form_metadata_id(self):
        """Gets the item_form_metadata_id of this ItemDataValueRpc.  # noqa: E501


        :return: The item_form_metadata_id of this ItemDataValueRpc.  # noqa: E501
        :rtype: int
        """
        return self._item_form_metadata_id

    @item_form_metadata_id.setter
    def item_form_metadata_id(self, item_form_metadata_id):
        """Sets the item_form_metadata_id of this ItemDataValueRpc.


        :param item_form_metadata_id: The item_form_metadata_id of this ItemDataValueRpc.  # noqa: E501
        :type: int
        """

        self._item_form_metadata_id = item_form_metadata_id

    @property
    def variable_name(self):
        """Gets the variable_name of this ItemDataValueRpc.  # noqa: E501


        :return: The variable_name of this ItemDataValueRpc.  # noqa: E501
        :rtype: str
        """
        return self._variable_name

    @variable_name.setter
    def variable_name(self, variable_name):
        """Sets the variable_name of this ItemDataValueRpc.


        :param variable_name: The variable_name of this ItemDataValueRpc.  # noqa: E501
        :type: str
        """

        self._variable_name = variable_name

    @property
    def data_type_id(self):
        """Gets the data_type_id of this ItemDataValueRpc.  # noqa: E501


        :return: The data_type_id of this ItemDataValueRpc.  # noqa: E501
        :rtype: int
        """
        return self._data_type_id

    @data_type_id.setter
    def data_type_id(self, data_type_id):
        """Sets the data_type_id of this ItemDataValueRpc.


        :param data_type_id: The data_type_id of this ItemDataValueRpc.  # noqa: E501
        :type: int
        """

        self._data_type_id = data_type_id

    @property
    def data_type(self):
        """Gets the data_type of this ItemDataValueRpc.  # noqa: E501


        :return: The data_type of this ItemDataValueRpc.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ItemDataValueRpc.


        :param data_type: The data_type of this ItemDataValueRpc.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def old_values_in_readable_format(self):
        """Gets the old_values_in_readable_format of this ItemDataValueRpc.  # noqa: E501


        :return: The old_values_in_readable_format of this ItemDataValueRpc.  # noqa: E501
        :rtype: list[str]
        """
        return self._old_values_in_readable_format

    @old_values_in_readable_format.setter
    def old_values_in_readable_format(self, old_values_in_readable_format):
        """Sets the old_values_in_readable_format of this ItemDataValueRpc.


        :param old_values_in_readable_format: The old_values_in_readable_format of this ItemDataValueRpc.  # noqa: E501
        :type: list[str]
        """

        self._old_values_in_readable_format = old_values_in_readable_format

    @property
    def values(self):
        """Gets the values of this ItemDataValueRpc.  # noqa: E501


        :return: The values of this ItemDataValueRpc.  # noqa: E501
        :rtype: list[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this ItemDataValueRpc.


        :param values: The values of this ItemDataValueRpc.  # noqa: E501
        :type: list[str]
        """

        self._values = values

    @property
    def reason_for_change(self):
        """Gets the reason_for_change of this ItemDataValueRpc.  # noqa: E501


        :return: The reason_for_change of this ItemDataValueRpc.  # noqa: E501
        :rtype: str
        """
        return self._reason_for_change

    @reason_for_change.setter
    def reason_for_change(self, reason_for_change):
        """Sets the reason_for_change of this ItemDataValueRpc.


        :param reason_for_change: The reason_for_change of this ItemDataValueRpc.  # noqa: E501
        :type: str
        """

        self._reason_for_change = reason_for_change

    @property
    def coded_items_rpc(self):
        """Gets the coded_items_rpc of this ItemDataValueRpc.  # noqa: E501


        :return: The coded_items_rpc of this ItemDataValueRpc.  # noqa: E501
        :rtype: MedicalCodedItemsRpc
        """
        return self._coded_items_rpc

    @coded_items_rpc.setter
    def coded_items_rpc(self, coded_items_rpc):
        """Sets the coded_items_rpc of this ItemDataValueRpc.


        :param coded_items_rpc: The coded_items_rpc of this ItemDataValueRpc.  # noqa: E501
        :type: MedicalCodedItemsRpc
        """

        self._coded_items_rpc = coded_items_rpc

    @property
    def new_values_in_readable_format(self):
        """Gets the new_values_in_readable_format of this ItemDataValueRpc.  # noqa: E501


        :return: The new_values_in_readable_format of this ItemDataValueRpc.  # noqa: E501
        :rtype: list[str]
        """
        return self._new_values_in_readable_format

    @new_values_in_readable_format.setter
    def new_values_in_readable_format(self, new_values_in_readable_format):
        """Sets the new_values_in_readable_format of this ItemDataValueRpc.


        :param new_values_in_readable_format: The new_values_in_readable_format of this ItemDataValueRpc.  # noqa: E501
        :type: list[str]
        """

        self._new_values_in_readable_format = new_values_in_readable_format

    @property
    def temp_file_names(self):
        """Gets the temp_file_names of this ItemDataValueRpc.  # noqa: E501


        :return: The temp_file_names of this ItemDataValueRpc.  # noqa: E501
        :rtype: list[str]
        """
        return self._temp_file_names

    @temp_file_names.setter
    def temp_file_names(self, temp_file_names):
        """Sets the temp_file_names of this ItemDataValueRpc.


        :param temp_file_names: The temp_file_names of this ItemDataValueRpc.  # noqa: E501
        :type: list[str]
        """

        self._temp_file_names = temp_file_names

    @property
    def delete_files(self):
        """Gets the delete_files of this ItemDataValueRpc.  # noqa: E501


        :return: The delete_files of this ItemDataValueRpc.  # noqa: E501
        :rtype: list[int]
        """
        return self._delete_files

    @delete_files.setter
    def delete_files(self, delete_files):
        """Sets the delete_files of this ItemDataValueRpc.


        :param delete_files: The delete_files of this ItemDataValueRpc.  # noqa: E501
        :type: list[int]
        """

        self._delete_files = delete_files

    @property
    def value_index(self):
        """Gets the value_index of this ItemDataValueRpc.  # noqa: E501


        :return: The value_index of this ItemDataValueRpc.  # noqa: E501
        :rtype: int
        """
        return self._value_index

    @value_index.setter
    def value_index(self, value_index):
        """Sets the value_index of this ItemDataValueRpc.


        :param value_index: The value_index of this ItemDataValueRpc.  # noqa: E501
        :type: int
        """

        self._value_index = value_index

    @property
    def old_value_index(self):
        """Gets the old_value_index of this ItemDataValueRpc.  # noqa: E501


        :return: The old_value_index of this ItemDataValueRpc.  # noqa: E501
        :rtype: int
        """
        return self._old_value_index

    @old_value_index.setter
    def old_value_index(self, old_value_index):
        """Sets the old_value_index of this ItemDataValueRpc.


        :param old_value_index: The old_value_index of this ItemDataValueRpc.  # noqa: E501
        :type: int
        """

        self._old_value_index = old_value_index

    @property
    def update_audit_logs_and_queries_row_index(self):
        """Gets the update_audit_logs_and_queries_row_index of this ItemDataValueRpc.  # noqa: E501


        :return: The update_audit_logs_and_queries_row_index of this ItemDataValueRpc.  # noqa: E501
        :rtype: bool
        """
        return self._update_audit_logs_and_queries_row_index

    @update_audit_logs_and_queries_row_index.setter
    def update_audit_logs_and_queries_row_index(self, update_audit_logs_and_queries_row_index):
        """Sets the update_audit_logs_and_queries_row_index of this ItemDataValueRpc.


        :param update_audit_logs_and_queries_row_index: The update_audit_logs_and_queries_row_index of this ItemDataValueRpc.  # noqa: E501
        :type: bool
        """

        self._update_audit_logs_and_queries_row_index = update_audit_logs_and_queries_row_index

    @property
    def update_only_index(self):
        """Gets the update_only_index of this ItemDataValueRpc.  # noqa: E501


        :return: The update_only_index of this ItemDataValueRpc.  # noqa: E501
        :rtype: bool
        """
        return self._update_only_index

    @update_only_index.setter
    def update_only_index(self, update_only_index):
        """Sets the update_only_index of this ItemDataValueRpc.


        :param update_only_index: The update_only_index of this ItemDataValueRpc.  # noqa: E501
        :type: bool
        """

        self._update_only_index = update_only_index

    @property
    def marked_for_complete_delete(self):
        """Gets the marked_for_complete_delete of this ItemDataValueRpc.  # noqa: E501


        :return: The marked_for_complete_delete of this ItemDataValueRpc.  # noqa: E501
        :rtype: bool
        """
        return self._marked_for_complete_delete

    @marked_for_complete_delete.setter
    def marked_for_complete_delete(self, marked_for_complete_delete):
        """Sets the marked_for_complete_delete of this ItemDataValueRpc.


        :param marked_for_complete_delete: The marked_for_complete_delete of this ItemDataValueRpc.  # noqa: E501
        :type: bool
        """

        self._marked_for_complete_delete = marked_for_complete_delete

    @property
    def item_data_sdv_state(self):
        """Gets the item_data_sdv_state of this ItemDataValueRpc.  # noqa: E501


        :return: The item_data_sdv_state of this ItemDataValueRpc.  # noqa: E501
        :rtype: bool
        """
        return self._item_data_sdv_state

    @item_data_sdv_state.setter
    def item_data_sdv_state(self, item_data_sdv_state):
        """Sets the item_data_sdv_state of this ItemDataValueRpc.


        :param item_data_sdv_state: The item_data_sdv_state of this ItemDataValueRpc.  # noqa: E501
        :type: bool
        """

        self._item_data_sdv_state = item_data_sdv_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemDataValueRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemDataValueRpc):
            return True

        return self.to_dict() != other.to_dict()
