# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class CRFNameRoleNamePair(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'crf_name': 'str',
        'role_name': 'str',
        'read': 'bool',
        'update': 'bool'
    }

    attribute_map = {
        'crf_name': 'crfName',
        'role_name': 'roleName',
        'read': 'read',
        'update': 'update'
    }

    def __init__(self, crf_name=None, role_name=None, read=None, update=None, local_vars_configuration=None):  # noqa: E501
        """CRFNameRoleNamePair - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._crf_name = None
        self._role_name = None
        self._read = None
        self._update = None
        self.discriminator = None

        if crf_name is not None:
            self.crf_name = crf_name
        if role_name is not None:
            self.role_name = role_name
        if read is not None:
            self.read = read
        if update is not None:
            self.update = update

    @property
    def crf_name(self):
        """Gets the crf_name of this CRFNameRoleNamePair.  # noqa: E501


        :return: The crf_name of this CRFNameRoleNamePair.  # noqa: E501
        :rtype: str
        """
        return self._crf_name

    @crf_name.setter
    def crf_name(self, crf_name):
        """Sets the crf_name of this CRFNameRoleNamePair.


        :param crf_name: The crf_name of this CRFNameRoleNamePair.  # noqa: E501
        :type: str
        """

        self._crf_name = crf_name

    @property
    def role_name(self):
        """Gets the role_name of this CRFNameRoleNamePair.  # noqa: E501


        :return: The role_name of this CRFNameRoleNamePair.  # noqa: E501
        :rtype: str
        """
        return self._role_name

    @role_name.setter
    def role_name(self, role_name):
        """Sets the role_name of this CRFNameRoleNamePair.


        :param role_name: The role_name of this CRFNameRoleNamePair.  # noqa: E501
        :type: str
        """

        self._role_name = role_name

    @property
    def read(self):
        """Gets the read of this CRFNameRoleNamePair.  # noqa: E501


        :return: The read of this CRFNameRoleNamePair.  # noqa: E501
        :rtype: bool
        """
        return self._read

    @read.setter
    def read(self, read):
        """Sets the read of this CRFNameRoleNamePair.


        :param read: The read of this CRFNameRoleNamePair.  # noqa: E501
        :type: bool
        """

        self._read = read

    @property
    def update(self):
        """Gets the update of this CRFNameRoleNamePair.  # noqa: E501


        :return: The update of this CRFNameRoleNamePair.  # noqa: E501
        :rtype: bool
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this CRFNameRoleNamePair.


        :param update: The update of this CRFNameRoleNamePair.  # noqa: E501
        :type: bool
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CRFNameRoleNamePair):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CRFNameRoleNamePair):
            return True

        return self.to_dict() != other.to_dict()
