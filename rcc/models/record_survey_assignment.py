# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class RecordSurveyAssignment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'participant_id': 'str',
        'participant_dob': 'str',
        'participant_initials': 'str',
        'participant_email': 'str',
        'redcap_study_group_name': 'str',
        'redcap_event_name': 'str',
        'redcap_survey_identifier': 'str',
        'participant_screening_number': 'str',
        'redcap_survey_link': 'str'
    }

    attribute_map = {
        'participant_id': 'participant_id',
        'participant_dob': 'participant_dob',
        'participant_initials': 'participant_initials',
        'participant_email': 'participant_email',
        'redcap_study_group_name': 'redcap_study_group_name',
        'redcap_event_name': 'redcap_event_name',
        'redcap_survey_identifier': 'redcap_survey_identifier',
        'participant_screening_number': 'participant_screening_number',
        'redcap_survey_link': 'redcap_survey_link'
    }

    def __init__(self, participant_id=None, participant_dob=None, participant_initials=None, participant_email=None, redcap_study_group_name=None, redcap_event_name=None, redcap_survey_identifier=None, participant_screening_number=None, redcap_survey_link=None, local_vars_configuration=None):  # noqa: E501
        """RecordSurveyAssignment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._participant_id = None
        self._participant_dob = None
        self._participant_initials = None
        self._participant_email = None
        self._redcap_study_group_name = None
        self._redcap_event_name = None
        self._redcap_survey_identifier = None
        self._participant_screening_number = None
        self._redcap_survey_link = None
        self.discriminator = None

        if participant_id is not None:
            self.participant_id = participant_id
        if participant_dob is not None:
            self.participant_dob = participant_dob
        if participant_initials is not None:
            self.participant_initials = participant_initials
        if participant_email is not None:
            self.participant_email = participant_email
        if redcap_study_group_name is not None:
            self.redcap_study_group_name = redcap_study_group_name
        if redcap_event_name is not None:
            self.redcap_event_name = redcap_event_name
        if redcap_survey_identifier is not None:
            self.redcap_survey_identifier = redcap_survey_identifier
        if participant_screening_number is not None:
            self.participant_screening_number = participant_screening_number
        if redcap_survey_link is not None:
            self.redcap_survey_link = redcap_survey_link

    @property
    def participant_id(self):
        """Gets the participant_id of this RecordSurveyAssignment.  # noqa: E501


        :return: The participant_id of this RecordSurveyAssignment.  # noqa: E501
        :rtype: str
        """
        return self._participant_id

    @participant_id.setter
    def participant_id(self, participant_id):
        """Sets the participant_id of this RecordSurveyAssignment.


        :param participant_id: The participant_id of this RecordSurveyAssignment.  # noqa: E501
        :type: str
        """

        self._participant_id = participant_id

    @property
    def participant_dob(self):
        """Gets the participant_dob of this RecordSurveyAssignment.  # noqa: E501


        :return: The participant_dob of this RecordSurveyAssignment.  # noqa: E501
        :rtype: str
        """
        return self._participant_dob

    @participant_dob.setter
    def participant_dob(self, participant_dob):
        """Sets the participant_dob of this RecordSurveyAssignment.


        :param participant_dob: The participant_dob of this RecordSurveyAssignment.  # noqa: E501
        :type: str
        """

        self._participant_dob = participant_dob

    @property
    def participant_initials(self):
        """Gets the participant_initials of this RecordSurveyAssignment.  # noqa: E501


        :return: The participant_initials of this RecordSurveyAssignment.  # noqa: E501
        :rtype: str
        """
        return self._participant_initials

    @participant_initials.setter
    def participant_initials(self, participant_initials):
        """Sets the participant_initials of this RecordSurveyAssignment.


        :param participant_initials: The participant_initials of this RecordSurveyAssignment.  # noqa: E501
        :type: str
        """

        self._participant_initials = participant_initials

    @property
    def participant_email(self):
        """Gets the participant_email of this RecordSurveyAssignment.  # noqa: E501


        :return: The participant_email of this RecordSurveyAssignment.  # noqa: E501
        :rtype: str
        """
        return self._participant_email

    @participant_email.setter
    def participant_email(self, participant_email):
        """Sets the participant_email of this RecordSurveyAssignment.


        :param participant_email: The participant_email of this RecordSurveyAssignment.  # noqa: E501
        :type: str
        """

        self._participant_email = participant_email

    @property
    def redcap_study_group_name(self):
        """Gets the redcap_study_group_name of this RecordSurveyAssignment.  # noqa: E501


        :return: The redcap_study_group_name of this RecordSurveyAssignment.  # noqa: E501
        :rtype: str
        """
        return self._redcap_study_group_name

    @redcap_study_group_name.setter
    def redcap_study_group_name(self, redcap_study_group_name):
        """Sets the redcap_study_group_name of this RecordSurveyAssignment.


        :param redcap_study_group_name: The redcap_study_group_name of this RecordSurveyAssignment.  # noqa: E501
        :type: str
        """

        self._redcap_study_group_name = redcap_study_group_name

    @property
    def redcap_event_name(self):
        """Gets the redcap_event_name of this RecordSurveyAssignment.  # noqa: E501


        :return: The redcap_event_name of this RecordSurveyAssignment.  # noqa: E501
        :rtype: str
        """
        return self._redcap_event_name

    @redcap_event_name.setter
    def redcap_event_name(self, redcap_event_name):
        """Sets the redcap_event_name of this RecordSurveyAssignment.


        :param redcap_event_name: The redcap_event_name of this RecordSurveyAssignment.  # noqa: E501
        :type: str
        """

        self._redcap_event_name = redcap_event_name

    @property
    def redcap_survey_identifier(self):
        """Gets the redcap_survey_identifier of this RecordSurveyAssignment.  # noqa: E501


        :return: The redcap_survey_identifier of this RecordSurveyAssignment.  # noqa: E501
        :rtype: str
        """
        return self._redcap_survey_identifier

    @redcap_survey_identifier.setter
    def redcap_survey_identifier(self, redcap_survey_identifier):
        """Sets the redcap_survey_identifier of this RecordSurveyAssignment.


        :param redcap_survey_identifier: The redcap_survey_identifier of this RecordSurveyAssignment.  # noqa: E501
        :type: str
        """

        self._redcap_survey_identifier = redcap_survey_identifier

    @property
    def participant_screening_number(self):
        """Gets the participant_screening_number of this RecordSurveyAssignment.  # noqa: E501


        :return: The participant_screening_number of this RecordSurveyAssignment.  # noqa: E501
        :rtype: str
        """
        return self._participant_screening_number

    @participant_screening_number.setter
    def participant_screening_number(self, participant_screening_number):
        """Sets the participant_screening_number of this RecordSurveyAssignment.


        :param participant_screening_number: The participant_screening_number of this RecordSurveyAssignment.  # noqa: E501
        :type: str
        """

        self._participant_screening_number = participant_screening_number

    @property
    def redcap_survey_link(self):
        """Gets the redcap_survey_link of this RecordSurveyAssignment.  # noqa: E501


        :return: The redcap_survey_link of this RecordSurveyAssignment.  # noqa: E501
        :rtype: str
        """
        return self._redcap_survey_link

    @redcap_survey_link.setter
    def redcap_survey_link(self, redcap_survey_link):
        """Sets the redcap_survey_link of this RecordSurveyAssignment.


        :param redcap_survey_link: The redcap_survey_link of this RecordSurveyAssignment.  # noqa: E501
        :type: str
        """

        self._redcap_survey_link = redcap_survey_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RecordSurveyAssignment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RecordSurveyAssignment):
            return True

        return self.to_dict() != other.to_dict()
