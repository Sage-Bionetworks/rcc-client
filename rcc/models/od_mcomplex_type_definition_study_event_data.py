# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ODMcomplexTypeDefinitionStudyEventData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'audit_record': 'ODMcomplexTypeDefinitionAuditRecord',
        'signature': 'ODMcomplexTypeDefinitionSignature',
        'annotation': 'list[ODMcomplexTypeDefinitionAnnotation]',
        'form_data': 'list[ODMcomplexTypeDefinitionFormData]',
        'unique_event_name': 'str',
        'status': 'str',
        'states_history': 'str',
        'event_date': 'datetime',
        'study_event_oid': 'str',
        'study_event_repeat_key': 'str',
        'transaction_type': 'str'
    }

    attribute_map = {
        'audit_record': 'auditRecord',
        'signature': 'signature',
        'annotation': 'annotation',
        'form_data': 'formData',
        'unique_event_name': 'uniqueEventName',
        'status': 'status',
        'states_history': 'statesHistory',
        'event_date': 'eventDate',
        'study_event_oid': 'studyEventOID',
        'study_event_repeat_key': 'studyEventRepeatKey',
        'transaction_type': 'transactionType'
    }

    def __init__(self, audit_record=None, signature=None, annotation=None, form_data=None, unique_event_name=None, status=None, states_history=None, event_date=None, study_event_oid=None, study_event_repeat_key=None, transaction_type=None, local_vars_configuration=None):  # noqa: E501
        """ODMcomplexTypeDefinitionStudyEventData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._audit_record = None
        self._signature = None
        self._annotation = None
        self._form_data = None
        self._unique_event_name = None
        self._status = None
        self._states_history = None
        self._event_date = None
        self._study_event_oid = None
        self._study_event_repeat_key = None
        self._transaction_type = None
        self.discriminator = None

        if audit_record is not None:
            self.audit_record = audit_record
        if signature is not None:
            self.signature = signature
        if annotation is not None:
            self.annotation = annotation
        if form_data is not None:
            self.form_data = form_data
        if unique_event_name is not None:
            self.unique_event_name = unique_event_name
        if status is not None:
            self.status = status
        if states_history is not None:
            self.states_history = states_history
        if event_date is not None:
            self.event_date = event_date
        if study_event_oid is not None:
            self.study_event_oid = study_event_oid
        if study_event_repeat_key is not None:
            self.study_event_repeat_key = study_event_repeat_key
        if transaction_type is not None:
            self.transaction_type = transaction_type

    @property
    def audit_record(self):
        """Gets the audit_record of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501


        :return: The audit_record of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionAuditRecord
        """
        return self._audit_record

    @audit_record.setter
    def audit_record(self, audit_record):
        """Sets the audit_record of this ODMcomplexTypeDefinitionStudyEventData.


        :param audit_record: The audit_record of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :type: ODMcomplexTypeDefinitionAuditRecord
        """

        self._audit_record = audit_record

    @property
    def signature(self):
        """Gets the signature of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501


        :return: The signature of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionSignature
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this ODMcomplexTypeDefinitionStudyEventData.


        :param signature: The signature of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :type: ODMcomplexTypeDefinitionSignature
        """

        self._signature = signature

    @property
    def annotation(self):
        """Gets the annotation of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501


        :return: The annotation of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionAnnotation]
        """
        return self._annotation

    @annotation.setter
    def annotation(self, annotation):
        """Sets the annotation of this ODMcomplexTypeDefinitionStudyEventData.


        :param annotation: The annotation of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionAnnotation]
        """

        self._annotation = annotation

    @property
    def form_data(self):
        """Gets the form_data of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501


        :return: The form_data of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionFormData]
        """
        return self._form_data

    @form_data.setter
    def form_data(self, form_data):
        """Sets the form_data of this ODMcomplexTypeDefinitionStudyEventData.


        :param form_data: The form_data of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionFormData]
        """

        self._form_data = form_data

    @property
    def unique_event_name(self):
        """Gets the unique_event_name of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501


        :return: The unique_event_name of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :rtype: str
        """
        return self._unique_event_name

    @unique_event_name.setter
    def unique_event_name(self, unique_event_name):
        """Sets the unique_event_name of this ODMcomplexTypeDefinitionStudyEventData.


        :param unique_event_name: The unique_event_name of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :type: str
        """

        self._unique_event_name = unique_event_name

    @property
    def status(self):
        """Gets the status of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501


        :return: The status of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ODMcomplexTypeDefinitionStudyEventData.


        :param status: The status of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def states_history(self):
        """Gets the states_history of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501


        :return: The states_history of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :rtype: str
        """
        return self._states_history

    @states_history.setter
    def states_history(self, states_history):
        """Sets the states_history of this ODMcomplexTypeDefinitionStudyEventData.


        :param states_history: The states_history of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :type: str
        """

        self._states_history = states_history

    @property
    def event_date(self):
        """Gets the event_date of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501


        :return: The event_date of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :rtype: datetime
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this ODMcomplexTypeDefinitionStudyEventData.


        :param event_date: The event_date of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :type: datetime
        """

        self._event_date = event_date

    @property
    def study_event_oid(self):
        """Gets the study_event_oid of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501


        :return: The study_event_oid of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :rtype: str
        """
        return self._study_event_oid

    @study_event_oid.setter
    def study_event_oid(self, study_event_oid):
        """Sets the study_event_oid of this ODMcomplexTypeDefinitionStudyEventData.


        :param study_event_oid: The study_event_oid of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :type: str
        """

        self._study_event_oid = study_event_oid

    @property
    def study_event_repeat_key(self):
        """Gets the study_event_repeat_key of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501


        :return: The study_event_repeat_key of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :rtype: str
        """
        return self._study_event_repeat_key

    @study_event_repeat_key.setter
    def study_event_repeat_key(self, study_event_repeat_key):
        """Sets the study_event_repeat_key of this ODMcomplexTypeDefinitionStudyEventData.


        :param study_event_repeat_key: The study_event_repeat_key of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :type: str
        """

        self._study_event_repeat_key = study_event_repeat_key

    @property
    def transaction_type(self):
        """Gets the transaction_type of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501


        :return: The transaction_type of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this ODMcomplexTypeDefinitionStudyEventData.


        :param transaction_type: The transaction_type of this ODMcomplexTypeDefinitionStudyEventData.  # noqa: E501
        :type: str
        """
        allowed_values = ["INSERT", "UPDATE", "REMOVE", "UPSERT", "CONTEXT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and transaction_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `transaction_type` ({0}), must be one of {1}"  # noqa: E501
                .format(transaction_type, allowed_values)
            )

        self._transaction_type = transaction_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionStudyEventData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionStudyEventData):
            return True

        return self.to_dict() != other.to_dict()
