# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ItemMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'encounter_codes': 'str',
        'variable_codes': 'str',
        'unique_value': 'bool',
        'encounter_id': 'bool',
        'extraction_date': 'bool'
    }

    attribute_map = {
        'encounter_codes': 'encounterCodes',
        'variable_codes': 'variableCodes',
        'unique_value': 'uniqueValue',
        'encounter_id': 'encounterId',
        'extraction_date': 'extractionDate'
    }

    def __init__(self, encounter_codes=None, variable_codes=None, unique_value=None, encounter_id=None, extraction_date=None, local_vars_configuration=None):  # noqa: E501
        """ItemMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._encounter_codes = None
        self._variable_codes = None
        self._unique_value = None
        self._encounter_id = None
        self._extraction_date = None
        self.discriminator = None

        if encounter_codes is not None:
            self.encounter_codes = encounter_codes
        if variable_codes is not None:
            self.variable_codes = variable_codes
        if unique_value is not None:
            self.unique_value = unique_value
        if encounter_id is not None:
            self.encounter_id = encounter_id
        if extraction_date is not None:
            self.extraction_date = extraction_date

    @property
    def encounter_codes(self):
        """Gets the encounter_codes of this ItemMetadata.  # noqa: E501


        :return: The encounter_codes of this ItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._encounter_codes

    @encounter_codes.setter
    def encounter_codes(self, encounter_codes):
        """Sets the encounter_codes of this ItemMetadata.


        :param encounter_codes: The encounter_codes of this ItemMetadata.  # noqa: E501
        :type: str
        """

        self._encounter_codes = encounter_codes

    @property
    def variable_codes(self):
        """Gets the variable_codes of this ItemMetadata.  # noqa: E501


        :return: The variable_codes of this ItemMetadata.  # noqa: E501
        :rtype: str
        """
        return self._variable_codes

    @variable_codes.setter
    def variable_codes(self, variable_codes):
        """Sets the variable_codes of this ItemMetadata.


        :param variable_codes: The variable_codes of this ItemMetadata.  # noqa: E501
        :type: str
        """

        self._variable_codes = variable_codes

    @property
    def unique_value(self):
        """Gets the unique_value of this ItemMetadata.  # noqa: E501


        :return: The unique_value of this ItemMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._unique_value

    @unique_value.setter
    def unique_value(self, unique_value):
        """Sets the unique_value of this ItemMetadata.


        :param unique_value: The unique_value of this ItemMetadata.  # noqa: E501
        :type: bool
        """

        self._unique_value = unique_value

    @property
    def encounter_id(self):
        """Gets the encounter_id of this ItemMetadata.  # noqa: E501


        :return: The encounter_id of this ItemMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._encounter_id

    @encounter_id.setter
    def encounter_id(self, encounter_id):
        """Sets the encounter_id of this ItemMetadata.


        :param encounter_id: The encounter_id of this ItemMetadata.  # noqa: E501
        :type: bool
        """

        self._encounter_id = encounter_id

    @property
    def extraction_date(self):
        """Gets the extraction_date of this ItemMetadata.  # noqa: E501


        :return: The extraction_date of this ItemMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._extraction_date

    @extraction_date.setter
    def extraction_date(self, extraction_date):
        """Sets the extraction_date of this ItemMetadata.


        :param extraction_date: The extraction_date of this ItemMetadata.  # noqa: E501
        :type: bool
        """

        self._extraction_date = extraction_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ItemMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ItemMetadata):
            return True

        return self.to_dict() != other.to_dict()
