# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class SurveyLinkFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'survey_name': 'list[str]',
        'subject_number': 'str',
        'subject_status': 'list[str]',
        'event_name': 'list[str]',
        'crf_name': 'str',
        'generated': 'bool',
        'page_size': 'int',
        'page_number': 'int'
    }

    attribute_map = {
        'survey_name': 'surveyName',
        'subject_number': 'subjectNumber',
        'subject_status': 'subjectStatus',
        'event_name': 'eventName',
        'crf_name': 'crfName',
        'generated': 'generated',
        'page_size': 'pageSize',
        'page_number': 'pageNumber'
    }

    def __init__(self, survey_name=None, subject_number=None, subject_status=None, event_name=None, crf_name=None, generated=None, page_size=None, page_number=None, local_vars_configuration=None):  # noqa: E501
        """SurveyLinkFilter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._survey_name = None
        self._subject_number = None
        self._subject_status = None
        self._event_name = None
        self._crf_name = None
        self._generated = None
        self._page_size = None
        self._page_number = None
        self.discriminator = None

        if survey_name is not None:
            self.survey_name = survey_name
        if subject_number is not None:
            self.subject_number = subject_number
        if subject_status is not None:
            self.subject_status = subject_status
        if event_name is not None:
            self.event_name = event_name
        if crf_name is not None:
            self.crf_name = crf_name
        if generated is not None:
            self.generated = generated
        if page_size is not None:
            self.page_size = page_size
        if page_number is not None:
            self.page_number = page_number

    @property
    def survey_name(self):
        """Gets the survey_name of this SurveyLinkFilter.  # noqa: E501


        :return: The survey_name of this SurveyLinkFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._survey_name

    @survey_name.setter
    def survey_name(self, survey_name):
        """Sets the survey_name of this SurveyLinkFilter.


        :param survey_name: The survey_name of this SurveyLinkFilter.  # noqa: E501
        :type: list[str]
        """

        self._survey_name = survey_name

    @property
    def subject_number(self):
        """Gets the subject_number of this SurveyLinkFilter.  # noqa: E501


        :return: The subject_number of this SurveyLinkFilter.  # noqa: E501
        :rtype: str
        """
        return self._subject_number

    @subject_number.setter
    def subject_number(self, subject_number):
        """Sets the subject_number of this SurveyLinkFilter.


        :param subject_number: The subject_number of this SurveyLinkFilter.  # noqa: E501
        :type: str
        """

        self._subject_number = subject_number

    @property
    def subject_status(self):
        """Gets the subject_status of this SurveyLinkFilter.  # noqa: E501


        :return: The subject_status of this SurveyLinkFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_status

    @subject_status.setter
    def subject_status(self, subject_status):
        """Sets the subject_status of this SurveyLinkFilter.


        :param subject_status: The subject_status of this SurveyLinkFilter.  # noqa: E501
        :type: list[str]
        """

        self._subject_status = subject_status

    @property
    def event_name(self):
        """Gets the event_name of this SurveyLinkFilter.  # noqa: E501


        :return: The event_name of this SurveyLinkFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this SurveyLinkFilter.


        :param event_name: The event_name of this SurveyLinkFilter.  # noqa: E501
        :type: list[str]
        """

        self._event_name = event_name

    @property
    def crf_name(self):
        """Gets the crf_name of this SurveyLinkFilter.  # noqa: E501


        :return: The crf_name of this SurveyLinkFilter.  # noqa: E501
        :rtype: str
        """
        return self._crf_name

    @crf_name.setter
    def crf_name(self, crf_name):
        """Sets the crf_name of this SurveyLinkFilter.


        :param crf_name: The crf_name of this SurveyLinkFilter.  # noqa: E501
        :type: str
        """

        self._crf_name = crf_name

    @property
    def generated(self):
        """Gets the generated of this SurveyLinkFilter.  # noqa: E501


        :return: The generated of this SurveyLinkFilter.  # noqa: E501
        :rtype: bool
        """
        return self._generated

    @generated.setter
    def generated(self, generated):
        """Sets the generated of this SurveyLinkFilter.


        :param generated: The generated of this SurveyLinkFilter.  # noqa: E501
        :type: bool
        """

        self._generated = generated

    @property
    def page_size(self):
        """Gets the page_size of this SurveyLinkFilter.  # noqa: E501


        :return: The page_size of this SurveyLinkFilter.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this SurveyLinkFilter.


        :param page_size: The page_size of this SurveyLinkFilter.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def page_number(self):
        """Gets the page_number of this SurveyLinkFilter.  # noqa: E501


        :return: The page_number of this SurveyLinkFilter.  # noqa: E501
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this SurveyLinkFilter.


        :param page_number: The page_number of this SurveyLinkFilter.  # noqa: E501
        :type: int
        """

        self._page_number = page_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SurveyLinkFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SurveyLinkFilter):
            return True

        return self.to_dict() != other.to_dict()
