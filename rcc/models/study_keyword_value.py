# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class StudyKeywordValue(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'language': 'str',
        'language_code': 'str',
        'language_name': 'str',
        'translation': 'str'
    }

    attribute_map = {
        'language': 'language',
        'language_code': 'languageCode',
        'language_name': 'languageName',
        'translation': 'translation'
    }

    def __init__(self, language=None, language_code=None, language_name=None, translation=None, local_vars_configuration=None):  # noqa: E501
        """StudyKeywordValue - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._language = None
        self._language_code = None
        self._language_name = None
        self._translation = None
        self.discriminator = None

        if language is not None:
            self.language = language
        if language_code is not None:
            self.language_code = language_code
        if language_name is not None:
            self.language_name = language_name
        if translation is not None:
            self.translation = translation

    @property
    def language(self):
        """Gets the language of this StudyKeywordValue.  # noqa: E501


        :return: The language of this StudyKeywordValue.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this StudyKeywordValue.


        :param language: The language of this StudyKeywordValue.  # noqa: E501
        :type: str
        """

        self._language = language

    @property
    def language_code(self):
        """Gets the language_code of this StudyKeywordValue.  # noqa: E501


        :return: The language_code of this StudyKeywordValue.  # noqa: E501
        :rtype: str
        """
        return self._language_code

    @language_code.setter
    def language_code(self, language_code):
        """Sets the language_code of this StudyKeywordValue.


        :param language_code: The language_code of this StudyKeywordValue.  # noqa: E501
        :type: str
        """

        self._language_code = language_code

    @property
    def language_name(self):
        """Gets the language_name of this StudyKeywordValue.  # noqa: E501


        :return: The language_name of this StudyKeywordValue.  # noqa: E501
        :rtype: str
        """
        return self._language_name

    @language_name.setter
    def language_name(self, language_name):
        """Sets the language_name of this StudyKeywordValue.


        :param language_name: The language_name of this StudyKeywordValue.  # noqa: E501
        :type: str
        """

        self._language_name = language_name

    @property
    def translation(self):
        """Gets the translation of this StudyKeywordValue.  # noqa: E501


        :return: The translation of this StudyKeywordValue.  # noqa: E501
        :rtype: str
        """
        return self._translation

    @translation.setter
    def translation(self, translation):
        """Sets the translation of this StudyKeywordValue.


        :param translation: The translation of this StudyKeywordValue.  # noqa: E501
        :type: str
        """

        self._translation = translation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudyKeywordValue):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StudyKeywordValue):
            return True

        return self.to_dict() != other.to_dict()
