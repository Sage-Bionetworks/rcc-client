# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class CRFItemDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'item_document_file': 'FileBase64',
        'item_data_type': 'str',
        'measurement_unit_name': 'str',
        'variable_name': 'str',
        'label': 'str',
        'label_plain_text': 'str',
        'phi_status': 'bool',
        'left_alignment': 'bool',
        'rc_oid': 'str',
        'field_width': 'int',
        'info_text': 'str',
        'min_value': 'str',
        'max_value': 'str',
        'show_validator': 'bool',
        'soft_validation': 'bool',
        'calc_field_equation': 'str',
        'custom_info1': 'str',
        'custom_info2': 'str',
        'warning_when_left_empty': 'str',
        'stratification_variable': 'bool',
        'study_dictionary': 'str',
        'default_value': 'str',
        'subject_group': 'bool',
        'creation_source': 'str',
        'promis_oid': 'str',
        'promis_final_score': 'bool',
        'item_fhir_metadata': 'str',
        'required_query_description': 'str',
        'crfitem_metadata': 'CRFItemMetadata',
        'crfitem_metadata_group': 'CRFItemMetadataGroup'
    }

    attribute_map = {
        'item_document_file': 'itemDocumentFile',
        'item_data_type': 'itemDataType',
        'measurement_unit_name': 'measurementUnitName',
        'variable_name': 'variableName',
        'label': 'label',
        'label_plain_text': 'labelPlainText',
        'phi_status': 'phiStatus',
        'left_alignment': 'leftAlignment',
        'rc_oid': 'rcOid',
        'field_width': 'fieldWidth',
        'info_text': 'infoText',
        'min_value': 'minValue',
        'max_value': 'maxValue',
        'show_validator': 'showValidator',
        'soft_validation': 'softValidation',
        'calc_field_equation': 'calcFieldEquation',
        'custom_info1': 'customInfo1',
        'custom_info2': 'customInfo2',
        'warning_when_left_empty': 'warningWhenLeftEmpty',
        'stratification_variable': 'stratificationVariable',
        'study_dictionary': 'studyDictionary',
        'default_value': 'defaultValue',
        'subject_group': 'subjectGroup',
        'creation_source': 'creationSource',
        'promis_oid': 'promisOID',
        'promis_final_score': 'promisFinalScore',
        'item_fhir_metadata': 'itemFhirMetadata',
        'required_query_description': 'requiredQueryDescription',
        'crfitem_metadata': 'crfitemMetadata',
        'crfitem_metadata_group': 'crfitemMetadataGroup'
    }

    def __init__(self, item_document_file=None, item_data_type=None, measurement_unit_name=None, variable_name=None, label=None, label_plain_text=None, phi_status=None, left_alignment=None, rc_oid=None, field_width=None, info_text=None, min_value=None, max_value=None, show_validator=None, soft_validation=None, calc_field_equation=None, custom_info1=None, custom_info2=None, warning_when_left_empty=None, stratification_variable=None, study_dictionary=None, default_value=None, subject_group=None, creation_source=None, promis_oid=None, promis_final_score=None, item_fhir_metadata=None, required_query_description=None, crfitem_metadata=None, crfitem_metadata_group=None, local_vars_configuration=None):  # noqa: E501
        """CRFItemDefinition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._item_document_file = None
        self._item_data_type = None
        self._measurement_unit_name = None
        self._variable_name = None
        self._label = None
        self._label_plain_text = None
        self._phi_status = None
        self._left_alignment = None
        self._rc_oid = None
        self._field_width = None
        self._info_text = None
        self._min_value = None
        self._max_value = None
        self._show_validator = None
        self._soft_validation = None
        self._calc_field_equation = None
        self._custom_info1 = None
        self._custom_info2 = None
        self._warning_when_left_empty = None
        self._stratification_variable = None
        self._study_dictionary = None
        self._default_value = None
        self._subject_group = None
        self._creation_source = None
        self._promis_oid = None
        self._promis_final_score = None
        self._item_fhir_metadata = None
        self._required_query_description = None
        self._crfitem_metadata = None
        self._crfitem_metadata_group = None
        self.discriminator = None

        self.item_document_file = item_document_file
        if item_data_type is not None:
            self.item_data_type = item_data_type
        if measurement_unit_name is not None:
            self.measurement_unit_name = measurement_unit_name
        if variable_name is not None:
            self.variable_name = variable_name
        if label is not None:
            self.label = label
        if label_plain_text is not None:
            self.label_plain_text = label_plain_text
        if phi_status is not None:
            self.phi_status = phi_status
        if left_alignment is not None:
            self.left_alignment = left_alignment
        if rc_oid is not None:
            self.rc_oid = rc_oid
        if field_width is not None:
            self.field_width = field_width
        if info_text is not None:
            self.info_text = info_text
        if min_value is not None:
            self.min_value = min_value
        if max_value is not None:
            self.max_value = max_value
        if show_validator is not None:
            self.show_validator = show_validator
        if soft_validation is not None:
            self.soft_validation = soft_validation
        if calc_field_equation is not None:
            self.calc_field_equation = calc_field_equation
        if custom_info1 is not None:
            self.custom_info1 = custom_info1
        if custom_info2 is not None:
            self.custom_info2 = custom_info2
        if warning_when_left_empty is not None:
            self.warning_when_left_empty = warning_when_left_empty
        if stratification_variable is not None:
            self.stratification_variable = stratification_variable
        if study_dictionary is not None:
            self.study_dictionary = study_dictionary
        if default_value is not None:
            self.default_value = default_value
        if subject_group is not None:
            self.subject_group = subject_group
        if creation_source is not None:
            self.creation_source = creation_source
        if promis_oid is not None:
            self.promis_oid = promis_oid
        if promis_final_score is not None:
            self.promis_final_score = promis_final_score
        if item_fhir_metadata is not None:
            self.item_fhir_metadata = item_fhir_metadata
        if required_query_description is not None:
            self.required_query_description = required_query_description
        if crfitem_metadata is not None:
            self.crfitem_metadata = crfitem_metadata
        if crfitem_metadata_group is not None:
            self.crfitem_metadata_group = crfitem_metadata_group

    @property
    def item_document_file(self):
        """Gets the item_document_file of this CRFItemDefinition.  # noqa: E501


        :return: The item_document_file of this CRFItemDefinition.  # noqa: E501
        :rtype: FileBase64
        """
        return self._item_document_file

    @item_document_file.setter
    def item_document_file(self, item_document_file):
        """Sets the item_document_file of this CRFItemDefinition.


        :param item_document_file: The item_document_file of this CRFItemDefinition.  # noqa: E501
        :type: FileBase64
        """
        if self.local_vars_configuration.client_side_validation and item_document_file is None:  # noqa: E501
            raise ValueError("Invalid value for `item_document_file`, must not be `None`")  # noqa: E501

        self._item_document_file = item_document_file

    @property
    def item_data_type(self):
        """Gets the item_data_type of this CRFItemDefinition.  # noqa: E501


        :return: The item_data_type of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._item_data_type

    @item_data_type.setter
    def item_data_type(self, item_data_type):
        """Sets the item_data_type of this CRFItemDefinition.


        :param item_data_type: The item_data_type of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._item_data_type = item_data_type

    @property
    def measurement_unit_name(self):
        """Gets the measurement_unit_name of this CRFItemDefinition.  # noqa: E501


        :return: The measurement_unit_name of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._measurement_unit_name

    @measurement_unit_name.setter
    def measurement_unit_name(self, measurement_unit_name):
        """Sets the measurement_unit_name of this CRFItemDefinition.


        :param measurement_unit_name: The measurement_unit_name of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._measurement_unit_name = measurement_unit_name

    @property
    def variable_name(self):
        """Gets the variable_name of this CRFItemDefinition.  # noqa: E501


        :return: The variable_name of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._variable_name

    @variable_name.setter
    def variable_name(self, variable_name):
        """Sets the variable_name of this CRFItemDefinition.


        :param variable_name: The variable_name of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._variable_name = variable_name

    @property
    def label(self):
        """Gets the label of this CRFItemDefinition.  # noqa: E501


        :return: The label of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CRFItemDefinition.


        :param label: The label of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def label_plain_text(self):
        """Gets the label_plain_text of this CRFItemDefinition.  # noqa: E501


        :return: The label_plain_text of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._label_plain_text

    @label_plain_text.setter
    def label_plain_text(self, label_plain_text):
        """Sets the label_plain_text of this CRFItemDefinition.


        :param label_plain_text: The label_plain_text of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._label_plain_text = label_plain_text

    @property
    def phi_status(self):
        """Gets the phi_status of this CRFItemDefinition.  # noqa: E501


        :return: The phi_status of this CRFItemDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._phi_status

    @phi_status.setter
    def phi_status(self, phi_status):
        """Sets the phi_status of this CRFItemDefinition.


        :param phi_status: The phi_status of this CRFItemDefinition.  # noqa: E501
        :type: bool
        """

        self._phi_status = phi_status

    @property
    def left_alignment(self):
        """Gets the left_alignment of this CRFItemDefinition.  # noqa: E501


        :return: The left_alignment of this CRFItemDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._left_alignment

    @left_alignment.setter
    def left_alignment(self, left_alignment):
        """Sets the left_alignment of this CRFItemDefinition.


        :param left_alignment: The left_alignment of this CRFItemDefinition.  # noqa: E501
        :type: bool
        """

        self._left_alignment = left_alignment

    @property
    def rc_oid(self):
        """Gets the rc_oid of this CRFItemDefinition.  # noqa: E501


        :return: The rc_oid of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._rc_oid

    @rc_oid.setter
    def rc_oid(self, rc_oid):
        """Sets the rc_oid of this CRFItemDefinition.


        :param rc_oid: The rc_oid of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._rc_oid = rc_oid

    @property
    def field_width(self):
        """Gets the field_width of this CRFItemDefinition.  # noqa: E501


        :return: The field_width of this CRFItemDefinition.  # noqa: E501
        :rtype: int
        """
        return self._field_width

    @field_width.setter
    def field_width(self, field_width):
        """Sets the field_width of this CRFItemDefinition.


        :param field_width: The field_width of this CRFItemDefinition.  # noqa: E501
        :type: int
        """

        self._field_width = field_width

    @property
    def info_text(self):
        """Gets the info_text of this CRFItemDefinition.  # noqa: E501


        :return: The info_text of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._info_text

    @info_text.setter
    def info_text(self, info_text):
        """Sets the info_text of this CRFItemDefinition.


        :param info_text: The info_text of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._info_text = info_text

    @property
    def min_value(self):
        """Gets the min_value of this CRFItemDefinition.  # noqa: E501


        :return: The min_value of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._min_value

    @min_value.setter
    def min_value(self, min_value):
        """Sets the min_value of this CRFItemDefinition.


        :param min_value: The min_value of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._min_value = min_value

    @property
    def max_value(self):
        """Gets the max_value of this CRFItemDefinition.  # noqa: E501


        :return: The max_value of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._max_value

    @max_value.setter
    def max_value(self, max_value):
        """Sets the max_value of this CRFItemDefinition.


        :param max_value: The max_value of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._max_value = max_value

    @property
    def show_validator(self):
        """Gets the show_validator of this CRFItemDefinition.  # noqa: E501


        :return: The show_validator of this CRFItemDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._show_validator

    @show_validator.setter
    def show_validator(self, show_validator):
        """Sets the show_validator of this CRFItemDefinition.


        :param show_validator: The show_validator of this CRFItemDefinition.  # noqa: E501
        :type: bool
        """

        self._show_validator = show_validator

    @property
    def soft_validation(self):
        """Gets the soft_validation of this CRFItemDefinition.  # noqa: E501


        :return: The soft_validation of this CRFItemDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._soft_validation

    @soft_validation.setter
    def soft_validation(self, soft_validation):
        """Sets the soft_validation of this CRFItemDefinition.


        :param soft_validation: The soft_validation of this CRFItemDefinition.  # noqa: E501
        :type: bool
        """

        self._soft_validation = soft_validation

    @property
    def calc_field_equation(self):
        """Gets the calc_field_equation of this CRFItemDefinition.  # noqa: E501


        :return: The calc_field_equation of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._calc_field_equation

    @calc_field_equation.setter
    def calc_field_equation(self, calc_field_equation):
        """Sets the calc_field_equation of this CRFItemDefinition.


        :param calc_field_equation: The calc_field_equation of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._calc_field_equation = calc_field_equation

    @property
    def custom_info1(self):
        """Gets the custom_info1 of this CRFItemDefinition.  # noqa: E501


        :return: The custom_info1 of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._custom_info1

    @custom_info1.setter
    def custom_info1(self, custom_info1):
        """Sets the custom_info1 of this CRFItemDefinition.


        :param custom_info1: The custom_info1 of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._custom_info1 = custom_info1

    @property
    def custom_info2(self):
        """Gets the custom_info2 of this CRFItemDefinition.  # noqa: E501


        :return: The custom_info2 of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._custom_info2

    @custom_info2.setter
    def custom_info2(self, custom_info2):
        """Sets the custom_info2 of this CRFItemDefinition.


        :param custom_info2: The custom_info2 of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._custom_info2 = custom_info2

    @property
    def warning_when_left_empty(self):
        """Gets the warning_when_left_empty of this CRFItemDefinition.  # noqa: E501


        :return: The warning_when_left_empty of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._warning_when_left_empty

    @warning_when_left_empty.setter
    def warning_when_left_empty(self, warning_when_left_empty):
        """Sets the warning_when_left_empty of this CRFItemDefinition.


        :param warning_when_left_empty: The warning_when_left_empty of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._warning_when_left_empty = warning_when_left_empty

    @property
    def stratification_variable(self):
        """Gets the stratification_variable of this CRFItemDefinition.  # noqa: E501


        :return: The stratification_variable of this CRFItemDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._stratification_variable

    @stratification_variable.setter
    def stratification_variable(self, stratification_variable):
        """Sets the stratification_variable of this CRFItemDefinition.


        :param stratification_variable: The stratification_variable of this CRFItemDefinition.  # noqa: E501
        :type: bool
        """

        self._stratification_variable = stratification_variable

    @property
    def study_dictionary(self):
        """Gets the study_dictionary of this CRFItemDefinition.  # noqa: E501


        :return: The study_dictionary of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._study_dictionary

    @study_dictionary.setter
    def study_dictionary(self, study_dictionary):
        """Sets the study_dictionary of this CRFItemDefinition.


        :param study_dictionary: The study_dictionary of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._study_dictionary = study_dictionary

    @property
    def default_value(self):
        """Gets the default_value of this CRFItemDefinition.  # noqa: E501


        :return: The default_value of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this CRFItemDefinition.


        :param default_value: The default_value of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._default_value = default_value

    @property
    def subject_group(self):
        """Gets the subject_group of this CRFItemDefinition.  # noqa: E501


        :return: The subject_group of this CRFItemDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._subject_group

    @subject_group.setter
    def subject_group(self, subject_group):
        """Sets the subject_group of this CRFItemDefinition.


        :param subject_group: The subject_group of this CRFItemDefinition.  # noqa: E501
        :type: bool
        """

        self._subject_group = subject_group

    @property
    def creation_source(self):
        """Gets the creation_source of this CRFItemDefinition.  # noqa: E501


        :return: The creation_source of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._creation_source

    @creation_source.setter
    def creation_source(self, creation_source):
        """Sets the creation_source of this CRFItemDefinition.


        :param creation_source: The creation_source of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._creation_source = creation_source

    @property
    def promis_oid(self):
        """Gets the promis_oid of this CRFItemDefinition.  # noqa: E501


        :return: The promis_oid of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._promis_oid

    @promis_oid.setter
    def promis_oid(self, promis_oid):
        """Sets the promis_oid of this CRFItemDefinition.


        :param promis_oid: The promis_oid of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._promis_oid = promis_oid

    @property
    def promis_final_score(self):
        """Gets the promis_final_score of this CRFItemDefinition.  # noqa: E501


        :return: The promis_final_score of this CRFItemDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._promis_final_score

    @promis_final_score.setter
    def promis_final_score(self, promis_final_score):
        """Sets the promis_final_score of this CRFItemDefinition.


        :param promis_final_score: The promis_final_score of this CRFItemDefinition.  # noqa: E501
        :type: bool
        """

        self._promis_final_score = promis_final_score

    @property
    def item_fhir_metadata(self):
        """Gets the item_fhir_metadata of this CRFItemDefinition.  # noqa: E501


        :return: The item_fhir_metadata of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._item_fhir_metadata

    @item_fhir_metadata.setter
    def item_fhir_metadata(self, item_fhir_metadata):
        """Sets the item_fhir_metadata of this CRFItemDefinition.


        :param item_fhir_metadata: The item_fhir_metadata of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._item_fhir_metadata = item_fhir_metadata

    @property
    def required_query_description(self):
        """Gets the required_query_description of this CRFItemDefinition.  # noqa: E501


        :return: The required_query_description of this CRFItemDefinition.  # noqa: E501
        :rtype: str
        """
        return self._required_query_description

    @required_query_description.setter
    def required_query_description(self, required_query_description):
        """Sets the required_query_description of this CRFItemDefinition.


        :param required_query_description: The required_query_description of this CRFItemDefinition.  # noqa: E501
        :type: str
        """

        self._required_query_description = required_query_description

    @property
    def crfitem_metadata(self):
        """Gets the crfitem_metadata of this CRFItemDefinition.  # noqa: E501


        :return: The crfitem_metadata of this CRFItemDefinition.  # noqa: E501
        :rtype: CRFItemMetadata
        """
        return self._crfitem_metadata

    @crfitem_metadata.setter
    def crfitem_metadata(self, crfitem_metadata):
        """Sets the crfitem_metadata of this CRFItemDefinition.


        :param crfitem_metadata: The crfitem_metadata of this CRFItemDefinition.  # noqa: E501
        :type: CRFItemMetadata
        """

        self._crfitem_metadata = crfitem_metadata

    @property
    def crfitem_metadata_group(self):
        """Gets the crfitem_metadata_group of this CRFItemDefinition.  # noqa: E501


        :return: The crfitem_metadata_group of this CRFItemDefinition.  # noqa: E501
        :rtype: CRFItemMetadataGroup
        """
        return self._crfitem_metadata_group

    @crfitem_metadata_group.setter
    def crfitem_metadata_group(self, crfitem_metadata_group):
        """Sets the crfitem_metadata_group of this CRFItemDefinition.


        :param crfitem_metadata_group: The crfitem_metadata_group of this CRFItemDefinition.  # noqa: E501
        :type: CRFItemMetadataGroup
        """

        self._crfitem_metadata_group = crfitem_metadata_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CRFItemDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CRFItemDefinition):
            return True

        return self.to_dict() != other.to_dict()
