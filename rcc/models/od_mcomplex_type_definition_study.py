# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ODMcomplexTypeDefinitionStudy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'global_variables': 'ODMcomplexTypeDefinitionGlobalVariables',
        'basic_definitions': 'ODMcomplexTypeDefinitionBasicDefinitions',
        'meta_data_version': 'list[ODMcomplexTypeDefinitionMetaDataVersion]',
        'oid': 'str',
        'study_export_options': 'StudyExportOptions',
        'study_parameters': 'StudyParameters',
        'available_crf_languages': 'AvailableCrfLanguages',
        'sequence_parameters': 'SequenceParameters',
        'study_sequences': 'StudySequences',
        'study_rules': 'StudyRules',
        'study_details': 'StudyDetails',
        'study_keywords': 'StudyKeywords',
        'study_groups': 'StudyGroups',
        'study_permissions': 'StudyPermissions',
        'surveys': 'Surveys',
        'survey_login_configuration': 'SurveyLoginConfiguration',
        'randomization': 'Randomization',
        'study_dictionaries': 'StudyDictionaries',
        'limited_cr_fs_by_roles': 'LimitedCRFsByRoles',
        'migration_plans': 'MigrationPlans',
        'cogstate_battery_notifications': 'CogstateBatteryNotifications'
    }

    attribute_map = {
        'global_variables': 'globalVariables',
        'basic_definitions': 'basicDefinitions',
        'meta_data_version': 'metaDataVersion',
        'oid': 'oid',
        'study_export_options': 'studyExportOptions',
        'study_parameters': 'studyParameters',
        'available_crf_languages': 'availableCrfLanguages',
        'sequence_parameters': 'sequenceParameters',
        'study_sequences': 'studySequences',
        'study_rules': 'studyRules',
        'study_details': 'studyDetails',
        'study_keywords': 'studyKeywords',
        'study_groups': 'studyGroups',
        'study_permissions': 'studyPermissions',
        'surveys': 'surveys',
        'survey_login_configuration': 'surveyLoginConfiguration',
        'randomization': 'randomization',
        'study_dictionaries': 'studyDictionaries',
        'limited_cr_fs_by_roles': 'limitedCRFsByRoles',
        'migration_plans': 'migrationPlans',
        'cogstate_battery_notifications': 'cogstateBatteryNotifications'
    }

    def __init__(self, global_variables=None, basic_definitions=None, meta_data_version=None, oid=None, study_export_options=None, study_parameters=None, available_crf_languages=None, sequence_parameters=None, study_sequences=None, study_rules=None, study_details=None, study_keywords=None, study_groups=None, study_permissions=None, surveys=None, survey_login_configuration=None, randomization=None, study_dictionaries=None, limited_cr_fs_by_roles=None, migration_plans=None, cogstate_battery_notifications=None, local_vars_configuration=None):  # noqa: E501
        """ODMcomplexTypeDefinitionStudy - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._global_variables = None
        self._basic_definitions = None
        self._meta_data_version = None
        self._oid = None
        self._study_export_options = None
        self._study_parameters = None
        self._available_crf_languages = None
        self._sequence_parameters = None
        self._study_sequences = None
        self._study_rules = None
        self._study_details = None
        self._study_keywords = None
        self._study_groups = None
        self._study_permissions = None
        self._surveys = None
        self._survey_login_configuration = None
        self._randomization = None
        self._study_dictionaries = None
        self._limited_cr_fs_by_roles = None
        self._migration_plans = None
        self._cogstate_battery_notifications = None
        self.discriminator = None

        self.global_variables = global_variables
        if basic_definitions is not None:
            self.basic_definitions = basic_definitions
        if meta_data_version is not None:
            self.meta_data_version = meta_data_version
        if oid is not None:
            self.oid = oid
        self.study_export_options = study_export_options
        self.study_parameters = study_parameters
        self.available_crf_languages = available_crf_languages
        self.sequence_parameters = sequence_parameters
        self.study_sequences = study_sequences
        self.study_rules = study_rules
        self.study_details = study_details
        self.study_keywords = study_keywords
        self.study_groups = study_groups
        self.study_permissions = study_permissions
        self.surveys = surveys
        self.survey_login_configuration = survey_login_configuration
        self.randomization = randomization
        self.study_dictionaries = study_dictionaries
        self.limited_cr_fs_by_roles = limited_cr_fs_by_roles
        self.migration_plans = migration_plans
        self.cogstate_battery_notifications = cogstate_battery_notifications

    @property
    def global_variables(self):
        """Gets the global_variables of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The global_variables of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionGlobalVariables
        """
        return self._global_variables

    @global_variables.setter
    def global_variables(self, global_variables):
        """Sets the global_variables of this ODMcomplexTypeDefinitionStudy.


        :param global_variables: The global_variables of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: ODMcomplexTypeDefinitionGlobalVariables
        """
        if self.local_vars_configuration.client_side_validation and global_variables is None:  # noqa: E501
            raise ValueError("Invalid value for `global_variables`, must not be `None`")  # noqa: E501

        self._global_variables = global_variables

    @property
    def basic_definitions(self):
        """Gets the basic_definitions of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The basic_definitions of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionBasicDefinitions
        """
        return self._basic_definitions

    @basic_definitions.setter
    def basic_definitions(self, basic_definitions):
        """Sets the basic_definitions of this ODMcomplexTypeDefinitionStudy.


        :param basic_definitions: The basic_definitions of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: ODMcomplexTypeDefinitionBasicDefinitions
        """

        self._basic_definitions = basic_definitions

    @property
    def meta_data_version(self):
        """Gets the meta_data_version of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The meta_data_version of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionMetaDataVersion]
        """
        return self._meta_data_version

    @meta_data_version.setter
    def meta_data_version(self, meta_data_version):
        """Sets the meta_data_version of this ODMcomplexTypeDefinitionStudy.


        :param meta_data_version: The meta_data_version of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionMetaDataVersion]
        """

        self._meta_data_version = meta_data_version

    @property
    def oid(self):
        """Gets the oid of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The oid of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: str
        """
        return self._oid

    @oid.setter
    def oid(self, oid):
        """Sets the oid of this ODMcomplexTypeDefinitionStudy.


        :param oid: The oid of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: str
        """

        self._oid = oid

    @property
    def study_export_options(self):
        """Gets the study_export_options of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The study_export_options of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: StudyExportOptions
        """
        return self._study_export_options

    @study_export_options.setter
    def study_export_options(self, study_export_options):
        """Sets the study_export_options of this ODMcomplexTypeDefinitionStudy.


        :param study_export_options: The study_export_options of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: StudyExportOptions
        """
        if self.local_vars_configuration.client_side_validation and study_export_options is None:  # noqa: E501
            raise ValueError("Invalid value for `study_export_options`, must not be `None`")  # noqa: E501

        self._study_export_options = study_export_options

    @property
    def study_parameters(self):
        """Gets the study_parameters of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The study_parameters of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: StudyParameters
        """
        return self._study_parameters

    @study_parameters.setter
    def study_parameters(self, study_parameters):
        """Sets the study_parameters of this ODMcomplexTypeDefinitionStudy.


        :param study_parameters: The study_parameters of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: StudyParameters
        """
        if self.local_vars_configuration.client_side_validation and study_parameters is None:  # noqa: E501
            raise ValueError("Invalid value for `study_parameters`, must not be `None`")  # noqa: E501

        self._study_parameters = study_parameters

    @property
    def available_crf_languages(self):
        """Gets the available_crf_languages of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The available_crf_languages of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: AvailableCrfLanguages
        """
        return self._available_crf_languages

    @available_crf_languages.setter
    def available_crf_languages(self, available_crf_languages):
        """Sets the available_crf_languages of this ODMcomplexTypeDefinitionStudy.


        :param available_crf_languages: The available_crf_languages of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: AvailableCrfLanguages
        """
        if self.local_vars_configuration.client_side_validation and available_crf_languages is None:  # noqa: E501
            raise ValueError("Invalid value for `available_crf_languages`, must not be `None`")  # noqa: E501

        self._available_crf_languages = available_crf_languages

    @property
    def sequence_parameters(self):
        """Gets the sequence_parameters of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The sequence_parameters of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: SequenceParameters
        """
        return self._sequence_parameters

    @sequence_parameters.setter
    def sequence_parameters(self, sequence_parameters):
        """Sets the sequence_parameters of this ODMcomplexTypeDefinitionStudy.


        :param sequence_parameters: The sequence_parameters of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: SequenceParameters
        """
        if self.local_vars_configuration.client_side_validation and sequence_parameters is None:  # noqa: E501
            raise ValueError("Invalid value for `sequence_parameters`, must not be `None`")  # noqa: E501

        self._sequence_parameters = sequence_parameters

    @property
    def study_sequences(self):
        """Gets the study_sequences of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The study_sequences of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: StudySequences
        """
        return self._study_sequences

    @study_sequences.setter
    def study_sequences(self, study_sequences):
        """Sets the study_sequences of this ODMcomplexTypeDefinitionStudy.


        :param study_sequences: The study_sequences of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: StudySequences
        """
        if self.local_vars_configuration.client_side_validation and study_sequences is None:  # noqa: E501
            raise ValueError("Invalid value for `study_sequences`, must not be `None`")  # noqa: E501

        self._study_sequences = study_sequences

    @property
    def study_rules(self):
        """Gets the study_rules of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The study_rules of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: StudyRules
        """
        return self._study_rules

    @study_rules.setter
    def study_rules(self, study_rules):
        """Sets the study_rules of this ODMcomplexTypeDefinitionStudy.


        :param study_rules: The study_rules of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: StudyRules
        """
        if self.local_vars_configuration.client_side_validation and study_rules is None:  # noqa: E501
            raise ValueError("Invalid value for `study_rules`, must not be `None`")  # noqa: E501

        self._study_rules = study_rules

    @property
    def study_details(self):
        """Gets the study_details of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The study_details of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: StudyDetails
        """
        return self._study_details

    @study_details.setter
    def study_details(self, study_details):
        """Sets the study_details of this ODMcomplexTypeDefinitionStudy.


        :param study_details: The study_details of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: StudyDetails
        """
        if self.local_vars_configuration.client_side_validation and study_details is None:  # noqa: E501
            raise ValueError("Invalid value for `study_details`, must not be `None`")  # noqa: E501

        self._study_details = study_details

    @property
    def study_keywords(self):
        """Gets the study_keywords of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The study_keywords of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: StudyKeywords
        """
        return self._study_keywords

    @study_keywords.setter
    def study_keywords(self, study_keywords):
        """Sets the study_keywords of this ODMcomplexTypeDefinitionStudy.


        :param study_keywords: The study_keywords of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: StudyKeywords
        """
        if self.local_vars_configuration.client_side_validation and study_keywords is None:  # noqa: E501
            raise ValueError("Invalid value for `study_keywords`, must not be `None`")  # noqa: E501

        self._study_keywords = study_keywords

    @property
    def study_groups(self):
        """Gets the study_groups of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The study_groups of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: StudyGroups
        """
        return self._study_groups

    @study_groups.setter
    def study_groups(self, study_groups):
        """Sets the study_groups of this ODMcomplexTypeDefinitionStudy.


        :param study_groups: The study_groups of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: StudyGroups
        """
        if self.local_vars_configuration.client_side_validation and study_groups is None:  # noqa: E501
            raise ValueError("Invalid value for `study_groups`, must not be `None`")  # noqa: E501

        self._study_groups = study_groups

    @property
    def study_permissions(self):
        """Gets the study_permissions of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The study_permissions of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: StudyPermissions
        """
        return self._study_permissions

    @study_permissions.setter
    def study_permissions(self, study_permissions):
        """Sets the study_permissions of this ODMcomplexTypeDefinitionStudy.


        :param study_permissions: The study_permissions of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: StudyPermissions
        """
        if self.local_vars_configuration.client_side_validation and study_permissions is None:  # noqa: E501
            raise ValueError("Invalid value for `study_permissions`, must not be `None`")  # noqa: E501

        self._study_permissions = study_permissions

    @property
    def surveys(self):
        """Gets the surveys of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The surveys of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: Surveys
        """
        return self._surveys

    @surveys.setter
    def surveys(self, surveys):
        """Sets the surveys of this ODMcomplexTypeDefinitionStudy.


        :param surveys: The surveys of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: Surveys
        """
        if self.local_vars_configuration.client_side_validation and surveys is None:  # noqa: E501
            raise ValueError("Invalid value for `surveys`, must not be `None`")  # noqa: E501

        self._surveys = surveys

    @property
    def survey_login_configuration(self):
        """Gets the survey_login_configuration of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The survey_login_configuration of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: SurveyLoginConfiguration
        """
        return self._survey_login_configuration

    @survey_login_configuration.setter
    def survey_login_configuration(self, survey_login_configuration):
        """Sets the survey_login_configuration of this ODMcomplexTypeDefinitionStudy.


        :param survey_login_configuration: The survey_login_configuration of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: SurveyLoginConfiguration
        """
        if self.local_vars_configuration.client_side_validation and survey_login_configuration is None:  # noqa: E501
            raise ValueError("Invalid value for `survey_login_configuration`, must not be `None`")  # noqa: E501

        self._survey_login_configuration = survey_login_configuration

    @property
    def randomization(self):
        """Gets the randomization of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The randomization of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: Randomization
        """
        return self._randomization

    @randomization.setter
    def randomization(self, randomization):
        """Sets the randomization of this ODMcomplexTypeDefinitionStudy.


        :param randomization: The randomization of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: Randomization
        """
        if self.local_vars_configuration.client_side_validation and randomization is None:  # noqa: E501
            raise ValueError("Invalid value for `randomization`, must not be `None`")  # noqa: E501

        self._randomization = randomization

    @property
    def study_dictionaries(self):
        """Gets the study_dictionaries of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The study_dictionaries of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: StudyDictionaries
        """
        return self._study_dictionaries

    @study_dictionaries.setter
    def study_dictionaries(self, study_dictionaries):
        """Sets the study_dictionaries of this ODMcomplexTypeDefinitionStudy.


        :param study_dictionaries: The study_dictionaries of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: StudyDictionaries
        """
        if self.local_vars_configuration.client_side_validation and study_dictionaries is None:  # noqa: E501
            raise ValueError("Invalid value for `study_dictionaries`, must not be `None`")  # noqa: E501

        self._study_dictionaries = study_dictionaries

    @property
    def limited_cr_fs_by_roles(self):
        """Gets the limited_cr_fs_by_roles of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The limited_cr_fs_by_roles of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: LimitedCRFsByRoles
        """
        return self._limited_cr_fs_by_roles

    @limited_cr_fs_by_roles.setter
    def limited_cr_fs_by_roles(self, limited_cr_fs_by_roles):
        """Sets the limited_cr_fs_by_roles of this ODMcomplexTypeDefinitionStudy.


        :param limited_cr_fs_by_roles: The limited_cr_fs_by_roles of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: LimitedCRFsByRoles
        """
        if self.local_vars_configuration.client_side_validation and limited_cr_fs_by_roles is None:  # noqa: E501
            raise ValueError("Invalid value for `limited_cr_fs_by_roles`, must not be `None`")  # noqa: E501

        self._limited_cr_fs_by_roles = limited_cr_fs_by_roles

    @property
    def migration_plans(self):
        """Gets the migration_plans of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The migration_plans of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: MigrationPlans
        """
        return self._migration_plans

    @migration_plans.setter
    def migration_plans(self, migration_plans):
        """Sets the migration_plans of this ODMcomplexTypeDefinitionStudy.


        :param migration_plans: The migration_plans of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: MigrationPlans
        """
        if self.local_vars_configuration.client_side_validation and migration_plans is None:  # noqa: E501
            raise ValueError("Invalid value for `migration_plans`, must not be `None`")  # noqa: E501

        self._migration_plans = migration_plans

    @property
    def cogstate_battery_notifications(self):
        """Gets the cogstate_battery_notifications of this ODMcomplexTypeDefinitionStudy.  # noqa: E501


        :return: The cogstate_battery_notifications of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :rtype: CogstateBatteryNotifications
        """
        return self._cogstate_battery_notifications

    @cogstate_battery_notifications.setter
    def cogstate_battery_notifications(self, cogstate_battery_notifications):
        """Sets the cogstate_battery_notifications of this ODMcomplexTypeDefinitionStudy.


        :param cogstate_battery_notifications: The cogstate_battery_notifications of this ODMcomplexTypeDefinitionStudy.  # noqa: E501
        :type: CogstateBatteryNotifications
        """
        if self.local_vars_configuration.client_side_validation and cogstate_battery_notifications is None:  # noqa: E501
            raise ValueError("Invalid value for `cogstate_battery_notifications`, must not be `None`")  # noqa: E501

        self._cogstate_battery_notifications = cogstate_battery_notifications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionStudy):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionStudy):
            return True

        return self.to_dict() != other.to_dict()
