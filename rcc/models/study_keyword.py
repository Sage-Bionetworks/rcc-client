# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class StudyKeyword(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'study_keyword_value': 'list[StudyKeywordValue]',
        'keyword': 'str'
    }

    attribute_map = {
        'study_keyword_value': 'studyKeywordValue',
        'keyword': 'keyword'
    }

    def __init__(self, study_keyword_value=None, keyword=None, local_vars_configuration=None):  # noqa: E501
        """StudyKeyword - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._study_keyword_value = None
        self._keyword = None
        self.discriminator = None

        if study_keyword_value is not None:
            self.study_keyword_value = study_keyword_value
        if keyword is not None:
            self.keyword = keyword

    @property
    def study_keyword_value(self):
        """Gets the study_keyword_value of this StudyKeyword.  # noqa: E501


        :return: The study_keyword_value of this StudyKeyword.  # noqa: E501
        :rtype: list[StudyKeywordValue]
        """
        return self._study_keyword_value

    @study_keyword_value.setter
    def study_keyword_value(self, study_keyword_value):
        """Sets the study_keyword_value of this StudyKeyword.


        :param study_keyword_value: The study_keyword_value of this StudyKeyword.  # noqa: E501
        :type: list[StudyKeywordValue]
        """

        self._study_keyword_value = study_keyword_value

    @property
    def keyword(self):
        """Gets the keyword of this StudyKeyword.  # noqa: E501


        :return: The keyword of this StudyKeyword.  # noqa: E501
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword):
        """Sets the keyword of this StudyKeyword.


        :param keyword: The keyword of this StudyKeyword.  # noqa: E501
        :type: str
        """

        self._keyword = keyword

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StudyKeyword):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, StudyKeyword):
            return True

        return self.to_dict() != other.to_dict()
