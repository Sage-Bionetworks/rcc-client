# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ODMcomplexTypeDefinitionAddress(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'street_name': 'list[ODMcomplexTypeDefinitionStreetName]',
        'city': 'ODMcomplexTypeDefinitionCity',
        'state_prov': 'ODMcomplexTypeDefinitionStateProv',
        'country': 'ODMcomplexTypeDefinitionCountry',
        'postal_code': 'ODMcomplexTypeDefinitionPostalCode',
        'other_text': 'ODMcomplexTypeDefinitionOtherText'
    }

    attribute_map = {
        'street_name': 'streetName',
        'city': 'city',
        'state_prov': 'stateProv',
        'country': 'country',
        'postal_code': 'postalCode',
        'other_text': 'otherText'
    }

    def __init__(self, street_name=None, city=None, state_prov=None, country=None, postal_code=None, other_text=None, local_vars_configuration=None):  # noqa: E501
        """ODMcomplexTypeDefinitionAddress - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._street_name = None
        self._city = None
        self._state_prov = None
        self._country = None
        self._postal_code = None
        self._other_text = None
        self.discriminator = None

        if street_name is not None:
            self.street_name = street_name
        if city is not None:
            self.city = city
        if state_prov is not None:
            self.state_prov = state_prov
        if country is not None:
            self.country = country
        if postal_code is not None:
            self.postal_code = postal_code
        if other_text is not None:
            self.other_text = other_text

    @property
    def street_name(self):
        """Gets the street_name of this ODMcomplexTypeDefinitionAddress.  # noqa: E501


        :return: The street_name of this ODMcomplexTypeDefinitionAddress.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionStreetName]
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this ODMcomplexTypeDefinitionAddress.


        :param street_name: The street_name of this ODMcomplexTypeDefinitionAddress.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionStreetName]
        """

        self._street_name = street_name

    @property
    def city(self):
        """Gets the city of this ODMcomplexTypeDefinitionAddress.  # noqa: E501


        :return: The city of this ODMcomplexTypeDefinitionAddress.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionCity
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ODMcomplexTypeDefinitionAddress.


        :param city: The city of this ODMcomplexTypeDefinitionAddress.  # noqa: E501
        :type: ODMcomplexTypeDefinitionCity
        """

        self._city = city

    @property
    def state_prov(self):
        """Gets the state_prov of this ODMcomplexTypeDefinitionAddress.  # noqa: E501


        :return: The state_prov of this ODMcomplexTypeDefinitionAddress.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionStateProv
        """
        return self._state_prov

    @state_prov.setter
    def state_prov(self, state_prov):
        """Sets the state_prov of this ODMcomplexTypeDefinitionAddress.


        :param state_prov: The state_prov of this ODMcomplexTypeDefinitionAddress.  # noqa: E501
        :type: ODMcomplexTypeDefinitionStateProv
        """

        self._state_prov = state_prov

    @property
    def country(self):
        """Gets the country of this ODMcomplexTypeDefinitionAddress.  # noqa: E501


        :return: The country of this ODMcomplexTypeDefinitionAddress.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionCountry
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ODMcomplexTypeDefinitionAddress.


        :param country: The country of this ODMcomplexTypeDefinitionAddress.  # noqa: E501
        :type: ODMcomplexTypeDefinitionCountry
        """

        self._country = country

    @property
    def postal_code(self):
        """Gets the postal_code of this ODMcomplexTypeDefinitionAddress.  # noqa: E501


        :return: The postal_code of this ODMcomplexTypeDefinitionAddress.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionPostalCode
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ODMcomplexTypeDefinitionAddress.


        :param postal_code: The postal_code of this ODMcomplexTypeDefinitionAddress.  # noqa: E501
        :type: ODMcomplexTypeDefinitionPostalCode
        """

        self._postal_code = postal_code

    @property
    def other_text(self):
        """Gets the other_text of this ODMcomplexTypeDefinitionAddress.  # noqa: E501


        :return: The other_text of this ODMcomplexTypeDefinitionAddress.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionOtherText
        """
        return self._other_text

    @other_text.setter
    def other_text(self, other_text):
        """Sets the other_text of this ODMcomplexTypeDefinitionAddress.


        :param other_text: The other_text of this ODMcomplexTypeDefinitionAddress.  # noqa: E501
        :type: ODMcomplexTypeDefinitionOtherText
        """

        self._other_text = other_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionAddress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionAddress):
            return True

        return self.to_dict() != other.to_dict()
