# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class CrfItemMetadataRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'item': 'CrfItemRpc',
        'item_group': 'ItemGroupRpc',
        'rc_response_sets_id': 'int',
        'display_sequence': 'int',
        'is_required': 'bool',
        'branching_equation': 'str',
        'sdv_required': 'bool',
        'e_consent_signature': 'bool',
        'is_removed': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'item': 'item',
        'item_group': 'itemGroup',
        'rc_response_sets_id': 'rcResponseSetsId',
        'display_sequence': 'displaySequence',
        'is_required': 'isRequired',
        'branching_equation': 'branchingEquation',
        'sdv_required': 'sdvRequired',
        'e_consent_signature': 'eConsentSignature',
        'is_removed': 'isRemoved'
    }

    def __init__(self, id=None, item=None, item_group=None, rc_response_sets_id=None, display_sequence=None, is_required=None, branching_equation=None, sdv_required=None, e_consent_signature=None, is_removed=None, local_vars_configuration=None):  # noqa: E501
        """CrfItemMetadataRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._item = None
        self._item_group = None
        self._rc_response_sets_id = None
        self._display_sequence = None
        self._is_required = None
        self._branching_equation = None
        self._sdv_required = None
        self._e_consent_signature = None
        self._is_removed = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if item is not None:
            self.item = item
        if item_group is not None:
            self.item_group = item_group
        if rc_response_sets_id is not None:
            self.rc_response_sets_id = rc_response_sets_id
        if display_sequence is not None:
            self.display_sequence = display_sequence
        if is_required is not None:
            self.is_required = is_required
        if branching_equation is not None:
            self.branching_equation = branching_equation
        if sdv_required is not None:
            self.sdv_required = sdv_required
        if e_consent_signature is not None:
            self.e_consent_signature = e_consent_signature
        if is_removed is not None:
            self.is_removed = is_removed

    @property
    def id(self):
        """Gets the id of this CrfItemMetadataRpc.  # noqa: E501


        :return: The id of this CrfItemMetadataRpc.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CrfItemMetadataRpc.


        :param id: The id of this CrfItemMetadataRpc.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def item(self):
        """Gets the item of this CrfItemMetadataRpc.  # noqa: E501


        :return: The item of this CrfItemMetadataRpc.  # noqa: E501
        :rtype: CrfItemRpc
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this CrfItemMetadataRpc.


        :param item: The item of this CrfItemMetadataRpc.  # noqa: E501
        :type: CrfItemRpc
        """

        self._item = item

    @property
    def item_group(self):
        """Gets the item_group of this CrfItemMetadataRpc.  # noqa: E501


        :return: The item_group of this CrfItemMetadataRpc.  # noqa: E501
        :rtype: ItemGroupRpc
        """
        return self._item_group

    @item_group.setter
    def item_group(self, item_group):
        """Sets the item_group of this CrfItemMetadataRpc.


        :param item_group: The item_group of this CrfItemMetadataRpc.  # noqa: E501
        :type: ItemGroupRpc
        """

        self._item_group = item_group

    @property
    def rc_response_sets_id(self):
        """Gets the rc_response_sets_id of this CrfItemMetadataRpc.  # noqa: E501


        :return: The rc_response_sets_id of this CrfItemMetadataRpc.  # noqa: E501
        :rtype: int
        """
        return self._rc_response_sets_id

    @rc_response_sets_id.setter
    def rc_response_sets_id(self, rc_response_sets_id):
        """Sets the rc_response_sets_id of this CrfItemMetadataRpc.


        :param rc_response_sets_id: The rc_response_sets_id of this CrfItemMetadataRpc.  # noqa: E501
        :type: int
        """

        self._rc_response_sets_id = rc_response_sets_id

    @property
    def display_sequence(self):
        """Gets the display_sequence of this CrfItemMetadataRpc.  # noqa: E501


        :return: The display_sequence of this CrfItemMetadataRpc.  # noqa: E501
        :rtype: int
        """
        return self._display_sequence

    @display_sequence.setter
    def display_sequence(self, display_sequence):
        """Sets the display_sequence of this CrfItemMetadataRpc.


        :param display_sequence: The display_sequence of this CrfItemMetadataRpc.  # noqa: E501
        :type: int
        """

        self._display_sequence = display_sequence

    @property
    def is_required(self):
        """Gets the is_required of this CrfItemMetadataRpc.  # noqa: E501


        :return: The is_required of this CrfItemMetadataRpc.  # noqa: E501
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this CrfItemMetadataRpc.


        :param is_required: The is_required of this CrfItemMetadataRpc.  # noqa: E501
        :type: bool
        """

        self._is_required = is_required

    @property
    def branching_equation(self):
        """Gets the branching_equation of this CrfItemMetadataRpc.  # noqa: E501


        :return: The branching_equation of this CrfItemMetadataRpc.  # noqa: E501
        :rtype: str
        """
        return self._branching_equation

    @branching_equation.setter
    def branching_equation(self, branching_equation):
        """Sets the branching_equation of this CrfItemMetadataRpc.


        :param branching_equation: The branching_equation of this CrfItemMetadataRpc.  # noqa: E501
        :type: str
        """

        self._branching_equation = branching_equation

    @property
    def sdv_required(self):
        """Gets the sdv_required of this CrfItemMetadataRpc.  # noqa: E501


        :return: The sdv_required of this CrfItemMetadataRpc.  # noqa: E501
        :rtype: bool
        """
        return self._sdv_required

    @sdv_required.setter
    def sdv_required(self, sdv_required):
        """Sets the sdv_required of this CrfItemMetadataRpc.


        :param sdv_required: The sdv_required of this CrfItemMetadataRpc.  # noqa: E501
        :type: bool
        """

        self._sdv_required = sdv_required

    @property
    def e_consent_signature(self):
        """Gets the e_consent_signature of this CrfItemMetadataRpc.  # noqa: E501


        :return: The e_consent_signature of this CrfItemMetadataRpc.  # noqa: E501
        :rtype: bool
        """
        return self._e_consent_signature

    @e_consent_signature.setter
    def e_consent_signature(self, e_consent_signature):
        """Sets the e_consent_signature of this CrfItemMetadataRpc.


        :param e_consent_signature: The e_consent_signature of this CrfItemMetadataRpc.  # noqa: E501
        :type: bool
        """

        self._e_consent_signature = e_consent_signature

    @property
    def is_removed(self):
        """Gets the is_removed of this CrfItemMetadataRpc.  # noqa: E501


        :return: The is_removed of this CrfItemMetadataRpc.  # noqa: E501
        :rtype: bool
        """
        return self._is_removed

    @is_removed.setter
    def is_removed(self, is_removed):
        """Sets the is_removed of this CrfItemMetadataRpc.


        :param is_removed: The is_removed of this CrfItemMetadataRpc.  # noqa: E501
        :type: bool
        """

        self._is_removed = is_removed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrfItemMetadataRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CrfItemMetadataRpc):
            return True

        return self.to_dict() != other.to_dict()
