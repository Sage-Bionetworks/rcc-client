# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ODMcomplexTypeDefinitionAnnotation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'comment': 'ODMcomplexTypeDefinitionComment',
        'flag': 'list[ODMcomplexTypeDefinitionFlag]',
        'seq_num': 'int',
        'transaction_type': 'str',
        'id': 'str'
    }

    attribute_map = {
        'comment': 'comment',
        'flag': 'flag',
        'seq_num': 'seqNum',
        'transaction_type': 'transactionType',
        'id': 'id'
    }

    def __init__(self, comment=None, flag=None, seq_num=None, transaction_type=None, id=None, local_vars_configuration=None):  # noqa: E501
        """ODMcomplexTypeDefinitionAnnotation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._comment = None
        self._flag = None
        self._seq_num = None
        self._transaction_type = None
        self._id = None
        self.discriminator = None

        if comment is not None:
            self.comment = comment
        if flag is not None:
            self.flag = flag
        if seq_num is not None:
            self.seq_num = seq_num
        if transaction_type is not None:
            self.transaction_type = transaction_type
        if id is not None:
            self.id = id

    @property
    def comment(self):
        """Gets the comment of this ODMcomplexTypeDefinitionAnnotation.  # noqa: E501


        :return: The comment of this ODMcomplexTypeDefinitionAnnotation.  # noqa: E501
        :rtype: ODMcomplexTypeDefinitionComment
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this ODMcomplexTypeDefinitionAnnotation.


        :param comment: The comment of this ODMcomplexTypeDefinitionAnnotation.  # noqa: E501
        :type: ODMcomplexTypeDefinitionComment
        """

        self._comment = comment

    @property
    def flag(self):
        """Gets the flag of this ODMcomplexTypeDefinitionAnnotation.  # noqa: E501


        :return: The flag of this ODMcomplexTypeDefinitionAnnotation.  # noqa: E501
        :rtype: list[ODMcomplexTypeDefinitionFlag]
        """
        return self._flag

    @flag.setter
    def flag(self, flag):
        """Sets the flag of this ODMcomplexTypeDefinitionAnnotation.


        :param flag: The flag of this ODMcomplexTypeDefinitionAnnotation.  # noqa: E501
        :type: list[ODMcomplexTypeDefinitionFlag]
        """

        self._flag = flag

    @property
    def seq_num(self):
        """Gets the seq_num of this ODMcomplexTypeDefinitionAnnotation.  # noqa: E501


        :return: The seq_num of this ODMcomplexTypeDefinitionAnnotation.  # noqa: E501
        :rtype: int
        """
        return self._seq_num

    @seq_num.setter
    def seq_num(self, seq_num):
        """Sets the seq_num of this ODMcomplexTypeDefinitionAnnotation.


        :param seq_num: The seq_num of this ODMcomplexTypeDefinitionAnnotation.  # noqa: E501
        :type: int
        """

        self._seq_num = seq_num

    @property
    def transaction_type(self):
        """Gets the transaction_type of this ODMcomplexTypeDefinitionAnnotation.  # noqa: E501


        :return: The transaction_type of this ODMcomplexTypeDefinitionAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this ODMcomplexTypeDefinitionAnnotation.


        :param transaction_type: The transaction_type of this ODMcomplexTypeDefinitionAnnotation.  # noqa: E501
        :type: str
        """
        allowed_values = ["INSERT", "UPDATE", "REMOVE", "UPSERT", "CONTEXT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and transaction_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `transaction_type` ({0}), must be one of {1}"  # noqa: E501
                .format(transaction_type, allowed_values)
            )

        self._transaction_type = transaction_type

    @property
    def id(self):
        """Gets the id of this ODMcomplexTypeDefinitionAnnotation.  # noqa: E501


        :return: The id of this ODMcomplexTypeDefinitionAnnotation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ODMcomplexTypeDefinitionAnnotation.


        :param id: The id of this ODMcomplexTypeDefinitionAnnotation.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionAnnotation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ODMcomplexTypeDefinitionAnnotation):
            return True

        return self.to_dict() != other.to_dict()
