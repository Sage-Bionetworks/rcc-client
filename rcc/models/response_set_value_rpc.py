# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class ResponseSetValueRpc(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'study_id': 'int',
        'response_sets_id': 'int',
        'options_text': 'str',
        'value': 'str',
        'display_sequence': 'int'
    }

    attribute_map = {
        'id': 'id',
        'study_id': 'studyId',
        'response_sets_id': 'responseSetsId',
        'options_text': 'optionsText',
        'value': 'value',
        'display_sequence': 'displaySequence'
    }

    def __init__(self, id=None, study_id=None, response_sets_id=None, options_text=None, value=None, display_sequence=None, local_vars_configuration=None):  # noqa: E501
        """ResponseSetValueRpc - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._study_id = None
        self._response_sets_id = None
        self._options_text = None
        self._value = None
        self._display_sequence = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if study_id is not None:
            self.study_id = study_id
        if response_sets_id is not None:
            self.response_sets_id = response_sets_id
        if options_text is not None:
            self.options_text = options_text
        if value is not None:
            self.value = value
        if display_sequence is not None:
            self.display_sequence = display_sequence

    @property
    def id(self):
        """Gets the id of this ResponseSetValueRpc.  # noqa: E501


        :return: The id of this ResponseSetValueRpc.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseSetValueRpc.


        :param id: The id of this ResponseSetValueRpc.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def study_id(self):
        """Gets the study_id of this ResponseSetValueRpc.  # noqa: E501


        :return: The study_id of this ResponseSetValueRpc.  # noqa: E501
        :rtype: int
        """
        return self._study_id

    @study_id.setter
    def study_id(self, study_id):
        """Sets the study_id of this ResponseSetValueRpc.


        :param study_id: The study_id of this ResponseSetValueRpc.  # noqa: E501
        :type: int
        """

        self._study_id = study_id

    @property
    def response_sets_id(self):
        """Gets the response_sets_id of this ResponseSetValueRpc.  # noqa: E501


        :return: The response_sets_id of this ResponseSetValueRpc.  # noqa: E501
        :rtype: int
        """
        return self._response_sets_id

    @response_sets_id.setter
    def response_sets_id(self, response_sets_id):
        """Sets the response_sets_id of this ResponseSetValueRpc.


        :param response_sets_id: The response_sets_id of this ResponseSetValueRpc.  # noqa: E501
        :type: int
        """

        self._response_sets_id = response_sets_id

    @property
    def options_text(self):
        """Gets the options_text of this ResponseSetValueRpc.  # noqa: E501


        :return: The options_text of this ResponseSetValueRpc.  # noqa: E501
        :rtype: str
        """
        return self._options_text

    @options_text.setter
    def options_text(self, options_text):
        """Sets the options_text of this ResponseSetValueRpc.


        :param options_text: The options_text of this ResponseSetValueRpc.  # noqa: E501
        :type: str
        """

        self._options_text = options_text

    @property
    def value(self):
        """Gets the value of this ResponseSetValueRpc.  # noqa: E501


        :return: The value of this ResponseSetValueRpc.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ResponseSetValueRpc.


        :param value: The value of this ResponseSetValueRpc.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def display_sequence(self):
        """Gets the display_sequence of this ResponseSetValueRpc.  # noqa: E501


        :return: The display_sequence of this ResponseSetValueRpc.  # noqa: E501
        :rtype: int
        """
        return self._display_sequence

    @display_sequence.setter
    def display_sequence(self, display_sequence):
        """Sets the display_sequence of this ResponseSetValueRpc.


        :param display_sequence: The display_sequence of this ResponseSetValueRpc.  # noqa: E501
        :type: int
        """

        self._display_sequence = display_sequence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseSetValueRpc):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseSetValueRpc):
            return True

        return self.to_dict() != other.to_dict()
