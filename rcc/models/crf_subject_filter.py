# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from rcc.configuration import Configuration


class CrfSubjectFilter(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'event_definition_ids': 'list[int]',
        'crf_versions': 'list[int]',
        'crfs': 'list[int]',
        'subject_ids': 'list[int]',
        'subject_unique_ids': 'list[str]',
        'subject_randomization_ids': 'list[str]',
        'subject_screening_ids': 'list[str]'
    }

    attribute_map = {
        'event_definition_ids': 'eventDefinitionIds',
        'crf_versions': 'crfVersions',
        'crfs': 'crfs',
        'subject_ids': 'subjectIds',
        'subject_unique_ids': 'subjectUniqueIds',
        'subject_randomization_ids': 'subjectRandomizationIds',
        'subject_screening_ids': 'subjectScreeningIds'
    }

    def __init__(self, event_definition_ids=None, crf_versions=None, crfs=None, subject_ids=None, subject_unique_ids=None, subject_randomization_ids=None, subject_screening_ids=None, local_vars_configuration=None):  # noqa: E501
        """CrfSubjectFilter - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._event_definition_ids = None
        self._crf_versions = None
        self._crfs = None
        self._subject_ids = None
        self._subject_unique_ids = None
        self._subject_randomization_ids = None
        self._subject_screening_ids = None
        self.discriminator = None

        if event_definition_ids is not None:
            self.event_definition_ids = event_definition_ids
        if crf_versions is not None:
            self.crf_versions = crf_versions
        if crfs is not None:
            self.crfs = crfs
        if subject_ids is not None:
            self.subject_ids = subject_ids
        if subject_unique_ids is not None:
            self.subject_unique_ids = subject_unique_ids
        if subject_randomization_ids is not None:
            self.subject_randomization_ids = subject_randomization_ids
        if subject_screening_ids is not None:
            self.subject_screening_ids = subject_screening_ids

    @property
    def event_definition_ids(self):
        """Gets the event_definition_ids of this CrfSubjectFilter.  # noqa: E501


        :return: The event_definition_ids of this CrfSubjectFilter.  # noqa: E501
        :rtype: list[int]
        """
        return self._event_definition_ids

    @event_definition_ids.setter
    def event_definition_ids(self, event_definition_ids):
        """Sets the event_definition_ids of this CrfSubjectFilter.


        :param event_definition_ids: The event_definition_ids of this CrfSubjectFilter.  # noqa: E501
        :type: list[int]
        """

        self._event_definition_ids = event_definition_ids

    @property
    def crf_versions(self):
        """Gets the crf_versions of this CrfSubjectFilter.  # noqa: E501


        :return: The crf_versions of this CrfSubjectFilter.  # noqa: E501
        :rtype: list[int]
        """
        return self._crf_versions

    @crf_versions.setter
    def crf_versions(self, crf_versions):
        """Sets the crf_versions of this CrfSubjectFilter.


        :param crf_versions: The crf_versions of this CrfSubjectFilter.  # noqa: E501
        :type: list[int]
        """

        self._crf_versions = crf_versions

    @property
    def crfs(self):
        """Gets the crfs of this CrfSubjectFilter.  # noqa: E501


        :return: The crfs of this CrfSubjectFilter.  # noqa: E501
        :rtype: list[int]
        """
        return self._crfs

    @crfs.setter
    def crfs(self, crfs):
        """Sets the crfs of this CrfSubjectFilter.


        :param crfs: The crfs of this CrfSubjectFilter.  # noqa: E501
        :type: list[int]
        """

        self._crfs = crfs

    @property
    def subject_ids(self):
        """Gets the subject_ids of this CrfSubjectFilter.  # noqa: E501


        :return: The subject_ids of this CrfSubjectFilter.  # noqa: E501
        :rtype: list[int]
        """
        return self._subject_ids

    @subject_ids.setter
    def subject_ids(self, subject_ids):
        """Sets the subject_ids of this CrfSubjectFilter.


        :param subject_ids: The subject_ids of this CrfSubjectFilter.  # noqa: E501
        :type: list[int]
        """

        self._subject_ids = subject_ids

    @property
    def subject_unique_ids(self):
        """Gets the subject_unique_ids of this CrfSubjectFilter.  # noqa: E501


        :return: The subject_unique_ids of this CrfSubjectFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_unique_ids

    @subject_unique_ids.setter
    def subject_unique_ids(self, subject_unique_ids):
        """Sets the subject_unique_ids of this CrfSubjectFilter.


        :param subject_unique_ids: The subject_unique_ids of this CrfSubjectFilter.  # noqa: E501
        :type: list[str]
        """

        self._subject_unique_ids = subject_unique_ids

    @property
    def subject_randomization_ids(self):
        """Gets the subject_randomization_ids of this CrfSubjectFilter.  # noqa: E501


        :return: The subject_randomization_ids of this CrfSubjectFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_randomization_ids

    @subject_randomization_ids.setter
    def subject_randomization_ids(self, subject_randomization_ids):
        """Sets the subject_randomization_ids of this CrfSubjectFilter.


        :param subject_randomization_ids: The subject_randomization_ids of this CrfSubjectFilter.  # noqa: E501
        :type: list[str]
        """

        self._subject_randomization_ids = subject_randomization_ids

    @property
    def subject_screening_ids(self):
        """Gets the subject_screening_ids of this CrfSubjectFilter.  # noqa: E501


        :return: The subject_screening_ids of this CrfSubjectFilter.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_screening_ids

    @subject_screening_ids.setter
    def subject_screening_ids(self, subject_screening_ids):
        """Sets the subject_screening_ids of this CrfSubjectFilter.


        :param subject_screening_ids: The subject_screening_ids of this CrfSubjectFilter.  # noqa: E501
        :type: list[str]
        """

        self._subject_screening_ids = subject_screening_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrfSubjectFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CrfSubjectFilter):
            return True

        return self.to_dict() != other.to_dict()
