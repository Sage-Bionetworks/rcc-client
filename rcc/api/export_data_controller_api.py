# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rcc.api_client import ApiClient
from rcc.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ExportDataControllerApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def export_all_records_csv(self, token, **kwargs):  # noqa: E501
        """Get list of user Records for specified Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_all_records_csv(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param bool generate_metadata: Need to generate metadata for records
        :param bool use_concept_value: Use Concept terms instead of Verbatim terms
        :param bool export_empty_values: Use Empty values instead of null-value
        :param str date_from: All data from subjects with enrollmentDate &gt;= dateFrom. Format: <b>2019-12-10</b> or <b>2019-12-10 10:20</b>
        :param str date_to: All data from subjects with enrollmentDate &lt;= dateTo. Format: <b>2019-12-10</b>  or <b>2019-12-10 10:20</b> 
        :param bool extract_data_delta: By default dateFrom & dateTo are used to extract all subjects and its data with enrollmentDate between those dates. Use this parameter if you want to extract data that was inserted / updated between those dates.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.export_all_records_csv_with_http_info(token, **kwargs)  # noqa: E501

    def export_all_records_csv_with_http_info(self, token, **kwargs):  # noqa: E501
        """Get list of user Records for specified Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_all_records_csv_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param bool generate_metadata: Need to generate metadata for records
        :param bool use_concept_value: Use Concept terms instead of Verbatim terms
        :param bool export_empty_values: Use Empty values instead of null-value
        :param str date_from: All data from subjects with enrollmentDate &gt;= dateFrom. Format: <b>2019-12-10</b> or <b>2019-12-10 10:20</b>
        :param str date_to: All data from subjects with enrollmentDate &lt;= dateTo. Format: <b>2019-12-10</b>  or <b>2019-12-10 10:20</b> 
        :param bool extract_data_delta: By default dateFrom & dateTo are used to extract all subjects and its data with enrollmentDate between those dates. Use this parameter if you want to extract data that was inserted / updated between those dates.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(str, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token',
            'generate_metadata',
            'use_concept_value',
            'export_empty_values',
            'date_from',
            'date_to',
            'extract_data_delta'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_all_records_csv" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `export_all_records_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'generate_metadata' in local_var_params and local_var_params['generate_metadata'] is not None:  # noqa: E501
            query_params.append(('generateMetadata', local_var_params['generate_metadata']))  # noqa: E501
        if 'use_concept_value' in local_var_params and local_var_params['use_concept_value'] is not None:  # noqa: E501
            query_params.append(('useConceptValue', local_var_params['use_concept_value']))  # noqa: E501
        if 'export_empty_values' in local_var_params and local_var_params['export_empty_values'] is not None:  # noqa: E501
            query_params.append(('exportEmptyValues', local_var_params['export_empty_values']))  # noqa: E501
        if 'date_from' in local_var_params and local_var_params['date_from'] is not None:  # noqa: E501
            query_params.append(('dateFrom', local_var_params['date_from']))  # noqa: E501
        if 'date_to' in local_var_params and local_var_params['date_to'] is not None:  # noqa: E501
            query_params.append(('dateTo', local_var_params['date_to']))  # noqa: E501
        if 'extract_data_delta' in local_var_params and local_var_params['extract_data_delta'] is not None:  # noqa: E501
            query_params.append(('extractDataDelta', local_var_params['extract_data_delta']))  # noqa: E501

        header_params = {}
        if 'token' in local_var_params:
            header_params['token'] = local_var_params['token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml', 'application/json', 'text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/export/records', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_all_records_json2(self, token, **kwargs):  # noqa: E501
        """Get list of user Records for specified Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_all_records_json2(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param bool use_concept_value: Use Concept terms instead of Verbatim terms
        :param bool export_empty_values: Use Empty values instead of null-value
        :param str date_from: All data from subjects with enrollmentDate &gt;= dateFrom. Format: <b>2019-12-10</b> or <b>2019-12-10 10:20</b>
        :param str date_to: All data from subjects with enrollmentDate &lt;= dateTo. Format: <b>2019-12-10</b>  or <b>2019-12-10 10:20</b> 
        :param bool extract_data_delta: By default dateFrom & dateTo are used to extract all subjects and its data with enrollmentDate between those dates. Use this parameter if you want to extract data that was inserted / updated between those dates.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[StudyEventRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.export_all_records_json2_with_http_info(token, **kwargs)  # noqa: E501

    def export_all_records_json2_with_http_info(self, token, **kwargs):  # noqa: E501
        """Get list of user Records for specified Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_all_records_json2_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param bool use_concept_value: Use Concept terms instead of Verbatim terms
        :param bool export_empty_values: Use Empty values instead of null-value
        :param str date_from: All data from subjects with enrollmentDate &gt;= dateFrom. Format: <b>2019-12-10</b> or <b>2019-12-10 10:20</b>
        :param str date_to: All data from subjects with enrollmentDate &lt;= dateTo. Format: <b>2019-12-10</b>  or <b>2019-12-10 10:20</b> 
        :param bool extract_data_delta: By default dateFrom & dateTo are used to extract all subjects and its data with enrollmentDate between those dates. Use this parameter if you want to extract data that was inserted / updated between those dates.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[StudyEventRecord], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token',
            'use_concept_value',
            'export_empty_values',
            'date_from',
            'date_to',
            'extract_data_delta'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_all_records_json2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `export_all_records_json2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'use_concept_value' in local_var_params and local_var_params['use_concept_value'] is not None:  # noqa: E501
            query_params.append(('useConceptValue', local_var_params['use_concept_value']))  # noqa: E501
        if 'export_empty_values' in local_var_params and local_var_params['export_empty_values'] is not None:  # noqa: E501
            query_params.append(('exportEmptyValues', local_var_params['export_empty_values']))  # noqa: E501
        if 'date_from' in local_var_params and local_var_params['date_from'] is not None:  # noqa: E501
            query_params.append(('dateFrom', local_var_params['date_from']))  # noqa: E501
        if 'date_to' in local_var_params and local_var_params['date_to'] is not None:  # noqa: E501
            query_params.append(('dateTo', local_var_params['date_to']))  # noqa: E501
        if 'extract_data_delta' in local_var_params and local_var_params['extract_data_delta'] is not None:  # noqa: E501
            query_params.append(('extractDataDelta', local_var_params['extract_data_delta']))  # noqa: E501

        header_params = {}
        if 'token' in local_var_params:
            header_params['token'] = local_var_params['token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/export/records/json', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StudyEventRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_all_records_odm(self, token, **kwargs):  # noqa: E501
        """Get Study definitions in ODM format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_all_records_odm(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.export_all_records_odm_with_http_info(token, **kwargs)  # noqa: E501

    def export_all_records_odm_with_http_info(self, token, **kwargs):  # noqa: E501
        """Get Study definitions in ODM format  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_all_records_odm_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_all_records_odm" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `export_all_records_odm`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'token' in local_var_params:
            header_params['token'] = local_var_params['token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/export/odm', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_all_records_xml2(self, token, **kwargs):  # noqa: E501
        """Get list of user Records for specified Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_all_records_xml2(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param bool use_concept_value: Use Concept terms instead of Verbatim terms
        :param bool export_empty_values: Use Empty values instead of null-value
        :param str date_from: All data from subjects with enrollmentDate &gt;= dateFrom. Format: <b>2019-12-10</b> or <b>2019-12-10 10:20</b>
        :param str date_to: All data from subjects with enrollmentDate &lt;= dateTo. Format: <b>2019-12-10</b>  or <b>2019-12-10 10:20</b> 
        :param bool extract_data_delta: By default dateFrom & dateTo are used to extract all subjects and its data with enrollmentDate between those dates. Use this parameter if you want to extract data that was inserted / updated between those dates.
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[StudyEventRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.export_all_records_xml2_with_http_info(token, **kwargs)  # noqa: E501

    def export_all_records_xml2_with_http_info(self, token, **kwargs):  # noqa: E501
        """Get list of user Records for specified Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_all_records_xml2_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param bool use_concept_value: Use Concept terms instead of Verbatim terms
        :param bool export_empty_values: Use Empty values instead of null-value
        :param str date_from: All data from subjects with enrollmentDate &gt;= dateFrom. Format: <b>2019-12-10</b> or <b>2019-12-10 10:20</b>
        :param str date_to: All data from subjects with enrollmentDate &lt;= dateTo. Format: <b>2019-12-10</b>  or <b>2019-12-10 10:20</b> 
        :param bool extract_data_delta: By default dateFrom & dateTo are used to extract all subjects and its data with enrollmentDate between those dates. Use this parameter if you want to extract data that was inserted / updated between those dates.
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[StudyEventRecord], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token',
            'use_concept_value',
            'export_empty_values',
            'date_from',
            'date_to',
            'extract_data_delta'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_all_records_xml2" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `export_all_records_xml2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'use_concept_value' in local_var_params and local_var_params['use_concept_value'] is not None:  # noqa: E501
            query_params.append(('useConceptValue', local_var_params['use_concept_value']))  # noqa: E501
        if 'export_empty_values' in local_var_params and local_var_params['export_empty_values'] is not None:  # noqa: E501
            query_params.append(('exportEmptyValues', local_var_params['export_empty_values']))  # noqa: E501
        if 'date_from' in local_var_params and local_var_params['date_from'] is not None:  # noqa: E501
            query_params.append(('dateFrom', local_var_params['date_from']))  # noqa: E501
        if 'date_to' in local_var_params and local_var_params['date_to'] is not None:  # noqa: E501
            query_params.append(('dateTo', local_var_params['date_to']))  # noqa: E501
        if 'extract_data_delta' in local_var_params and local_var_params['extract_data_delta'] is not None:  # noqa: E501
            query_params.append(('extractDataDelta', local_var_params['extract_data_delta']))  # noqa: E501

        header_params = {}
        if 'token' in local_var_params:
            header_params['token'] = local_var_params['token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/export/records/xml', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StudyEventRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_all_site_records_csv(self, id, token, **kwargs):  # noqa: E501
        """Get list of user Records for specified Study Site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_all_site_records_csv(id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: Study Site ID (required)
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param bool generate_metadata: Need to generate metadata for records
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.export_all_site_records_csv_with_http_info(id, token, **kwargs)  # noqa: E501

    def export_all_site_records_csv_with_http_info(self, id, token, **kwargs):  # noqa: E501
        """Get list of user Records for specified Study Site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_all_site_records_csv_with_http_info(id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: Study Site ID (required)
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param bool generate_metadata: Need to generate metadata for records
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'token',
            'generate_metadata'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_all_site_records_csv" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `export_all_site_records_csv`")  # noqa: E501
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `export_all_site_records_csv`")  # noqa: E501

        if self.api_client.client_side_validation and 'id' in local_var_params and not re.search(r'\d+', local_var_params['id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `id` when calling `export_all_site_records_csv`, must conform to the pattern `/\d+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if 'generate_metadata' in local_var_params and local_var_params['generate_metadata'] is not None:  # noqa: E501
            query_params.append(('generateMetadata', local_var_params['generate_metadata']))  # noqa: E501

        header_params = {}
        if 'token' in local_var_params:
            header_params['token'] = local_var_params['token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/export/records/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_all_site_records_odm(self, id, token, **kwargs):  # noqa: E501
        """Get definitions in ODM format for specified Study Site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_all_site_records_odm(id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: Study Site ID (required)
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.export_all_site_records_odm_with_http_info(id, token, **kwargs)  # noqa: E501

    def export_all_site_records_odm_with_http_info(self, id, token, **kwargs):  # noqa: E501
        """Get definitions in ODM format for specified Study Site  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_all_site_records_odm_with_http_info(id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int id: Study Site ID (required)
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'id',
            'token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_all_site_records_odm" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `export_all_site_records_odm`")  # noqa: E501
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `export_all_site_records_odm`")  # noqa: E501

        if self.api_client.client_side_validation and 'id' in local_var_params and not re.search(r'\d+', local_var_params['id']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `id` when calling `export_all_site_records_odm`, must conform to the pattern `/\d+/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'token' in local_var_params:
            header_params['token'] = local_var_params['token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/export/odm/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_extended_records_odm_for_tenant_study(self, study_id, token, **kwargs):  # noqa: E501
        """Get definitions in ODM (SDM Extended Data) format for specified Tenant Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_extended_records_odm_for_tenant_study(study_id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int study_id: Study ID in RedCap (required)
        :param str token: User access token to corresponding RedCap Cloud Tenant. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.export_extended_records_odm_for_tenant_study_with_http_info(study_id, token, **kwargs)  # noqa: E501

    def export_extended_records_odm_for_tenant_study_with_http_info(self, study_id, token, **kwargs):  # noqa: E501
        """Get definitions in ODM (SDM Extended Data) format for specified Tenant Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_extended_records_odm_for_tenant_study_with_http_info(study_id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int study_id: Study ID in RedCap (required)
        :param str token: User access token to corresponding RedCap Cloud Tenant. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'study_id',
            'token'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_extended_records_odm_for_tenant_study" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'study_id' is set
        if self.api_client.client_side_validation and ('study_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['study_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `study_id` when calling `export_extended_records_odm_for_tenant_study`")  # noqa: E501
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `export_extended_records_odm_for_tenant_study`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'study_id' in local_var_params:
            header_params['study_id'] = local_var_params['study_id']  # noqa: E501
        if 'token' in local_var_params:
            header_params['token'] = local_var_params['token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/export/odm/extended', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_extended_records_odm_for_tenant_study_post(self, study_id, token, **kwargs):  # noqa: E501
        """Get definitions in ODM (SDM Extended Data) format for specified Tenant Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_extended_records_odm_for_tenant_study_post(study_id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int study_id: Study ID in RedCap (required)
        :param str token: User access token to corresponding RedCap Cloud Tenant. (required)
        :param ExportOptions body: Export Options
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.export_extended_records_odm_for_tenant_study_post_with_http_info(study_id, token, **kwargs)  # noqa: E501

    def export_extended_records_odm_for_tenant_study_post_with_http_info(self, study_id, token, **kwargs):  # noqa: E501
        """Get definitions in ODM (SDM Extended Data) format for specified Tenant Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_extended_records_odm_for_tenant_study_post_with_http_info(study_id, token, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param int study_id: Study ID in RedCap (required)
        :param str token: User access token to corresponding RedCap Cloud Tenant. (required)
        :param ExportOptions body: Export Options
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'study_id',
            'token',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_extended_records_odm_for_tenant_study_post" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'study_id' is set
        if self.api_client.client_side_validation and ('study_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['study_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `study_id` when calling `export_extended_records_odm_for_tenant_study_post`")  # noqa: E501
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `export_extended_records_odm_for_tenant_study_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'study_id' in local_var_params:
            header_params['study_id'] = local_var_params['study_id']  # noqa: E501
        if 'token' in local_var_params:
            header_params['token'] = local_var_params['token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml', 'text/csv', 'application/odm'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/export/odm/extended', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_records_csv(self, token, body, **kwargs):  # noqa: E501
        """Get list of user Records for specified Study and filters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_records_csv(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param ExportOptions body: Record Export Options (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.export_records_csv_with_http_info(token, body, **kwargs)  # noqa: E501

    def export_records_csv_with_http_info(self, token, body, **kwargs):  # noqa: E501
        """Get list of user Records for specified Study and filters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_records_csv_with_http_info(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param ExportOptions body: Record Export Options (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_records_csv" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `export_records_csv`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `export_records_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'token' in local_var_params:
            header_params['token'] = local_var_params['token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/export/records', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_records_odm(self, token, body, **kwargs):  # noqa: E501
        """Get list of user Records for specified Study and filters (Snapshot ODM Export)  # noqa: E501

        Example:   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_records_odm(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param ExportOptions body: Record Export Options (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.export_records_odm_with_http_info(token, body, **kwargs)  # noqa: E501

    def export_records_odm_with_http_info(self, token, body, **kwargs):  # noqa: E501
        """Get list of user Records for specified Study and filters (Snapshot ODM Export)  # noqa: E501

        Example:   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_records_odm_with_http_info(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param ExportOptions body: Record Export Options (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_records_odm" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `export_records_odm`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `export_records_odm`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'token' in local_var_params:
            header_params['token'] = local_var_params['token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/export/odm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_records_todm(self, token, body, **kwargs):  # noqa: E501
        """Get list of user Records for specified Study and filters (Transactional ODM Export)  # noqa: E501

        Example:   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_records_todm(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param TodmExportOptions body: Record Export Options (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.export_records_todm_with_http_info(token, body, **kwargs)  # noqa: E501

    def export_records_todm_with_http_info(self, token, body, **kwargs):  # noqa: E501
        """Get list of user Records for specified Study and filters (Transactional ODM Export)  # noqa: E501

        Example:   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.export_records_todm_with_http_info(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param TodmExportOptions body: Record Export Options (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_records_todm" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `export_records_todm`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `export_records_todm`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'token' in local_var_params:
            header_params['token'] = local_var_params['token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/export/todm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
