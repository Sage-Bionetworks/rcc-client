# coding: utf-8

"""
    nPhase REST Resource

    REDCap REST API v.2  # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from rcc.api_client import ApiClient
from rcc.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class ImportDataControllerApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def import_csv(self, token, body, **kwargs):  # noqa: E501
        """Import list of user Records for specified Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_csv(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param str body: Records Collection in CSV format (required)
        :param bool create_discrepancy: Enables Create Query rule runs on imported data
        :param bool send_email: Enables Send e-mail rule runs on imported data
        :param bool hide_crf: Enables Hide CRF rule runs on imported data
        :param bool hide_crf_section: Enables Hide CRFs Sections rule runs on imported data
        :param bool create_dynamic_event: Enables Create Dynamic Event rule runs on imported data
        :param bool remove_dynamic_event: Enables Remove Dynamic Event rule runs on imported data
        :param bool add_crf: Enables Add CRF rule runs on imported data
        :param bool send_notification: Enables Send Notification rule runs on imported data
        :param bool generate_schedule: Enables Schedule Calendared Events rule runs on imported data
        :param bool skip_rules_run: Skip all rule runs
        :param bool disable_emails_and_notifications: Don't send any e-mails as part of this import
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[StudyEventRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.import_csv_with_http_info(token, body, **kwargs)  # noqa: E501

    def import_csv_with_http_info(self, token, body, **kwargs):  # noqa: E501
        """Import list of user Records for specified Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_csv_with_http_info(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param str body: Records Collection in CSV format (required)
        :param bool create_discrepancy: Enables Create Query rule runs on imported data
        :param bool send_email: Enables Send e-mail rule runs on imported data
        :param bool hide_crf: Enables Hide CRF rule runs on imported data
        :param bool hide_crf_section: Enables Hide CRFs Sections rule runs on imported data
        :param bool create_dynamic_event: Enables Create Dynamic Event rule runs on imported data
        :param bool remove_dynamic_event: Enables Remove Dynamic Event rule runs on imported data
        :param bool add_crf: Enables Add CRF rule runs on imported data
        :param bool send_notification: Enables Send Notification rule runs on imported data
        :param bool generate_schedule: Enables Schedule Calendared Events rule runs on imported data
        :param bool skip_rules_run: Skip all rule runs
        :param bool disable_emails_and_notifications: Don't send any e-mails as part of this import
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[StudyEventRecord], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token',
            'body',
            'create_discrepancy',
            'send_email',
            'hide_crf',
            'hide_crf_section',
            'create_dynamic_event',
            'remove_dynamic_event',
            'add_crf',
            'send_notification',
            'generate_schedule',
            'skip_rules_run',
            'disable_emails_and_notifications'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_csv" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `import_csv`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `import_csv`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'create_discrepancy' in local_var_params:
            header_params['createDiscrepancy'] = local_var_params['create_discrepancy']  # noqa: E501
        if 'send_email' in local_var_params:
            header_params['sendEmail'] = local_var_params['send_email']  # noqa: E501
        if 'hide_crf' in local_var_params:
            header_params['hideCrf'] = local_var_params['hide_crf']  # noqa: E501
        if 'hide_crf_section' in local_var_params:
            header_params['hideCrfSection'] = local_var_params['hide_crf_section']  # noqa: E501
        if 'create_dynamic_event' in local_var_params:
            header_params['createDynamicEvent'] = local_var_params['create_dynamic_event']  # noqa: E501
        if 'remove_dynamic_event' in local_var_params:
            header_params['removeDynamicEvent'] = local_var_params['remove_dynamic_event']  # noqa: E501
        if 'add_crf' in local_var_params:
            header_params['addCrf'] = local_var_params['add_crf']  # noqa: E501
        if 'send_notification' in local_var_params:
            header_params['sendNotification'] = local_var_params['send_notification']  # noqa: E501
        if 'generate_schedule' in local_var_params:
            header_params['generateSchedule'] = local_var_params['generate_schedule']  # noqa: E501
        if 'skip_rules_run' in local_var_params:
            header_params['skipRulesRun'] = local_var_params['skip_rules_run']  # noqa: E501
        if 'disable_emails_and_notifications' in local_var_params:
            header_params['disableEmailsAndNotifications'] = local_var_params['disable_emails_and_notifications']  # noqa: E501
        if 'token' in local_var_params:
            header_params['token'] = local_var_params['token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/csv'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/import/csv', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StudyEventRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_metadata(self, token, body, **kwargs):  # noqa: E501
        """Import Metadata for specified Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_metadata(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param list[Metadata] body: Study Metadata Collection (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[Metadata]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.import_metadata_with_http_info(token, body, **kwargs)  # noqa: E501

    def import_metadata_with_http_info(self, token, body, **kwargs):  # noqa: E501
        """Import Metadata for specified Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_metadata_with_http_info(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param list[Metadata] body: Study Metadata Collection (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[Metadata], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `import_metadata`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `import_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'token' in local_var_params:
            header_params['token'] = local_var_params['token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/import/metadata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Metadata]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_odm(self, token, body, **kwargs):  # noqa: E501
        """Import list of user Records for specified Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_odm(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param ODM body: ODM model mapping (required)
        :param bool create_discrepancy: Enables Create Query rule runs on imported data
        :param bool send_email: Enables Send e-mail rule runs on imported data
        :param bool hide_crf: Enables Hide CRF rule runs on imported data
        :param bool hide_crf_section: Enables Hide CRFs Sections rule runs on imported data
        :param bool create_dynamic_event: Enables Create Dynamic Event rule runs on imported data
        :param bool remove_dynamic_event: Enables Remove Dynamic Event rule runs on imported data
        :param bool add_crf: Enables Add CRF rule runs on imported data
        :param bool send_notification: Enables Send Notification rule runs on imported data
        :param bool generate_schedule: Enables Schedule Calendared Events rule runs on imported data
        :param bool skip_rules_run: Skip all rule runs
        :param bool disable_emails_and_notifications: Don't send any e-mails as part of this import
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[StudyEventRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.import_odm_with_http_info(token, body, **kwargs)  # noqa: E501

    def import_odm_with_http_info(self, token, body, **kwargs):  # noqa: E501
        """Import list of user Records for specified Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_odm_with_http_info(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param ODM body: ODM model mapping (required)
        :param bool create_discrepancy: Enables Create Query rule runs on imported data
        :param bool send_email: Enables Send e-mail rule runs on imported data
        :param bool hide_crf: Enables Hide CRF rule runs on imported data
        :param bool hide_crf_section: Enables Hide CRFs Sections rule runs on imported data
        :param bool create_dynamic_event: Enables Create Dynamic Event rule runs on imported data
        :param bool remove_dynamic_event: Enables Remove Dynamic Event rule runs on imported data
        :param bool add_crf: Enables Add CRF rule runs on imported data
        :param bool send_notification: Enables Send Notification rule runs on imported data
        :param bool generate_schedule: Enables Schedule Calendared Events rule runs on imported data
        :param bool skip_rules_run: Skip all rule runs
        :param bool disable_emails_and_notifications: Don't send any e-mails as part of this import
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[StudyEventRecord], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token',
            'body',
            'create_discrepancy',
            'send_email',
            'hide_crf',
            'hide_crf_section',
            'create_dynamic_event',
            'remove_dynamic_event',
            'add_crf',
            'send_notification',
            'generate_schedule',
            'skip_rules_run',
            'disable_emails_and_notifications'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_odm" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `import_odm`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `import_odm`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'create_discrepancy' in local_var_params:
            header_params['createDiscrepancy'] = local_var_params['create_discrepancy']  # noqa: E501
        if 'send_email' in local_var_params:
            header_params['sendEmail'] = local_var_params['send_email']  # noqa: E501
        if 'hide_crf' in local_var_params:
            header_params['hideCrf'] = local_var_params['hide_crf']  # noqa: E501
        if 'hide_crf_section' in local_var_params:
            header_params['hideCrfSection'] = local_var_params['hide_crf_section']  # noqa: E501
        if 'create_dynamic_event' in local_var_params:
            header_params['createDynamicEvent'] = local_var_params['create_dynamic_event']  # noqa: E501
        if 'remove_dynamic_event' in local_var_params:
            header_params['removeDynamicEvent'] = local_var_params['remove_dynamic_event']  # noqa: E501
        if 'add_crf' in local_var_params:
            header_params['addCrf'] = local_var_params['add_crf']  # noqa: E501
        if 'send_notification' in local_var_params:
            header_params['sendNotification'] = local_var_params['send_notification']  # noqa: E501
        if 'generate_schedule' in local_var_params:
            header_params['generateSchedule'] = local_var_params['generate_schedule']  # noqa: E501
        if 'skip_rules_run' in local_var_params:
            header_params['skipRulesRun'] = local_var_params['skip_rules_run']  # noqa: E501
        if 'disable_emails_and_notifications' in local_var_params:
            header_params['disableEmailsAndNotifications'] = local_var_params['disable_emails_and_notifications']  # noqa: E501
        if 'token' in local_var_params:
            header_params['token'] = local_var_params['token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/import/odm', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StudyEventRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_odm_string_inflated_to_tenant(self, token, body, **kwargs):  # noqa: E501
        """Import full Study using ODM (SDM Extended Data)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_odm_string_inflated_to_tenant(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Tenant access token. Used to get current context. (required)
        :param str body: ODM model mapping (required)
        :param int study_id:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[StudyEventRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.import_odm_string_inflated_to_tenant_with_http_info(token, body, **kwargs)  # noqa: E501

    def import_odm_string_inflated_to_tenant_with_http_info(self, token, body, **kwargs):  # noqa: E501
        """Import full Study using ODM (SDM Extended Data)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_odm_string_inflated_to_tenant_with_http_info(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Tenant access token. Used to get current context. (required)
        :param str body: ODM model mapping (required)
        :param int study_id:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[StudyEventRecord], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token',
            'body',
            'study_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_odm_string_inflated_to_tenant" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `import_odm_string_inflated_to_tenant`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `import_odm_string_inflated_to_tenant`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'study_id' in local_var_params:
            header_params['study_id'] = local_var_params['study_id']  # noqa: E501
        if 'token' in local_var_params:
            header_params['token'] = local_var_params['token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/import/odm/extended-inflated', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StudyEventRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_odm_to_tenant(self, token, body, **kwargs):  # noqa: E501
        """Import full Study using ODM (SDM Extended Data)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_odm_to_tenant(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Tenant access token. Used to get current context. (required)
        :param ODM body: ODM model mapping (required)
        :param int study_id:
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[StudyEventRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.import_odm_to_tenant_with_http_info(token, body, **kwargs)  # noqa: E501

    def import_odm_to_tenant_with_http_info(self, token, body, **kwargs):  # noqa: E501
        """Import full Study using ODM (SDM Extended Data)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_odm_to_tenant_with_http_info(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Tenant access token. Used to get current context. (required)
        :param ODM body: ODM model mapping (required)
        :param int study_id:
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[StudyEventRecord], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token',
            'body',
            'study_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_odm_to_tenant" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `import_odm_to_tenant`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `import_odm_to_tenant`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'study_id' in local_var_params:
            header_params['study_id'] = local_var_params['study_id']  # noqa: E501
        if 'token' in local_var_params:
            header_params['token'] = local_var_params['token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/import/odm/extended', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StudyEventRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def import_records(self, token, body, **kwargs):  # noqa: E501
        """Import list of user Records for specified Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_records(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param list[StudyEventRecord] body: Records Collection (required)
        :param bool create_discrepancy: Enables Create Query rule runs on imported data
        :param bool send_email: Enables Send e-mail rule runs on imported data
        :param bool hide_crf: Enables Hide CRF rule runs on imported data
        :param bool hide_crf_section: Enables Hide CRFs Sections rule runs on imported data
        :param bool create_dynamic_event: Enables Create Dynamic Event rule runs on imported data
        :param bool remove_dynamic_event: Enables Remove Dynamic Event rule runs on imported data
        :param bool add_crf: Enables Add CRF rule runs on imported data
        :param bool send_notification: Enables Send Notification rule runs on imported data
        :param bool generate_schedule: Enables Schedule Calendared Events rule runs on imported data
        :param bool skip_rules_run: Skip all rule runs
        :param bool disable_emails_and_notifications: Don't send any e-mails as part of this import
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[StudyEventRecord]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.import_records_with_http_info(token, body, **kwargs)  # noqa: E501

    def import_records_with_http_info(self, token, body, **kwargs):  # noqa: E501
        """Import list of user Records for specified Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.import_records_with_http_info(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param list[StudyEventRecord] body: Records Collection (required)
        :param bool create_discrepancy: Enables Create Query rule runs on imported data
        :param bool send_email: Enables Send e-mail rule runs on imported data
        :param bool hide_crf: Enables Hide CRF rule runs on imported data
        :param bool hide_crf_section: Enables Hide CRFs Sections rule runs on imported data
        :param bool create_dynamic_event: Enables Create Dynamic Event rule runs on imported data
        :param bool remove_dynamic_event: Enables Remove Dynamic Event rule runs on imported data
        :param bool add_crf: Enables Add CRF rule runs on imported data
        :param bool send_notification: Enables Send Notification rule runs on imported data
        :param bool generate_schedule: Enables Schedule Calendared Events rule runs on imported data
        :param bool skip_rules_run: Skip all rule runs
        :param bool disable_emails_and_notifications: Don't send any e-mails as part of this import
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[StudyEventRecord], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token',
            'body',
            'create_discrepancy',
            'send_email',
            'hide_crf',
            'hide_crf_section',
            'create_dynamic_event',
            'remove_dynamic_event',
            'add_crf',
            'send_notification',
            'generate_schedule',
            'skip_rules_run',
            'disable_emails_and_notifications'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_records" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `import_records`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `import_records`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'create_discrepancy' in local_var_params:
            header_params['createDiscrepancy'] = local_var_params['create_discrepancy']  # noqa: E501
        if 'send_email' in local_var_params:
            header_params['sendEmail'] = local_var_params['send_email']  # noqa: E501
        if 'hide_crf' in local_var_params:
            header_params['hideCrf'] = local_var_params['hide_crf']  # noqa: E501
        if 'hide_crf_section' in local_var_params:
            header_params['hideCrfSection'] = local_var_params['hide_crf_section']  # noqa: E501
        if 'create_dynamic_event' in local_var_params:
            header_params['createDynamicEvent'] = local_var_params['create_dynamic_event']  # noqa: E501
        if 'remove_dynamic_event' in local_var_params:
            header_params['removeDynamicEvent'] = local_var_params['remove_dynamic_event']  # noqa: E501
        if 'add_crf' in local_var_params:
            header_params['addCrf'] = local_var_params['add_crf']  # noqa: E501
        if 'send_notification' in local_var_params:
            header_params['sendNotification'] = local_var_params['send_notification']  # noqa: E501
        if 'generate_schedule' in local_var_params:
            header_params['generateSchedule'] = local_var_params['generate_schedule']  # noqa: E501
        if 'skip_rules_run' in local_var_params:
            header_params['skipRulesRun'] = local_var_params['skip_rules_run']  # noqa: E501
        if 'disable_emails_and_notifications' in local_var_params:
            header_params['disableEmailsAndNotifications'] = local_var_params['disable_emails_and_notifications']  # noqa: E501
        if 'token' in local_var_params:
            header_params['token'] = local_var_params['token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/import/records', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[StudyEventRecord]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def survey_assignments(self, token, body, **kwargs):  # noqa: E501
        """Import list of Survey Assignments Records for specified Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.survey_assignments(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param list[RecordSurveyAssignment] body: Survey Assignments Collection (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: list[RecordSurveyAssignment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.survey_assignments_with_http_info(token, body, **kwargs)  # noqa: E501

    def survey_assignments_with_http_info(self, token, body, **kwargs):  # noqa: E501
        """Import list of Survey Assignments Records for specified Study  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.survey_assignments_with_http_info(token, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str token: Study access token. Used to get current study ID parameter. (required)
        :param list[RecordSurveyAssignment] body: Survey Assignments Collection (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(list[RecordSurveyAssignment], status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'token',
            'body'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method survey_assignments" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'token' is set
        if self.api_client.client_side_validation and ('token' not in local_var_params or  # noqa: E501
                                                        local_var_params['token'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `token` when calling `survey_assignments`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in local_var_params or  # noqa: E501
                                                        local_var_params['body'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `body` when calling `survey_assignments`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'token' in local_var_params:
            header_params['token'] = local_var_params['token']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'application/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v2/import/survey-assignments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[RecordSurveyAssignment]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
